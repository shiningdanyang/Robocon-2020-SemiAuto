
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca8c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd4c  0800cd4c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd54  0800cd54  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  24000000  0800cd5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  24000030  0800cd8c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240007e4  0800cd8c  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a7d  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f27  00000000  00000000  00040adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  00043a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  00045030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000386bc  00000000  00000000  00046540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123c5  00000000  00000000  0007ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173a5a  00000000  00000000  00090fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00204a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f94  00000000  00000000  00204a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cd0c 	.word	0x0800cd0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	0800cd0c 	.word	0x0800cd0c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <peripheralUART_Init+0x28>)
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <peripheralUART_Init+0x2c>)
 8000622:	f009 f86f 	bl	8009704 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <peripheralUART_Init+0x30>)
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <peripheralUART_Init+0x34>)
 800062c:	f009 f942 	bl	80098b4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000630:	2202      	movs	r2, #2
 8000632:	4907      	ldr	r1, [pc, #28]	; (8000650 <peripheralUART_Init+0x38>)
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <peripheralUART_Init+0x3c>)
 8000636:	f009 f93d 	bl	80098b4 <HAL_UART_Receive_DMA>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	24000724 	.word	0x24000724
 8000644:	24000668 	.word	0x24000668
 8000648:	240006f4 	.word	0x240006f4
 800064c:	240001b4 	.word	0x240001b4
 8000650:	240002a8 	.word	0x240002a8
 8000654:	240004f0 	.word	0x240004f0

08000658 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <compassReset+0x24>)
 800065e:	2261      	movs	r2, #97	; 0x61
 8000660:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	4905      	ldr	r1, [pc, #20]	; (800067c <compassReset+0x24>)
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <compassReset+0x28>)
 8000668:	f008 ffc8 	bl	80095fc <HAL_UART_Transmit_IT>
	wait4CompassTx();
 800066c:	f000 f818 	bl	80006a0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <compassReset+0x24>)
 8000672:	227a      	movs	r2, #122	; 0x7a
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	24000000 	.word	0x24000000
 8000680:	240004f0 	.word	0x240004f0

08000684 <compassRequest>:
void compassRequest(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	4903      	ldr	r1, [pc, #12]	; (8000698 <compassRequest+0x14>)
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <compassRequest+0x18>)
 800068e:	f008 ffb5 	bl	80095fc <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	24000000 	.word	0x24000000
 800069c:	240004f0 	.word	0x240004f0

080006a0 <wait4CompassTx>:

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80006a4:	e004      	b.n	80006b0 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <wait4CompassTx+0x28>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <wait4CompassTx+0x28>)
 80006ae:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <wait4CompassTx+0x2c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f6      	beq.n	80006a6 <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <wait4CompassTx+0x2c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	240007dc 	.word	0x240007dc
 80006cc:	24000720 	.word	0x24000720

080006d0 <controlMotor1>:
int trackingControlMotor4;

#define BRAKE_SPEED 1

void controlMotor1(int _speed)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bfb8      	it	lt
 80006de:	425b      	neglt	r3, r3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <controlMotor1+0x40>)
 80006e4:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db03      	blt.n	80006f4 <controlMotor1+0x24>
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <controlMotor1+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	711a      	strb	r2, [r3, #4]
 80006f2:	e002      	b.n	80006fa <controlMotor1+0x2a>
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <controlMotor1+0x40>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <controlMotor1+0x44>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <controlMotor1+0x44>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	2400000c 	.word	0x2400000c
 8000714:	240004e0 	.word	0x240004e0

08000718 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	bfb8      	it	lt
 8000726:	425b      	neglt	r3, r3
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <controlMotor2+0x40>)
 800072c:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db03      	blt.n	800073c <controlMotor2+0x24>
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <controlMotor2+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
 800073a:	e002      	b.n	8000742 <controlMotor2+0x2a>
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <controlMotor2+0x40>)
 800073e:	2201      	movs	r2, #1
 8000740:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <controlMotor2+0x44>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <controlMotor2+0x44>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	2400000c 	.word	0x2400000c
 800075c:	240002c4 	.word	0x240002c4

08000760 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	bfb8      	it	lt
 800076e:	425b      	neglt	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <controlMotor3+0x40>)
 8000774:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db03      	blt.n	8000784 <controlMotor3+0x24>
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <controlMotor3+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	719a      	strb	r2, [r3, #6]
 8000782:	e002      	b.n	800078a <controlMotor3+0x2a>
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <controlMotor3+0x40>)
 8000786:	2201      	movs	r2, #1
 8000788:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <controlMotor3+0x44>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <controlMotor3+0x44>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	2400000c 	.word	0x2400000c
 80007a4:	24000240 	.word	0x24000240

080007a8 <controlMotor4>:
void controlMotor4(int _speed)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bfb8      	it	lt
 80007b6:	425b      	neglt	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <controlMotor4+0x40>)
 80007bc:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db03      	blt.n	80007cc <controlMotor4+0x24>
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <controlMotor4+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	71da      	strb	r2, [r3, #7]
 80007ca:	e002      	b.n	80007d2 <controlMotor4+0x2a>
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <controlMotor4+0x40>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <controlMotor4+0x44>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <controlMotor4+0x44>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	2400000c 	.word	0x2400000c
 80007ec:	24000620 	.word	0x24000620

080007f0 <PIDyaw>:

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 80007f0:	b490      	push	{r4, r7}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b29b      	uxth	r3, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b41      	ldr	r3, [pc, #260]	; (8000910 <PIDyaw+0x120>)
 800080a:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 800080c:	4b40      	ldr	r3, [pc, #256]	; (8000910 <PIDyaw+0x120>)
 800080e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <PIDyaw+0x124>)
 800081c:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <PIDyaw+0x120>)
 8000822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000826:	461a      	mov	r2, r3
 8000828:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <PIDyaw+0x128>)
 800082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000838:	4b38      	ldr	r3, [pc, #224]	; (800091c <PIDyaw+0x12c>)
 800083a:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <PIDyaw+0x120>)
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <PIDyaw+0x130>)
 800084e:	ed93 7b00 	vldr	d7, [r3]
 8000852:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <PIDyaw+0x130>)
 8000858:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 800085c:	4b31      	ldr	r3, [pc, #196]	; (8000924 <PIDyaw+0x134>)
 800085e:	ed93 6b00 	vldr	d6, [r3]
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <PIDyaw+0x124>)
 8000864:	ed93 7b00 	vldr	d7, [r3]
 8000868:	ee26 6b07 	vmul.f64	d6, d6, d7
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <PIDyaw+0x138>)
 800086e:	ed93 5b00 	vldr	d5, [r3]
 8000872:	4b2a      	ldr	r3, [pc, #168]	; (800091c <PIDyaw+0x12c>)
 8000874:	ed93 7b00 	vldr	d7, [r3]
 8000878:	ee25 7b07 	vmul.f64	d7, d5, d7
 800087c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <PIDyaw+0x13c>)
 8000882:	ed93 5b00 	vldr	d5, [r3]
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <PIDyaw+0x130>)
 8000888:	ed93 7b00 	vldr	d7, [r3]
 800088c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <PIDyaw+0x140>)
 8000896:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <PIDyaw+0x140>)
 800089c:	ed93 7b00 	vldr	d7, [r3]
 80008a0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000900 <PIDyaw+0x110>
 80008a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ac:	dd05      	ble.n	80008ba <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <PIDyaw+0x140>)
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	4c1f      	ldr	r4, [pc, #124]	; (8000934 <PIDyaw+0x144>)
 80008b6:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <PIDyaw+0x140>)
 80008bc:	ed93 7b00 	vldr	d7, [r3]
 80008c0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000908 <PIDyaw+0x118>
 80008c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008cc:	d505      	bpl.n	80008da <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <PIDyaw+0x140>)
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	4c18      	ldr	r4, [pc, #96]	; (8000938 <PIDyaw+0x148>)
 80008d6:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <PIDyaw+0x120>)
 80008dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <PIDyaw+0x128>)
 80008e2:	801a      	strh	r2, [r3, #0]
	return yawPID;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <PIDyaw+0x140>)
 80008e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008ea:	ec44 3b17 	vmov	d7, r3, r4
}
 80008ee:	eeb0 0b47 	vmov.f64	d0, d7
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc90      	pop	{r4, r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	f3af 8000 	nop.w
 8000900:	00000000 	.word	0x00000000
 8000904:	40518000 	.word	0x40518000
 8000908:	00000000 	.word	0x00000000
 800090c:	c0518000 	.word	0xc0518000
 8000910:	24000350 	.word	0x24000350
 8000914:	24000360 	.word	0x24000360
 8000918:	240001b0 	.word	0x240001b0
 800091c:	24000078 	.word	0x24000078
 8000920:	24000348 	.word	0x24000348
 8000924:	24000018 	.word	0x24000018
 8000928:	24000050 	.word	0x24000050
 800092c:	24000058 	.word	0x24000058
 8000930:	24000660 	.word	0x24000660
 8000934:	40518000 	.word	0x40518000
 8000938:	c0518000 	.word	0xc0518000

0800093c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <positionControl_Init+0x1c>)
 8000942:	f008 f9eb 	bl	8008d1c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <positionControl_Init+0x20>)
 8000948:	f008 f9e8 	bl	8008d1c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <positionControl_Init+0x24>)
 800094e:	f008 f9e5 	bl	8008d1c <HAL_TIM_Base_Start_IT>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000788 	.word	0x24000788
 800095c:	24000248 	.word	0x24000248
 8000960:	24000740 	.word	0x24000740

08000964 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_TxCpltCallback+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d103      	bne.n	8000980 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_UART_TxCpltCallback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 800097e:	e01c      	b.n	80009ba <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_UART_TxCpltCallback+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	429a      	cmp	r2, r3
 800098a:	d103      	bne.n	8000994 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_TxCpltCallback+0x70>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	e012      	b.n	80009ba <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_UART_TxCpltCallback+0x74>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d103      	bne.n	80009a8 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_UART_TxCpltCallback+0x78>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	e008      	b.n	80009ba <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_UART_TxCpltCallback+0x7c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d102      	bne.n	80009ba <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_UART_TxCpltCallback+0x80>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	240004f0 	.word	0x240004f0
 80009cc:	24000720 	.word	0x24000720
 80009d0:	240001b4 	.word	0x240001b4
 80009d4:	240002c0 	.word	0x240002c0
 80009d8:	24000668 	.word	0x24000668
 80009dc:	2400058e 	.word	0x2400058e
 80009e0:	24000088 	.word	0x24000088
 80009e4:	24000634 	.word	0x24000634

080009e8 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_UART_RxCpltCallback+0x84>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d103      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_RxCpltCallback+0x88>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000a02:	e02f      	b.n	8000a64 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_UART_RxCpltCallback+0x8c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d103      	bne.n	8000a18 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_UART_RxCpltCallback+0x90>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
}
 8000a16:	e025      	b.n	8000a64 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_RxCpltCallback+0x94>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d116      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_UART_RxCpltCallback+0x98>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_RxCpltCallback+0x9c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_UART_RxCpltCallback+0x9c>)
 8000a34:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 8000a36:	2209      	movs	r2, #9
 8000a38:	4913      	ldr	r1, [pc, #76]	; (8000a88 <HAL_UART_RxCpltCallback+0xa0>)
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <HAL_UART_RxCpltCallback+0x94>)
 8000a3c:	f008 fdde 	bl	80095fc <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_UART_RxCpltCallback+0xa4>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	490d      	ldr	r1, [pc, #52]	; (8000a80 <HAL_UART_RxCpltCallback+0x98>)
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_UART_RxCpltCallback+0x94>)
 8000a4c:	f008 fe5a 	bl	8009704 <HAL_UART_Receive_IT>
}
 8000a50:	e008      	b.n	8000a64 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_UART_RxCpltCallback+0xa8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d102      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_UART_RxCpltCallback+0xac>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240004f0 	.word	0x240004f0
 8000a70:	24000378 	.word	0x24000378
 8000a74:	240001b4 	.word	0x240001b4
 8000a78:	24000592 	.word	0x24000592
 8000a7c:	24000668 	.word	0x24000668
 8000a80:	24000724 	.word	0x24000724
 8000a84:	24000784 	.word	0x24000784
 8000a88:	2400000c 	.word	0x2400000c
 8000a8c:	24000780 	.word	0x24000780
 8000a90:	24000088 	.word	0x24000088
 8000a94:	240003e9 	.word	0x240003e9

08000a98 <HAL_TIM_PeriodElapsedCallback>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4ba3      	ldr	r3, [pc, #652]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 8170 	bne.w	8000d8e <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 8000aae:	4ba2      	ldr	r3, [pc, #648]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d16b      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000ab6:	4ba1      	ldr	r3, [pc, #644]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11f      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac4:	489e      	ldr	r0, [pc, #632]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ac6:	f005 fa7f 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ace:	489c      	ldr	r0, [pc, #624]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ad0:	f005 fa93 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ad4:	4b9b      	ldr	r3, [pc, #620]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a9a      	ldr	r2, [pc, #616]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000adc:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000ade:	4b9a      	ldr	r3, [pc, #616]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a98      	ldr	r2, [pc, #608]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ae6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000ae8:	4b97      	ldr	r3, [pc, #604]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000af0:	db05      	blt.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 8000af2:	4b91      	ldr	r3, [pc, #580]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000af8:	4b93      	ldr	r3, [pc, #588]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000afe:	4b8f      	ldr	r3, [pc, #572]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d11f      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0c:	488c      	ldr	r0, [pc, #560]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b0e:	f005 fa5b 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b16:	488a      	ldr	r0, [pc, #552]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b18:	f005 fa6f 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b1c:	4b89      	ldr	r3, [pc, #548]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a88      	ldr	r2, [pc, #544]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b24:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b26:	4b88      	ldr	r3, [pc, #544]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a86      	ldr	r2, [pc, #536]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b2e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000b30:	4b85      	ldr	r3, [pc, #532]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b38:	db05      	blt.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000b40:	4b81      	ldr	r3, [pc, #516]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000b46:	4b7d      	ldr	r3, [pc, #500]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d11f      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	487a      	ldr	r0, [pc, #488]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b56:	f005 fa37 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	4878      	ldr	r0, [pc, #480]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b60:	f005 fa4b 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b64:	4b77      	ldr	r3, [pc, #476]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a76      	ldr	r2, [pc, #472]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b6c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b6e:	4b76      	ldr	r3, [pc, #472]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a74      	ldr	r2, [pc, #464]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b76:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000b78:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b80:	db05      	blt.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 8000b82:	4b6d      	ldr	r3, [pc, #436]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000b88:	4b6f      	ldr	r3, [pc, #444]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 8000b8e:	4b6f      	ldr	r3, [pc, #444]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d16b      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8000b96:	4b6e      	ldr	r3, [pc, #440]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11f      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	486b      	ldr	r0, [pc, #428]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ba6:	f005 fa0f 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bae:	4869      	ldr	r0, [pc, #420]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bb0:	f005 fa23 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000bb4:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a67      	ldr	r2, [pc, #412]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bbc:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000bbe:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a65      	ldr	r2, [pc, #404]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc6:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8000bc8:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bd0:	db05      	blt.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000bd8:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 8000bde:	4b5c      	ldr	r3, [pc, #368]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d11f      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bec:	4859      	ldr	r0, [pc, #356]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bee:	f005 f9eb 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf6:	4857      	ldr	r0, [pc, #348]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bf8:	f005 f9ff 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000bfc:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a55      	ldr	r2, [pc, #340]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c04:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a53      	ldr	r2, [pc, #332]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c0e:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c18:	db05      	blt.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d11f      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	4847      	ldr	r0, [pc, #284]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c36:	f005 f9c7 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3e:	4845      	ldr	r0, [pc, #276]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c40:	f005 f9db 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c4c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a41      	ldr	r2, [pc, #260]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c56:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000c58:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c60:	db05      	blt.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	f040 808b 	bne.w	8000d8e <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d11e      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c86:	4833      	ldr	r0, [pc, #204]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c88:	f005 f99e 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4836      	ldr	r0, [pc, #216]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c90:	f005 f9b3 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c9c:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ca6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000cb0:	db05      	blt.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d11e      	bne.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ccc:	4821      	ldr	r0, [pc, #132]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cce:	f005 f97b 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4824      	ldr	r0, [pc, #144]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000cd6:	f005 f990 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000ce2:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cec:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cf6:	db05      	blt.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d140      	bne.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d14:	f005 f958 	bl	8005fc8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d1c:	f005 f96d 	bl	8005ffa <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d28:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	e020      	b.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8000d32:	bf00      	nop
 8000d34:	24000788 	.word	0x24000788
 8000d38:	24000588 	.word	0x24000588
 8000d3c:	240006fc 	.word	0x240006fc
 8000d40:	58020c00 	.word	0x58020c00
 8000d44:	24000580 	.word	0x24000580
 8000d48:	24000640 	.word	0x24000640
 8000d4c:	24000630 	.word	0x24000630
 8000d50:	24000084 	.word	0x24000084
 8000d54:	58021800 	.word	0x58021800
 8000d58:	24000700 	.word	0x24000700
 8000d5c:	24000654 	.word	0x24000654
 8000d60:	240007cc 	.word	0x240007cc
 8000d64:	2400060c 	.word	0x2400060c
 8000d68:	58021000 	.word	0x58021000
 8000d6c:	24000730 	.word	0x24000730
 8000d70:	2400037c 	.word	0x2400037c
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d76:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d80:	db05      	blt.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400037c 	.word	0x2400037c
 8000d9c:	240007cc 	.word	0x240007cc

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f001 fa31 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f8c5 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 fca1 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000db2:	f000 fc57 	bl	8001664 <MX_DMA_Init>
  MX_ADC1_Init();
 8000db6:	f000 f975 	bl	80010a4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000dba:	f000 f9fb 	bl	80011b4 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000dbe:	f000 fb6d 	bl	800149c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000dc2:	f000 fbb7 	bl	8001534 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000dc6:	f000 fa59 	bl	800127c <MX_TIM7_Init>
  MX_TIM12_Init();
 8000dca:	f000 fa8f 	bl	80012ec <MX_TIM12_Init>
  MX_TIM15_Init();
 8000dce:	f000 fac7 	bl	8001360 <MX_TIM15_Init>
  MX_UART7_Init();
 8000dd2:	f000 fb17 	bl	8001404 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000dd6:	f000 fbf9 	bl	80015cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000dda:	f7ff fc1d 	bl	8000618 <peripheralUART_Init>
  compassReset();
 8000dde:	f7ff fc3b 	bl	8000658 <compassReset>
  delayUs_Init();
 8000de2:	f7ff fbf9 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000de6:	f7ff fda9 	bl	800093c <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2101      	movs	r1, #1
 8000dee:	484d      	ldr	r0, [pc, #308]	; (8000f24 <main+0x184>)
 8000df0:	f005 f8ea 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000df4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000df8:	f001 fa9a 	bl	8002330 <HAL_Delay>
///////////////////////////////////////////////////////////////////////

//////////////////////test xoay la bàn////////////////////////////////
//	  compassRequest();
//	  compassGetData();
	  uint16_t startTime = HAL_GetTick();
 8000dfc:	f001 fa8c 	bl	8002318 <HAL_GetTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	80fb      	strh	r3, [r7, #6]
	  while(HAL_GetTick()-startTime <10000)
 8000e04:	e03b      	b.n	8000e7e <main+0xde>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4846      	ldr	r0, [pc, #280]	; (8000f24 <main+0x184>)
 8000e0c:	f005 f8dc 	bl	8005fc8 <HAL_GPIO_WritePin>
		  PIDyaw(900, compassData);
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <main+0x188>)
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	4619      	mov	r1, r3
 8000e18:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000e1c:	f7ff fce8 	bl	80007f0 <PIDyaw>
		  controlMotor1(yawPID);
 8000e20:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <main+0x18c>)
 8000e22:	ed93 7b00 	vldr	d7, [r3]
 8000e26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e2a:	ee17 0a90 	vmov	r0, s15
 8000e2e:	f7ff fc4f 	bl	80006d0 <controlMotor1>
		  controlMotor2(yawPID);
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <main+0x18c>)
 8000e34:	ed93 7b00 	vldr	d7, [r3]
 8000e38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e3c:	ee17 0a90 	vmov	r0, s15
 8000e40:	f7ff fc6a 	bl	8000718 <controlMotor2>
		  controlMotor3(yawPID);
 8000e44:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <main+0x18c>)
 8000e46:	ed93 7b00 	vldr	d7, [r3]
 8000e4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e4e:	ee17 0a90 	vmov	r0, s15
 8000e52:	f7ff fc85 	bl	8000760 <controlMotor3>
		  controlMotor4(yawPID);
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <main+0x18c>)
 8000e58:	ed93 7b00 	vldr	d7, [r3]
 8000e5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e60:	ee17 0a90 	vmov	r0, s15
 8000e64:	f7ff fca0 	bl	80007a8 <controlMotor4>
		  spinalCordTxPacket[8] = compassData;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <main+0x188>)
 8000e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <main+0x190>)
 8000e72:	721a      	strb	r2, [r3, #8]
		  tracking++;
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <main+0x194>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a2e      	ldr	r2, [pc, #184]	; (8000f34 <main+0x194>)
 8000e7c:	6013      	str	r3, [r2, #0]
	  while(HAL_GetTick()-startTime <10000)
 8000e7e:	f001 fa4b 	bl	8002318 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d9ba      	bls.n	8000e06 <main+0x66>
	  }
	  startTime = HAL_GetTick();
 8000e90:	f001 fa42 	bl	8002318 <HAL_GetTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	80fb      	strh	r3, [r7, #6]
	  while(HAL_GetTick()-startTime <10000)
 8000e98:	e03a      	b.n	8000f10 <main+0x170>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4821      	ldr	r0, [pc, #132]	; (8000f24 <main+0x184>)
 8000ea0:	f005 f892 	bl	8005fc8 <HAL_GPIO_WritePin>
		  PIDyaw(0, compassData);
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <main+0x188>)
 8000ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fc9f 	bl	80007f0 <PIDyaw>
		  controlMotor1(yawPID);
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <main+0x18c>)
 8000eb4:	ed93 7b00 	vldr	d7, [r3]
 8000eb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ebc:	ee17 0a90 	vmov	r0, s15
 8000ec0:	f7ff fc06 	bl	80006d0 <controlMotor1>
		  controlMotor2(yawPID);
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <main+0x18c>)
 8000ec6:	ed93 7b00 	vldr	d7, [r3]
 8000eca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ece:	ee17 0a90 	vmov	r0, s15
 8000ed2:	f7ff fc21 	bl	8000718 <controlMotor2>
		  controlMotor3(yawPID);
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <main+0x18c>)
 8000ed8:	ed93 7b00 	vldr	d7, [r3]
 8000edc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ee0:	ee17 0a90 	vmov	r0, s15
 8000ee4:	f7ff fc3c 	bl	8000760 <controlMotor3>
		  controlMotor4(yawPID);
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0x18c>)
 8000eea:	ed93 7b00 	vldr	d7, [r3]
 8000eee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ef2:	ee17 0a90 	vmov	r0, s15
 8000ef6:	f7ff fc57 	bl	80007a8 <controlMotor4>
		  spinalCordTxPacket[8] = compassData;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <main+0x188>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <main+0x190>)
 8000f04:	721a      	strb	r2, [r3, #8]
		  tracking++;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <main+0x194>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <main+0x194>)
 8000f0e:	6013      	str	r3, [r2, #0]
	  while(HAL_GetTick()-startTime <10000)
 8000f10:	f001 fa02 	bl	8002318 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d9bb      	bls.n	8000e9a <main+0xfa>
	  }
	  while(1);
 8000f22:	e7fe      	b.n	8000f22 <main+0x182>
 8000f24:	58020400 	.word	0x58020400
 8000f28:	2400035c 	.word	0x2400035c
 8000f2c:	24000660 	.word	0x24000660
 8000f30:	2400000c 	.word	0x2400000c
 8000f34:	24000610 	.word	0x24000610

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0cc      	sub	sp, #304	; 0x130
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f42:	224c      	movs	r2, #76	; 0x4c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00b fed8 	bl	800ccfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f50:	2220      	movs	r2, #32
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00b fed1 	bl	800ccfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	23bc      	movs	r3, #188	; 0xbc
 8000f62:	461a      	mov	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f00b fec9 	bl	800ccfc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f005 f860 	bl	8006030 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <SystemClock_Config+0x164>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <SystemClock_Config+0x164>)
 8000f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <SystemClock_Config+0x164>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <SystemClock_Config+0x168>)
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <SystemClock_Config+0x168>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f9a:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <SystemClock_Config+0x168>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000faa:	bf00      	nop
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <SystemClock_Config+0x164>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb8:	d1f8      	bne.n	8000fac <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000fde:	233c      	movs	r3, #60	; 0x3c
 8000fe0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800100c:	4618      	mov	r0, r3
 800100e:	f005 f849 	bl	80060a4 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001018:	f000 fc74 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	233f      	movs	r3, #63	; 0x3f
 800101e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800102e:	2308      	movs	r3, #8
 8001030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001034:	2340      	movs	r3, #64	; 0x40
 8001036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800103a:	2340      	movs	r3, #64	; 0x40
 800103c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f005 fbfd 	bl	8006854 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001060:	f000 fc50 	bl	8001904 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2203      	movs	r2, #3
 800106a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2200      	movs	r2, #0
 8001072:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2200      	movs	r2, #0
 800107a:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4618      	mov	r0, r3
 8001082:	f005 ff6b 	bl	8006f5c <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800108c:	f000 fc3a 	bl	8001904 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	58024800 	.word	0x58024800
 80010a0:	58000400 	.word	0x58000400

080010a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010ca:	4a37      	ldr	r2, [pc, #220]	; (80011a8 <MX_ADC1_Init+0x104>)
 80010cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010d8:	2208      	movs	r2, #8
 80010da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010de:	2201      	movs	r2, #1
 80010e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_ADC1_Init+0x100>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_ADC1_Init+0x100>)
 800110e:	2203      	movs	r2, #3
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC1_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001126:	481f      	ldr	r0, [pc, #124]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001128:	f001 fac6 	bl	80026b8 <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001132:	f000 fbe7 	bl	8001904 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001142:	f002 f88b 	bl	800325c <HAL_ADCEx_MultiModeConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800114c:	f000 fbda 	bl	8001904 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_ADC1_Init+0x108>)
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001154:	2306      	movs	r3, #6
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800115c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001160:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001162:	2304      	movs	r3, #4
 8001164:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_ADC1_Init+0x100>)
 8001170:	f001 fc42 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800117a:	f000 fbc3 	bl	8001904 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_ADC1_Init+0x10c>)
 8001180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001182:	230c      	movs	r3, #12
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_ADC1_Init+0x100>)
 800118c:	f001 fc34 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001196:	f000 fbb5 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000384 	.word	0x24000384
 80011a8:	40022000 	.word	0x40022000
 80011ac:	2a000400 	.word	0x2a000400
 80011b0:	3ef08000 	.word	0x3ef08000

080011b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <MX_ADC3_Init+0xc0>)
 80011d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011dc:	2208      	movs	r2, #8
 80011de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC3_Init+0xbc>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC3_Init+0xbc>)
 8001200:	2200      	movs	r2, #0
 8001202:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_ADC3_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC3_Init+0xbc>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC3_Init+0xbc>)
 8001212:	2203      	movs	r2, #3
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_ADC3_Init+0xbc>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC3_Init+0xbc>)
 800121e:	2200      	movs	r2, #0
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_ADC3_Init+0xbc>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_ADC3_Init+0xbc>)
 800122c:	f001 fa44 	bl	80026b8 <HAL_ADC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001236:	f000 fb65 	bl	8001904 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_ADC3_Init+0xc4>)
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800124a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2304      	movs	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_ADC3_Init+0xbc>)
 800125a:	f001 fbcd 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001264:	f000 fb4e 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	240003f0 	.word	0x240003f0
 8001274:	58026000 	.word	0x58026000
 8001278:	04300002 	.word	0x04300002

0800127c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_TIM7_Init+0x68>)
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_TIM7_Init+0x6c>)
 8001290:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_TIM7_Init+0x68>)
 8001294:	f640 125f 	movw	r2, #2399	; 0x95f
 8001298:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_TIM7_Init+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_TIM7_Init+0x68>)
 80012a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_TIM7_Init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_TIM7_Init+0x68>)
 80012b0:	f007 fd08 	bl	8008cc4 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012ba:	f000 fb23 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM7_Init+0x68>)
 80012cc:	f008 f8a0 	bl	8009410 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80012d6:	f000 fb15 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000788 	.word	0x24000788
 80012e8:	40001400 	.word	0x40001400

080012ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <MX_TIM12_Init+0x70>)
 8001302:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001306:	f640 125f 	movw	r2, #2399	; 0x95f
 800130a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_TIM12_Init+0x6c>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001318:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_TIM12_Init+0x6c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001328:	f007 fccc 	bl	8008cc4 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8001332:	f000 fae7 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_TIM12_Init+0x6c>)
 8001342:	f007 fe35 	bl	8008fb0 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800134c:	f000 fada 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000740 	.word	0x24000740
 800135c:	40001800 	.word	0x40001800

08001360 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_TIM15_Init+0x9c>)
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <MX_TIM15_Init+0xa0>)
 8001382:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM15_Init+0x9c>)
 8001386:	f640 125f 	movw	r2, #2399	; 0x95f
 800138a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM15_Init+0x9c>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM15_Init+0x9c>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM15_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_TIM15_Init+0x9c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM15_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_TIM15_Init+0x9c>)
 80013ae:	f007 fc89 	bl	8008cc4 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80013b8:	f000 faa4 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM15_Init+0x9c>)
 80013ca:	f007 fdf1 	bl	8008fb0 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80013d4:	f000 fa96 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM15_Init+0x9c>)
 80013e6:	f008 f813 	bl	8009410 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80013f0:	f000 fa88 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	24000248 	.word	0x24000248
 8001400:	40014000 	.word	0x40014000

08001404 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_UART7_Init+0x90>)
 800140a:	4a23      	ldr	r2, [pc, #140]	; (8001498 <MX_UART7_Init+0x94>)
 800140c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_UART7_Init+0x90>)
 8001410:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001414:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_UART7_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_UART7_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_UART7_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_UART7_Init+0x90>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_UART7_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_UART7_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_UART7_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_UART7_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_UART7_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_UART7_Init+0x90>)
 800144e:	f008 f885 	bl	800955c <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001458:	f000 fa54 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_UART7_Init+0x90>)
 8001460:	f00b fb43 	bl	800caea <HAL_UARTEx_SetTxFifoThreshold>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800146a:	f000 fa4b 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <MX_UART7_Init+0x90>)
 8001472:	f00b fb78 	bl	800cb66 <HAL_UARTEx_SetRxFifoThreshold>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800147c:	f000 fa42 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_UART7_Init+0x90>)
 8001482:	f00b faf9 	bl	800ca78 <HAL_UARTEx_DisableFifoMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800148c:	f000 fa3a 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24000088 	.word	0x24000088
 8001498:	40007800 	.word	0x40007800

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <MX_USART1_UART_Init+0x94>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e4:	4811      	ldr	r0, [pc, #68]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014e6:	f008 f839 	bl	800955c <HAL_UART_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014f0:	f000 fa08 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	480d      	ldr	r0, [pc, #52]	; (800152c <MX_USART1_UART_Init+0x90>)
 80014f8:	f00b faf7 	bl	800caea <HAL_UARTEx_SetTxFifoThreshold>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001502:	f000 f9ff 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <MX_USART1_UART_Init+0x90>)
 800150a:	f00b fb2c 	bl	800cb66 <HAL_UARTEx_SetRxFifoThreshold>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001514:	f000 f9f6 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_USART1_UART_Init+0x90>)
 800151a:	f00b faad 	bl	800ca78 <HAL_UARTEx_DisableFifoMode>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 f9ee 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	240004f0 	.word	0x240004f0
 8001530:	40011000 	.word	0x40011000

08001534 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <MX_USART3_UART_Init+0x94>)
 800153c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001540:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800157e:	f007 ffed 	bl	800955c <HAL_UART_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001588:	f000 f9bc 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001590:	f00b faab 	bl	800caea <HAL_UARTEx_SetTxFifoThreshold>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800159a:	f000 f9b3 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 80015a2:	f00b fae0 	bl	800cb66 <HAL_UARTEx_SetRxFifoThreshold>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015ac:	f000 f9aa 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 80015b2:	f00b fa61 	bl	800ca78 <HAL_UARTEx_DisableFifoMode>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f000 f9a2 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	240001b4 	.word	0x240001b4
 80015c8:	40004800 	.word	0x40004800

080015cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <MX_USART6_UART_Init+0x94>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_USART6_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_USART6_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_USART6_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_USART6_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <MX_USART6_UART_Init+0x90>)
 8001616:	f007 ffa1 	bl	800955c <HAL_UART_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001620:	f000 f970 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_USART6_UART_Init+0x90>)
 8001628:	f00b fa5f 	bl	800caea <HAL_UARTEx_SetTxFifoThreshold>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001632:	f000 f967 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <MX_USART6_UART_Init+0x90>)
 800163a:	f00b fa94 	bl	800cb66 <HAL_UARTEx_SetRxFifoThreshold>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001644:	f000 f95e 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_USART6_UART_Init+0x90>)
 800164a:	f00b fa15 	bl	800ca78 <HAL_UARTEx_DisableFifoMode>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001654:	f000 f956 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	24000668 	.word	0x24000668
 8001660:	40011400 	.word	0x40011400

08001664 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_DMA_Init+0x8c>)
 800166c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <MX_DMA_Init+0x8c>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_DMA_Init+0x8c>)
 800167c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_DMA_Init+0x8c>)
 800168a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <MX_DMA_Init+0x8c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_DMA_Init+0x8c>)
 800169a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200b      	movs	r0, #11
 80016ac:	f001 ff8b 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b0:	200b      	movs	r0, #11
 80016b2:	f001 ffa2 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	200c      	movs	r0, #12
 80016bc:	f001 ff83 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016c0:	200c      	movs	r0, #12
 80016c2:	f001 ff9a 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200d      	movs	r0, #13
 80016cc:	f001 ff7b 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016d0:	200d      	movs	r0, #13
 80016d2:	f001 ff92 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	203a      	movs	r0, #58	; 0x3a
 80016dc:	f001 ff73 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016e0:	203a      	movs	r0, #58	; 0x3a
 80016e2:	f001 ff8a 	bl	80035fa <HAL_NVIC_EnableIRQ>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	58024400 	.word	0x58024400

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a76      	ldr	r2, [pc, #472]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b74      	ldr	r3, [pc, #464]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b70      	ldr	r3, [pc, #448]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a6f      	ldr	r2, [pc, #444]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b6c      	ldr	r3, [pc, #432]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a60      	ldr	r2, [pc, #384]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <MX_GPIO_Init+0x1f8>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <MX_GPIO_Init+0x1f8>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a0:	4b52      	ldr	r3, [pc, #328]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a51      	ldr	r2, [pc, #324]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <MX_GPIO_Init+0x1f8>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f240 7104 	movw	r1, #1796	; 0x704
 80017e2:	4843      	ldr	r0, [pc, #268]	; (80018f0 <MX_GPIO_Init+0x1fc>)
 80017e4:	f004 fbf0 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80017e8:	2200      	movs	r2, #0
 80017ea:	f242 0167 	movw	r1, #8295	; 0x2067
 80017ee:	4841      	ldr	r0, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x200>)
 80017f0:	f004 fbea 	bl	8005fc8 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2182      	movs	r1, #130	; 0x82
 80017f8:	483f      	ldr	r0, [pc, #252]	; (80018f8 <MX_GPIO_Init+0x204>)
 80017fa:	f004 fbe5 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001804:	483d      	ldr	r0, [pc, #244]	; (80018fc <MX_GPIO_Init+0x208>)
 8001806:	f004 fbdf 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 8001810:	483b      	ldr	r0, [pc, #236]	; (8001900 <MX_GPIO_Init+0x20c>)
 8001812:	f004 fbd9 	bl	8005fc8 <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001816:	f240 7304 	movw	r3, #1796	; 0x704
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4830      	ldr	r0, [pc, #192]	; (80018f0 <MX_GPIO_Init+0x1fc>)
 8001830:	f004 fa1a 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001834:	f242 0367 	movw	r3, #8295	; 0x2067
 8001838:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4829      	ldr	r0, [pc, #164]	; (80018f4 <MX_GPIO_Init+0x200>)
 800184e:	f004 fa0b 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <MX_GPIO_Init+0x204>)
 800186a:	f004 f9fd 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 800186e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	481d      	ldr	r0, [pc, #116]	; (80018fc <MX_GPIO_Init+0x208>)
 8001888:	f004 f9ee 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 800188c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <MX_GPIO_Init+0x208>)
 80018a6:	f004 f9df 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 80018aa:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 80018ae:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_GPIO_Init+0x20c>)
 80018c4:	f004 f9d0 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_GPIO_Init+0x204>)
 80018e0:	f004 f9c2 	bl	8005c68 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58020000 	.word	0x58020000
 80018f4:	58020400 	.word	0x58020400
 80018f8:	58021000 	.word	0x58021000
 80018fc:	58020c00 	.word	0x58020c00
 8001900:	58021800 	.word	0x58021800

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MspInit+0x30>)
 800191c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001920:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x30>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x30>)
 800192c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	58024400 	.word	0x58024400

08001948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_ADC_MspInit+0x1c8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d175      	bne.n	8001a56 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800196a:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 800196c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001970:	4a68      	ldr	r2, [pc, #416]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800197a:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 800197c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198e:	4a61      	ldr	r2, [pc, #388]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	4850      	ldr	r0, [pc, #320]	; (8001b18 <HAL_ADC_MspInit+0x1d0>)
 80019d8:	f004 f946 	bl	8005c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 80019dc:	2308      	movs	r3, #8
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	484b      	ldr	r0, [pc, #300]	; (8001b1c <HAL_ADC_MspInit+0x1d4>)
 80019f0:	f004 f93a 	bl	8005c68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 80019f6:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_ADC_MspInit+0x1dc>)
 80019f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 80019fc:	2209      	movs	r2, #9
 80019fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a38:	4839      	ldr	r0, [pc, #228]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a3a:	f001 fdf9 	bl	8003630 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001a44:	f7ff ff5e 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a35      	ldr	r2, [pc, #212]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_ADC_MspInit+0x1d8>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a54:	e058      	b.n	8001b08 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <HAL_ADC_MspInit+0x1e0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d153      	bne.n	8001b08 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_ADC_MspInit+0x1cc>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001aa0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001aa4:	f000 fc72 	bl	800238c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001aaa:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_ADC_MspInit+0x1e8>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ab0:	2273      	movs	r2, #115	; 0x73
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ace:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ade:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001aee:	f001 fd9f 	bl	8003630 <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001af8:	f7ff ff04 	bl	8001904 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001b00:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_ADC_MspInit+0x1e4>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b08:	bf00      	nop
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40022000 	.word	0x40022000
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	24000594 	.word	0x24000594
 8001b24:	40020010 	.word	0x40020010
 8001b28:	58026000 	.word	0x58026000
 8001b2c:	240002d0 	.word	0x240002d0
 8001b30:	40020028 	.word	0x40020028

08001b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d117      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2037      	movs	r0, #55	; 0x37
 8001b6a:	f001 fd2c 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b6e:	2037      	movs	r0, #55	; 0x37
 8001b70:	f001 fd43 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b74:	e038      	b.n	8001be8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d117      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b86:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	202b      	movs	r0, #43	; 0x2b
 8001ba4:	f001 fd0f 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ba8:	202b      	movs	r0, #43	; 0x2b
 8001baa:	f001 fd26 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001bae:	e01b      	b.n	8001be8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_TIM_Base_MspInit+0xc8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d116      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2074      	movs	r0, #116	; 0x74
 8001bde:	f001 fcf2 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001be2:	2074      	movs	r0, #116	; 0x74
 8001be4:	f001 fd09 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40001400 	.word	0x40001400
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	40001800 	.word	0x40001800
 8001bfc:	40014000 	.word	0x40014000

08001c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b090      	sub	sp, #64	; 0x40
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4aa3      	ldr	r2, [pc, #652]	; (8001eac <HAL_UART_MspInit+0x2ac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d136      	bne.n	8001c90 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c28:	4aa1      	ldr	r2, [pc, #644]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c32:	4b9f      	ldr	r3, [pc, #636]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c40:	4b9b      	ldr	r3, [pc, #620]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c50:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001c5e:	23c0      	movs	r3, #192	; 0xc0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	488e      	ldr	r0, [pc, #568]	; (8001eb4 <HAL_UART_MspInit+0x2b4>)
 8001c7a:	f003 fff5 	bl	8005c68 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2104      	movs	r1, #4
 8001c82:	2052      	movs	r0, #82	; 0x52
 8001c84:	f001 fc9f 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c88:	2052      	movs	r0, #82	; 0x52
 8001c8a:	f001 fcb6 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c8e:	e108      	b.n	8001ea2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a88      	ldr	r2, [pc, #544]	; (8001eb8 <HAL_UART_MspInit+0x2b8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d165      	bne.n	8001d66 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	4b85      	ldr	r3, [pc, #532]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca0:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001caa:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	4a7c      	ldr	r2, [pc, #496]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc8:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001cd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4872      	ldr	r0, [pc, #456]	; (8001ebc <HAL_UART_MspInit+0x2bc>)
 8001cf4:	f003 ffb8 	bl	8005c68 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream2;
 8001cf8:	4b71      	ldr	r3, [pc, #452]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001cfa:	4a72      	ldr	r2, [pc, #456]	; (8001ec4 <HAL_UART_MspInit+0x2c4>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001cfe:	4b70      	ldr	r3, [pc, #448]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d00:	2229      	movs	r2, #41	; 0x29
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d04:	4b6e      	ldr	r3, [pc, #440]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d18:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1e:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d24:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2c:	4b64      	ldr	r3, [pc, #400]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d38:	4861      	ldr	r0, [pc, #388]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d3a:	f001 fc79 	bl	8003630 <HAL_DMA_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001d44:	f7ff fdde 	bl	8001904 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a5d      	ldr	r2, [pc, #372]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d4c:	679a      	str	r2, [r3, #120]	; 0x78
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_UART_MspInit+0x2c0>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	2025      	movs	r0, #37	; 0x25
 8001d5a:	f001 fc34 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d5e:	2025      	movs	r0, #37	; 0x25
 8001d60:	f001 fc4b 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001d64:	e09d      	b.n	8001ea2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_UART_MspInit+0x2c8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d15d      	bne.n	8001e2c <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d76:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	483c      	ldr	r0, [pc, #240]	; (8001ebc <HAL_UART_MspInit+0x2bc>)
 8001dca:	f003 ff4d 	bl	8005c68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001dd0:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <HAL_UART_MspInit+0x2d0>)
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001dd6:	222d      	movs	r2, #45	; 0x2d
 8001dd8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e0e:	482f      	ldr	r0, [pc, #188]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001e10:	f001 fc0e 	bl	8003630 <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001e1a:	f7ff fd73 	bl	8001904 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001e22:	679a      	str	r2, [r3, #120]	; 0x78
 8001e24:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <HAL_UART_MspInit+0x2cc>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e2a:	e03a      	b.n	8001ea2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_UART_MspInit+0x2d4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d135      	bne.n	8001ea2 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e3e:	f043 0320 	orr.w	r3, r3, #32
 8001e42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_UART_MspInit+0x2b0>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001e82:	2307      	movs	r3, #7
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <HAL_UART_MspInit+0x2d8>)
 8001e8e:	f003 feeb 	bl	8005c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	2047      	movs	r0, #71	; 0x47
 8001e98:	f001 fb95 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e9c:	2047      	movs	r0, #71	; 0x47
 8001e9e:	f001 fbac 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3740      	adds	r7, #64	; 0x40
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40007800 	.word	0x40007800
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	58021400 	.word	0x58021400
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	58020400 	.word	0x58020400
 8001ec0:	24000458 	.word	0x24000458
 8001ec4:	40020040 	.word	0x40020040
 8001ec8:	40004800 	.word	0x40004800
 8001ecc:	2400012c 	.word	0x2400012c
 8001ed0:	40020440 	.word	0x40020440
 8001ed4:	40011400 	.word	0x40011400
 8001ed8:	58020800 	.word	0x58020800

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <SysTick_Handler+0x2c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <SysTick_Handler+0x2c>)
 8001f3a:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <SysTick_Handler+0x2c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d904      	bls.n	8001f4e <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Handler+0x2c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001f4a:	f7fe fb9b 	bl	8000684 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4e:	f000 f9cf 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	240004dc 	.word	0x240004dc

08001f5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DMA1_Stream0_IRQHandler+0x10>)
 8001f62:	f002 fb6f 	bl	8004644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	24000594 	.word	0x24000594

08001f70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <DMA1_Stream1_IRQHandler+0x10>)
 8001f76:	f002 fb65 	bl	8004644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	240002d0 	.word	0x240002d0

08001f84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <DMA1_Stream2_IRQHandler+0x24>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <DMA1_Stream2_IRQHandler+0x24>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <DMA1_Stream2_IRQHandler+0x28>)
 8001f9c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <DMA1_Stream2_IRQHandler+0x2c>)
 8001fa0:	f002 fb50 	bl	8004644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	240002a8 	.word	0x240002a8
 8001fac:	2400035c 	.word	0x2400035c
 8001fb0:	24000458 	.word	0x24000458

08001fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <USART1_IRQHandler+0x10>)
 8001fba:	f007 fd03 	bl	80099c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	240004f0 	.word	0x240004f0

08001fc8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001fce:	f006 fecf 	bl	8008d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000740 	.word	0x24000740

08001fdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM7_IRQHandler+0x10>)
 8001fe2:	f006 fec5 	bl	8008d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	24000788 	.word	0x24000788

08001ff0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d135      	bne.n	8002068 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <DMA2_Stream2_IRQHandler+0xac>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	b2d1      	uxtb	r1, r2
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <DMA2_Stream2_IRQHandler+0xac>)
 8002006:	7011      	strb	r1, [r2, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <DMA2_Stream2_IRQHandler+0xb0>)
 800200c:	7819      	ldrb	r1, [r3, #0]
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 8002010:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <DMA2_Stream2_IRQHandler+0xac>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d926      	bls.n	8002068 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <DMA2_Stream2_IRQHandler+0xac>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	b21a      	sxth	r2, r3
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21a      	sxth	r2, r3
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <DMA2_Stream2_IRQHandler+0xb8>)
 800203a:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 800203e:	789b      	ldrb	r3, [r3, #2]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 8002046:	78db      	ldrb	r3, [r3, #3]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21a      	sxth	r2, r3
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <DMA2_Stream2_IRQHandler+0xbc>)
 8002050:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	b21a      	sxth	r2, r3
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <DMA2_Stream2_IRQHandler+0xb4>)
 800205c:	795b      	ldrb	r3, [r3, #5]
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <DMA2_Stream2_IRQHandler+0xc0>)
 8002066:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <DMA2_Stream2_IRQHandler+0xb0>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2baa      	cmp	r3, #170	; 0xaa
 800206e:	d106      	bne.n	800207e <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e006      	b.n	800208c <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b04      	cmp	r3, #4
 8002084:	d002      	beq.n	800208c <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <DMA2_Stream2_IRQHandler+0xa8>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <DMA2_Stream2_IRQHandler+0xc4>)
 800208e:	f002 fad9 	bl	8004644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2400004c 	.word	0x2400004c
 800209c:	240003e8 	.word	0x240003e8
 80020a0:	240006f4 	.word	0x240006f4
 80020a4:	240002a0 	.word	0x240002a0
 80020a8:	2400058c 	.word	0x2400058c
 80020ac:	24000590 	.word	0x24000590
 80020b0:	24000710 	.word	0x24000710
 80020b4:	2400012c 	.word	0x2400012c

080020b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <USART6_IRQHandler+0x10>)
 80020be:	f007 fc81 	bl	80099c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	24000668 	.word	0x24000668

080020cc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <UART7_IRQHandler+0x10>)
 80020d2:	f007 fc77 	bl	80099c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	24000088 	.word	0x24000088

080020e0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM15_IRQHandler+0x10>)
 80020e6:	f006 fe43 	bl	8008d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	24000248 	.word	0x24000248

080020f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <SystemInit+0xac>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <SystemInit+0xac>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <SystemInit+0xb0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <SystemInit+0xb0>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <SystemInit+0xb0>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <SystemInit+0xb0>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <SystemInit+0xb0>)
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <SystemInit+0xb4>)
 8002122:	4013      	ands	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <SystemInit+0xb0>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <SystemInit+0xb0>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <SystemInit+0xb0>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <SystemInit+0xb0>)
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <SystemInit+0xb0>)
 8002140:	2200      	movs	r2, #0
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <SystemInit+0xb0>)
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <SystemInit+0xb0>)
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <SystemInit+0xb0>)
 8002152:	2200      	movs	r2, #0
 8002154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <SystemInit+0xb0>)
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <SystemInit+0xb0>)
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <SystemInit+0xb0>)
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <SystemInit+0xb0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <SystemInit+0xb0>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <SystemInit+0xb0>)
 8002176:	2200      	movs	r2, #0
 8002178:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <SystemInit+0xb8>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <SystemInit+0xbc>)
 8002180:	4013      	ands	r3, r2
 8002182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002186:	d202      	bcs.n	800218e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <SystemInit+0xc0>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SystemInit+0xac>)
 8002190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002194:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	58024400 	.word	0x58024400
 80021a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021ac:	5c001000 	.word	0x5c001000
 80021b0:	ffff0000 	.word	0xffff0000
 80021b4:	51008108 	.word	0x51008108

080021b8 <Reset_Handler>:
 80021b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f0 <LoopFillZerobss+0x14>
 80021bc:	2100      	movs	r1, #0
 80021be:	e003      	b.n	80021c8 <LoopCopyDataInit>

080021c0 <CopyDataInit>:
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <LoopFillZerobss+0x18>)
 80021c2:	585b      	ldr	r3, [r3, r1]
 80021c4:	5043      	str	r3, [r0, r1]
 80021c6:	3104      	adds	r1, #4

080021c8 <LoopCopyDataInit>:
 80021c8:	480b      	ldr	r0, [pc, #44]	; (80021f8 <LoopFillZerobss+0x1c>)
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <LoopFillZerobss+0x20>)
 80021cc:	1842      	adds	r2, r0, r1
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3f6      	bcc.n	80021c0 <CopyDataInit>
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <LoopFillZerobss+0x24>)
 80021d4:	e002      	b.n	80021dc <LoopFillZerobss>

080021d6 <FillZerobss>:
 80021d6:	2300      	movs	r3, #0
 80021d8:	f842 3b04 	str.w	r3, [r2], #4

080021dc <LoopFillZerobss>:
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <LoopFillZerobss+0x28>)
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3f9      	bcc.n	80021d6 <FillZerobss>
 80021e2:	f7ff ff87 	bl	80020f4 <SystemInit>
 80021e6:	f00a fd65 	bl	800ccb4 <__libc_init_array>
 80021ea:	f7fe fdd9 	bl	8000da0 <main>
 80021ee:	4770      	bx	lr
 80021f0:	24080000 	.word	0x24080000
 80021f4:	0800cd5c 	.word	0x0800cd5c
 80021f8:	24000000 	.word	0x24000000
 80021fc:	24000030 	.word	0x24000030
 8002200:	24000030 	.word	0x24000030
 8002204:	240007e4 	.word	0x240007e4

08002208 <ADC3_IRQHandler>:
 8002208:	e7fe      	b.n	8002208 <ADC3_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002212:	2003      	movs	r0, #3
 8002214:	f001 f9cc 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002218:	f004 fcd2 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800221c:	4601      	mov	r1, r0
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_Init+0x68>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_Init+0x6c>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa21 f303 	lsr.w	r3, r1, r3
 8002234:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_Init+0x68>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_Init+0x6c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_Init+0x70>)
 800224e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_Init+0x74>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f814 	bl	8002284 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e002      	b.n	800226c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002266:	f7ff fb55 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024400 	.word	0x58024400
 8002278:	0800cd34 	.word	0x0800cd34
 800227c:	24000024 	.word	0x24000024
 8002280:	24000020 	.word	0x24000020

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_InitTick+0x60>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e021      	b.n	80022dc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_InitTick+0x64>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_InitTick+0x60>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f9b1 	bl	8003616 <HAL_SYSTICK_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00e      	b.n	80022dc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d80a      	bhi.n	80022da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f001 f97b 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <HAL_InitTick+0x68>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2400002c 	.word	0x2400002c
 80022e8:	24000020 	.word	0x24000020
 80022ec:	24000028 	.word	0x24000028

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	2400002c 	.word	0x2400002c
 8002314:	240007e0 	.word	0x240007e0

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	240007e0 	.word	0x240007e0

08002330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff ffee 	bl	8002318 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d005      	beq.n	8002356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_Delay+0x40>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002356:	bf00      	nop
 8002358:	f7ff ffde 	bl	8002318 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d8f7      	bhi.n	8002358 <HAL_Delay+0x28>
  {
  }
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2400002c 	.word	0x2400002c

08002374 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_GetREVID+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0c1b      	lsrs	r3, r3, #16
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	5c001000 	.word	0x5c001000

0800238c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	4904      	ldr	r1, [pc, #16]	; (80023b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58000400 	.word	0x58000400

080023b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	609a      	str	r2, [r3, #8]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002420:	b490      	push	{r4, r7}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	430b      	orrs	r3, r1
 800244c:	4313      	orrs	r3, r2
 800244e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bc90      	pop	{r4, r7}
 8002458:	4770      	bx	lr

0800245a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	611a      	str	r2, [r3, #16]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800248c:	b490      	push	{r4, r7}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3360      	adds	r3, #96	; 0x60
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	6023      	str	r3, [r4, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc90      	pop	{r4, r7}
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024bc:	b490      	push	{r4, r7}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3330      	adds	r3, #48	; 0x30
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	4413      	add	r3, r2
 80024da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	211f      	movs	r1, #31
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	401a      	ands	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 011f 	and.w	r1, r3, #31
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bc90      	pop	{r4, r7}
 800250c:	4770      	bx	lr

0800250e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800250e:	b490      	push	{r4, r7}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3314      	adds	r3, #20
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	0d1b      	lsrs	r3, r3, #20
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2107      	movs	r1, #7
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	401a      	ands	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0d1b      	lsrs	r3, r3, #20
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bc90      	pop	{r4, r7}
 800255c:	4770      	bx	lr
	...

08002560 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0318 	and.w	r3, r3, #24
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002584:	40d9      	lsrs	r1, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	400b      	ands	r3, r1
 800258a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	000fffff 	.word	0x000fffff

080025a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6093      	str	r3, [r2, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	5fffffc0 	.word	0x5fffffc0

080025cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <LL_ADC_EnableInternalRegulator+0x24>)
 8002602:	4013      	ands	r3, r2
 8002604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	6fffffc0 	.word	0x6fffffc0

0800261c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <LL_ADC_IsEnabled+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_ADC_IsEnabled+0x1a>
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b04      	cmp	r3, #4
 800267c:	d101      	bne.n	8002682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d101      	bne.n	80026a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e18e      	b.n	80029f0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f931 	bl	8001948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff67 	bl	80025cc <LL_ADC_IsDeepPowerDownEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff4d 	bl	80025a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff82 	bl	800261c <LL_ADC_IsInternalRegulatorEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff66 	bl	80025f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002728:	4b9a      	ldr	r3, [pc, #616]	; (8002994 <HAL_ADC_Init+0x2dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	4a9a      	ldr	r2, [pc, #616]	; (8002998 <HAL_ADC_Init+0x2e0>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002738:	e002      	b.n	8002740 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff66 	bl	800261c <LL_ADC_IsInternalRegulatorEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff77 	bl	800266a <LL_ADC_REG_IsConversionOngoing>
 800277c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8129 	bne.w	80029de <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 8125 	bne.w	80029de <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800279c:	f043 0202 	orr.w	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff4b 	bl	8002644 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d136      	bne.n	8002822 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a78      	ldr	r2, [pc, #480]	; (800299c <HAL_ADC_Init+0x2e4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_Init+0x110>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <HAL_ADC_Init+0x2e8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10e      	bne.n	80027e6 <HAL_ADC_Init+0x12e>
 80027c8:	4874      	ldr	r0, [pc, #464]	; (800299c <HAL_ADC_Init+0x2e4>)
 80027ca:	f7ff ff3b 	bl	8002644 <LL_ADC_IsEnabled>
 80027ce:	4604      	mov	r4, r0
 80027d0:	4873      	ldr	r0, [pc, #460]	; (80029a0 <HAL_ADC_Init+0x2e8>)
 80027d2:	f7ff ff37 	bl	8002644 <LL_ADC_IsEnabled>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4323      	orrs	r3, r4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e008      	b.n	80027f8 <HAL_ADC_Init+0x140>
 80027e6:	486f      	ldr	r0, [pc, #444]	; (80029a4 <HAL_ADC_Init+0x2ec>)
 80027e8:	f7ff ff2c 	bl	8002644 <LL_ADC_IsEnabled>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a66      	ldr	r2, [pc, #408]	; (800299c <HAL_ADC_Init+0x2e4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_ADC_Init+0x158>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_ADC_Init+0x2e8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_ADC_Init+0x15c>
 8002810:	4a65      	ldr	r2, [pc, #404]	; (80029a8 <HAL_ADC_Init+0x2f0>)
 8002812:	e000      	b.n	8002816 <HAL_ADC_Init+0x15e>
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_ADC_Init+0x2f4>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7ff fdcb 	bl	80023b8 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002822:	f7ff fda7 	bl	8002374 <HAL_GetREVID>
 8002826:	4602      	mov	r2, r0
 8002828:	f241 0303 	movw	r3, #4099	; 0x1003
 800282c:	429a      	cmp	r2, r3
 800282e:	d914      	bls.n	800285a <HAL_ADC_Init+0x1a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d110      	bne.n	800285a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7d5b      	ldrb	r3, [r3, #21]
 800283c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002842:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002848:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
 800284e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002850:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002852:	f043 030c 	orr.w	r3, r3, #12
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e00d      	b.n	8002876 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7d5b      	ldrb	r3, [r3, #21]
 800285e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002864:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800286a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7f1b      	ldrb	r3, [r3, #28]
 8002870:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7f1b      	ldrb	r3, [r3, #28]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	3b01      	subs	r3, #1
 8002884:	045b      	lsls	r3, r3, #17
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_ADC_Init+0x2f8>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fed2 	bl	800266a <LL_ADC_REG_IsConversionOngoing>
 80028c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fedf 	bl	8002690 <LL_ADC_INJ_IsConversionOngoing>
 80028d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d14a      	bne.n	8002970 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d147      	bne.n	8002970 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7d1b      	ldrb	r3, [r3, #20]
 80028e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_ADC_Init+0x2fc>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	69b9      	ldr	r1, [r7, #24]
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11b      	bne.n	8002944 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_ADC_Init+0x300>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002920:	3a01      	subs	r2, #1
 8002922:	0411      	lsls	r1, r2, #16
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002934:	430a      	orrs	r2, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e007      	b.n	8002954 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fb58 	bl	8003020 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d121      	bne.n	80029bc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f023 010f 	bic.w	r1, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e01c      	b.n	80029cc <HAL_ADC_Init+0x314>
 8002992:	bf00      	nop
 8002994:	24000020 	.word	0x24000020
 8002998:	053e2d63 	.word	0x053e2d63
 800299c:	40022000 	.word	0x40022000
 80029a0:	40022100 	.word	0x40022100
 80029a4:	58026000 	.word	0x58026000
 80029a8:	40022300 	.word	0x40022300
 80029ac:	58026300 	.word	0x58026300
 80029b0:	fff0c003 	.word	0xfff0c003
 80029b4:	ffffbffc 	.word	0xffffbffc
 80029b8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020f 	bic.w	r2, r2, #15
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f023 0303 	bic.w	r3, r3, #3
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
 80029dc:	e007      	b.n	80029ee <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b099      	sub	sp, #100	; 0x64
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a99      	ldr	r2, [pc, #612]	; (8002c78 <HAL_ADC_ConfigChannel+0x280>)
 8002a12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x2a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e2e6      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x5f8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fe1b 	bl	800266a <LL_ADC_REG_IsConversionOngoing>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 82cb 	bne.w	8002fd2 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x62>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2201      	movs	r2, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	e00f      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x82>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2201      	movs	r2, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	69d1      	ldr	r1, [r2, #28]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f7ff fd11 	bl	80024bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fde3 	bl	800266a <LL_ADC_REG_IsConversionOngoing>
 8002aa4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fdf0 	bl	8002690 <LL_ADC_INJ_IsConversionOngoing>
 8002ab0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 80b3 	bne.w	8002c20 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80af 	bne.w	8002c20 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7ff fd1d 	bl	800250e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ad4:	4b69      	ldr	r3, [pc, #420]	; (8002c7c <HAL_ADC_ConfigChannel+0x284>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae0:	d10b      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x102>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	e01d      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x13e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x128>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	e00a      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x13e>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d027      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4e:	f7ff fc67 	bl	8002420 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	7e5b      	ldrb	r3, [r3, #25]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x170>
 8002b62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x172>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7ff fc8e 	bl	800248c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6919      	ldr	r1, [r3, #16]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	7e1b      	ldrb	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x18e>
 8002b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x190>
 8002b86:	2300      	movs	r3, #0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f7ff fc66 	bl	800245a <LL_ADC_SetDataRightShift>
 8002b8e:	e047      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	069b      	lsls	r3, r3, #26
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d107      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	069b      	lsls	r3, r3, #26
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bd6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bfa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	069b      	lsls	r3, r3, #26
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d107      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fd0d 	bl	8002644 <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 81d9 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f7ff fc8e 	bl	8002560 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_ADC_ConfigChannel+0x280>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f040 8101 	bne.w	8002e52 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x288>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e016      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x2ae>
 8002c78:	47ff0000 	.word	0x47ff0000
 8002c7c:	5c001000 	.word	0x5c001000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d064      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x2ce>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc4:	e00e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x2ec>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x30c>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	e010      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x32e>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x354>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f003 021f 	and.w	r2, r3, #31
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	051b      	lsls	r3, r3, #20
 8002d4a:	e011      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x378>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	430b      	orrs	r3, r1
 8002d72:	e069      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x398>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8e:	e00e      	b.n	8002dae <HAL_ADC_ConfigChannel+0x3b6>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	069b      	lsls	r3, r3, #26
 8002daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x3d6>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	e010      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x3f8>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	617b      	str	r3, [r7, #20]
  return result;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	ea42 0103 	orr.w	r1, r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x424>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	e014      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x44e>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	60fb      	str	r3, [r7, #12]
  return result;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b1e      	subs	r3, #30
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e46:	430b      	orrs	r3, r1
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7ff fb5e 	bl	800250e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f280 80c4 	bge.w	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x478>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a64      	ldr	r2, [pc, #400]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x47c>
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_ADC_ConfigChannel+0x608>)
 8002e72:	e000      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x47e>
 8002e74:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_ADC_ConfigChannel+0x60c>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fac4 	bl	8002404 <LL_ADC_GetCommonPathInternalCh>
 8002e7c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x49a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10e      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x4b8>
 8002e92:	4859      	ldr	r0, [pc, #356]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002e94:	f7ff fbd6 	bl	8002644 <LL_ADC_IsEnabled>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4858      	ldr	r0, [pc, #352]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002e9c:	f7ff fbd2 	bl	8002644 <LL_ADC_IsEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e008      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x4ca>
 8002eb0:	4855      	ldr	r0, [pc, #340]	; (8003008 <HAL_ADC_ConfigChannel+0x610>)
 8002eb2:	f7ff fbc7 	bl	8002644 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d07b      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a50      	ldr	r2, [pc, #320]	; (800300c <HAL_ADC_ConfigChannel+0x614>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d12e      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x536>
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d129      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <HAL_ADC_ConfigChannel+0x610>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d17f      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x500>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x504>
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_ADC_ConfigChannel+0x608>)
 8002efa:	e000      	b.n	8002efe <HAL_ADC_ConfigChannel+0x506>
 8002efc:	4a41      	ldr	r2, [pc, #260]	; (8003004 <HAL_ADC_ConfigChannel+0x60c>)
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff fa69 	bl	80023de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_ADC_ConfigChannel+0x618>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <HAL_ADC_ConfigChannel+0x61c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f1e:	e002      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	e05a      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_ADC_ConfigChannel+0x620>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d11e      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x57e>
 8002f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_ADC_ConfigChannel+0x610>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d14b      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x568>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x56c>
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_ADC_ConfigChannel+0x608>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x56e>
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_ADC_ConfigChannel+0x60c>)
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fa35 	bl	80023de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f74:	e036      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a28      	ldr	r2, [pc, #160]	; (800301c <HAL_ADC_ConfigChannel+0x624>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d131      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
 8002f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d12c      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_ADC_ConfigChannel+0x610>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d127      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_ADC_ConfigChannel+0x600>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x5b0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_ADC_ConfigChannel+0x604>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x5b4>
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_ADC_ConfigChannel+0x608>)
 8002faa:	e000      	b.n	8002fae <HAL_ADC_ConfigChannel+0x5b6>
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_ADC_ConfigChannel+0x60c>)
 8002fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f7ff fa11 	bl	80023de <LL_ADC_SetCommonPathInternalCh>
 8002fbc:	e012      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fd0:	e008      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3764      	adds	r7, #100	; 0x64
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	40022100 	.word	0x40022100
 8003000:	40022300 	.word	0x40022300
 8003004:	58026300 	.word	0x58026300
 8003008:	58026000 	.word	0x58026000
 800300c:	cb840000 	.word	0xcb840000
 8003010:	24000020 	.word	0x24000020
 8003014:	053e2d63 	.word	0x053e2d63
 8003018:	c7520000 	.word	0xc7520000
 800301c:	cfb80000 	.word	0xcfb80000

08003020 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a70      	ldr	r2, [pc, #448]	; (80031f0 <ADC_ConfigureBoostMode+0x1d0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <ADC_ConfigureBoostMode+0x1c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6f      	ldr	r2, [pc, #444]	; (80031f4 <ADC_ConfigureBoostMode+0x1d4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d109      	bne.n	8003050 <ADC_ConfigureBoostMode+0x30>
 800303c:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <ADC_ConfigureBoostMode+0x1d8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e008      	b.n	8003062 <ADC_ConfigureBoostMode+0x42>
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <ADC_ConfigureBoostMode+0x1dc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003066:	f003 ff1d 	bl	8006ea4 <HAL_RCC_GetHCLKFreq>
 800306a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003074:	d006      	beq.n	8003084 <ADC_ConfigureBoostMode+0x64>
 8003076:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800307a:	d00b      	beq.n	8003094 <ADC_ConfigureBoostMode+0x74>
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d000      	beq.n	8003084 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003082:	e05d      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	60fb      	str	r3, [r7, #12]
        break;
 8003092:	e055      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	60fb      	str	r3, [r7, #12]
        break;
 800309a:	e051      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800309c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030a0:	f004 fe3a 	bl	8007d18 <HAL_RCCEx_GetPeriphCLKFreq>
 80030a4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030ae:	d02a      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
 80030b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030b4:	d813      	bhi.n	80030de <ADC_ConfigureBoostMode+0xbe>
 80030b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030ba:	d024      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
 80030bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030c0:	d806      	bhi.n	80030d0 <ADC_ConfigureBoostMode+0xb0>
 80030c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030c6:	d01e      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
 80030c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030cc:	d01b      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80030ce:	e037      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d4:	d017      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
 80030d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030da:	d014      	beq.n	8003106 <ADC_ConfigureBoostMode+0xe6>
        break;
 80030dc:	e030      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030e2:	d021      	beq.n	8003128 <ADC_ConfigureBoostMode+0x108>
 80030e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030e8:	d806      	bhi.n	80030f8 <ADC_ConfigureBoostMode+0xd8>
 80030ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030ee:	d013      	beq.n	8003118 <ADC_ConfigureBoostMode+0xf8>
 80030f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f4:	d014      	beq.n	8003120 <ADC_ConfigureBoostMode+0x100>
        break;
 80030f6:	e023      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80030f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030fc:	d018      	beq.n	8003130 <ADC_ConfigureBoostMode+0x110>
 80030fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003102:	d019      	beq.n	8003138 <ADC_ConfigureBoostMode+0x118>
        break;
 8003104:	e01c      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	60fb      	str	r3, [r7, #12]
        break;
 8003116:	e013      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
      break;
 800311e:	e00f      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	60fb      	str	r3, [r7, #12]
        break;
 8003126:	e00b      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	60fb      	str	r3, [r7, #12]
        break;
 800312e:	e007      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	09db      	lsrs	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
        break;
 8003136:	e003      	b.n	8003140 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	60fb      	str	r3, [r7, #12]
        break;
 800313e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003140:	f7ff f918 	bl	8002374 <HAL_GetREVID>
 8003144:	4602      	mov	r2, r0
 8003146:	f241 0303 	movw	r3, #4099	; 0x1003
 800314a:	429a      	cmp	r2, r3
 800314c:	d815      	bhi.n	800317a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <ADC_ConfigureBoostMode+0x1e0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d908      	bls.n	8003168 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003164:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003166:	e03e      	b.n	80031e6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	e035      	b.n	80031e6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <ADC_ConfigureBoostMode+0x1e4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d808      	bhi.n	800319a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	e025      	b.n	80031e6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <ADC_ConfigureBoostMode+0x1e8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d80a      	bhi.n	80031b8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	609a      	str	r2, [r3, #8]
}
 80031b6:	e016      	b.n	80031e6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <ADC_ConfigureBoostMode+0x1ec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d80a      	bhi.n	80031d6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	e007      	b.n	80031e6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031e4:	609a      	str	r2, [r3, #8]
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40022100 	.word	0x40022100
 80031f8:	40022300 	.word	0x40022300
 80031fc:	58026300 	.word	0x58026300
 8003200:	01312d00 	.word	0x01312d00
 8003204:	005f5e10 	.word	0x005f5e10
 8003208:	00bebc20 	.word	0x00bebc20
 800320c:	017d7840 	.word	0x017d7840

08003210 <LL_ADC_IsEnabled>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <LL_ADC_IsEnabled+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_IsEnabled+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_REG_IsConversionOngoing>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d101      	bne.n	800324e <LL_ADC_REG_IsConversionOngoing+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b09f      	sub	sp, #124	; 0x7c
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003276:	2302      	movs	r3, #2
 8003278:	e0ba      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800328c:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	e001      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09d      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ffbd 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 80032bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ffb7 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d17f      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d17c      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80032e8:	4b45      	ldr	r3, [pc, #276]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80032ec:	4b45      	ldr	r3, [pc, #276]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d039      	beq.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a38      	ldr	r2, [pc, #224]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800331e:	4836      	ldr	r0, [pc, #216]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003320:	f7ff ff76 	bl	8003210 <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4835      	ldr	r0, [pc, #212]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003328:	f7ff ff72 	bl	8003210 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800333c:	4832      	ldr	r0, [pc, #200]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800333e:	f7ff ff67 	bl	8003210 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d047      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003358:	4013      	ands	r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336a:	e03a      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800336c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10e      	bne.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 800338c:	481a      	ldr	r0, [pc, #104]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800338e:	f7ff ff3f 	bl	8003210 <LL_ADC_IsEnabled>
 8003392:	4604      	mov	r4, r0
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003396:	f7ff ff3b 	bl	8003210 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	4323      	orrs	r3, r4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e008      	b.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033ac:	f7ff ff30 	bl	8003210 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	e009      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033e0:	e000      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	377c      	adds	r7, #124	; 0x7c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	40022300 	.word	0x40022300
 8003404:	58026300 	.word	0x58026300
 8003408:	58026000 	.word	0x58026000
 800340c:	fffff0e0 	.word	0xfffff0e0

08003410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0000 	.word	0x05fa0000

08003458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	; (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d4:	f7ff ff40 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f7ff ff90 	bl	8003504 <NVIC_EncodePriority>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff5f 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff33 	bl	8003474 <__NVIC_EnableIRQ>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffa4 	bl	800356c <SysTick_Config>
 8003624:	4603      	mov	r3, r0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7fe fe6e 	bl	8002318 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e316      	b.n	8003c76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a66      	ldr	r2, [pc, #408]	; (80037e8 <HAL_DMA_Init+0x1b8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_DMA_Init+0x1bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_DMA_Init+0x1c0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a62      	ldr	r2, [pc, #392]	; (80037f4 <HAL_DMA_Init+0x1c4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <HAL_DMA_Init+0x1c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5f      	ldr	r2, [pc, #380]	; (80037fc <HAL_DMA_Init+0x1cc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_DMA_Init+0x1d0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5c      	ldr	r2, [pc, #368]	; (8003804 <HAL_DMA_Init+0x1d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5a      	ldr	r2, [pc, #360]	; (8003808 <HAL_DMA_Init+0x1d8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <HAL_DMA_Init+0x1dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_DMA_Init+0x1e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_DMA_Init+0x1e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_DMA_Init+0x1e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a53      	ldr	r2, [pc, #332]	; (800381c <HAL_DMA_Init+0x1ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_DMA_Init+0x1f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Init+0xb8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_DMA_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Init+0xbc>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_DMA_Init+0xbe>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 813b 	beq.w	800396a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a37      	ldr	r2, [pc, #220]	; (80037e8 <HAL_DMA_Init+0x1b8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d04a      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_DMA_Init+0x1bc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d045      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <HAL_DMA_Init+0x1c0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d040      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a33      	ldr	r2, [pc, #204]	; (80037f4 <HAL_DMA_Init+0x1c4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d03b      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_DMA_Init+0x1c8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d036      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a30      	ldr	r2, [pc, #192]	; (80037fc <HAL_DMA_Init+0x1cc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d031      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_DMA_Init+0x1d0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d02c      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <HAL_DMA_Init+0x1d4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d027      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <HAL_DMA_Init+0x1d8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d022      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_DMA_Init+0x1dc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d01d      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_DMA_Init+0x1e0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_DMA_Init+0x1e4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_DMA_Init+0x1e8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_DMA_Init+0x1ec>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_DMA_Init+0x1f0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_Init+0x174>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_DMA_Init+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <HAL_DMA_Init+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <HAL_DMA_Init+0x196>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c6:	e02f      	b.n	8003828 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c8:	f7fe fda6 	bl	8002318 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d928      	bls.n	8003828 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e246      	b.n	8003c76 <HAL_DMA_Init+0x646>
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1c8      	bne.n	80037c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4b83      	ldr	r3, [pc, #524]	; (8003a50 <HAL_DMA_Init+0x420>)
 8003842:	4013      	ands	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800384e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d107      	bne.n	800388c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4313      	orrs	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800388c:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <HAL_DMA_Init+0x424>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <HAL_DMA_Init+0x428>)
 8003892:	4013      	ands	r3, r2
 8003894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003898:	d328      	bcc.n	80038ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b28      	cmp	r3, #40	; 0x28
 80038a0:	d903      	bls.n	80038aa <HAL_DMA_Init+0x27a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b2e      	cmp	r3, #46	; 0x2e
 80038a8:	d917      	bls.n	80038da <HAL_DMA_Init+0x2aa>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b3e      	cmp	r3, #62	; 0x3e
 80038b0:	d903      	bls.n	80038ba <HAL_DMA_Init+0x28a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b42      	cmp	r3, #66	; 0x42
 80038b8:	d90f      	bls.n	80038da <HAL_DMA_Init+0x2aa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b46      	cmp	r3, #70	; 0x46
 80038c0:	d903      	bls.n	80038ca <HAL_DMA_Init+0x29a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b48      	cmp	r3, #72	; 0x48
 80038c8:	d907      	bls.n	80038da <HAL_DMA_Init+0x2aa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b4e      	cmp	r3, #78	; 0x4e
 80038d0:	d905      	bls.n	80038de <HAL_DMA_Init+0x2ae>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b52      	cmp	r3, #82	; 0x52
 80038d8:	d801      	bhi.n	80038de <HAL_DMA_Init+0x2ae>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_DMA_Init+0x2b0>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0307 	bic.w	r3, r3, #7
 8003902:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b04      	cmp	r3, #4
 8003914:	d117      	bne.n	8003946 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f002 f813 	bl	8005954 <DMA_CheckFifoParam>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2240      	movs	r2, #64	; 0x40
 8003938:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e197      	b.n	8003c76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 ff4e 	bl	80057f0 <DMA_CalcBaseAndBitshift>
 8003954:	4603      	mov	r3, r0
 8003956:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	223f      	movs	r2, #63	; 0x3f
 8003962:	409a      	lsls	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	e0cd      	b.n	8003b06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_DMA_Init+0x42c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a39      	ldr	r2, [pc, #228]	; (8003a60 <HAL_DMA_Init+0x430>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a38      	ldr	r2, [pc, #224]	; (8003a64 <HAL_DMA_Init+0x434>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <HAL_DMA_Init+0x438>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <HAL_DMA_Init+0x43c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a33      	ldr	r2, [pc, #204]	; (8003a70 <HAL_DMA_Init+0x440>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a32      	ldr	r2, [pc, #200]	; (8003a74 <HAL_DMA_Init+0x444>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_Init+0x38a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <HAL_DMA_Init+0x448>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Init+0x38e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_DMA_Init+0x390>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <HAL_DMA_Init+0x42c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d021      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_DMA_Init+0x430>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01c      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <HAL_DMA_Init+0x434>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d017      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_DMA_Init+0x438>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d012      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_DMA_Init+0x43c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00d      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_DMA_Init+0x440>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d008      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_DMA_Init+0x444>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA_Init+0x3e4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_DMA_Init+0x448>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_DMA_Init+0x44c>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d020      	beq.n	8003a80 <HAL_DMA_Init+0x450>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d102      	bne.n	8003a4c <HAL_DMA_Init+0x41c>
 8003a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a4a:	e01a      	b.n	8003a82 <HAL_DMA_Init+0x452>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e018      	b.n	8003a82 <HAL_DMA_Init+0x452>
 8003a50:	fe10803f 	.word	0xfe10803f
 8003a54:	5c001000 	.word	0x5c001000
 8003a58:	ffff0000 	.word	0xffff0000
 8003a5c:	58025408 	.word	0x58025408
 8003a60:	5802541c 	.word	0x5802541c
 8003a64:	58025430 	.word	0x58025430
 8003a68:	58025444 	.word	0x58025444
 8003a6c:	58025458 	.word	0x58025458
 8003a70:	5802546c 	.word	0x5802546c
 8003a74:	58025480 	.word	0x58025480
 8003a78:	58025494 	.word	0x58025494
 8003a7c:	fffe000f 	.word	0xfffe000f
 8003a80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003aa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003aa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ab0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_DMA_Init+0x650>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a6e      	ldr	r2, [pc, #440]	; (8003c84 <HAL_DMA_Init+0x654>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 fe89 	bl	80057f0 <DMA_CalcBaseAndBitshift>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e008      	b.n	8003b06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0b7      	b.n	8003c76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5f      	ldr	r2, [pc, #380]	; (8003c88 <HAL_DMA_Init+0x658>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d072      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5d      	ldr	r2, [pc, #372]	; (8003c8c <HAL_DMA_Init+0x65c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d06d      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_DMA_Init+0x660>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d068      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5a      	ldr	r2, [pc, #360]	; (8003c94 <HAL_DMA_Init+0x664>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d063      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a59      	ldr	r2, [pc, #356]	; (8003c98 <HAL_DMA_Init+0x668>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d05e      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a57      	ldr	r2, [pc, #348]	; (8003c9c <HAL_DMA_Init+0x66c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d059      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a56      	ldr	r2, [pc, #344]	; (8003ca0 <HAL_DMA_Init+0x670>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d054      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a54      	ldr	r2, [pc, #336]	; (8003ca4 <HAL_DMA_Init+0x674>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04f      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a53      	ldr	r2, [pc, #332]	; (8003ca8 <HAL_DMA_Init+0x678>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a51      	ldr	r2, [pc, #324]	; (8003cac <HAL_DMA_Init+0x67c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_DMA_Init+0x680>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <HAL_DMA_Init+0x684>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4d      	ldr	r2, [pc, #308]	; (8003cb8 <HAL_DMA_Init+0x688>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <HAL_DMA_Init+0x68c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_DMA_Init+0x690>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_DMA_Init+0x694>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_DMA_Init+0x698>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <HAL_DMA_Init+0x69c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_DMA_Init+0x6a0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_DMA_Init+0x6a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_DMA_Init+0x6a8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <HAL_DMA_Init+0x6ac>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <HAL_DMA_Init+0x6b0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <HAL_DMA_Init+0x6b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_DMA_Init+0x5ca>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_Init+0x5cc>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d032      	beq.n	8003c66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f001 ff23 	bl	8005a4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d102      	bne.n	8003c14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_DMA_Init+0x624>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d80c      	bhi.n	8003c54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 ffa0 	bl	8005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e008      	b.n	8003c66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	a7fdabf8 	.word	0xa7fdabf8
 8003c84:	cccccccd 	.word	0xcccccccd
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028
 8003c90:	40020040 	.word	0x40020040
 8003c94:	40020058 	.word	0x40020058
 8003c98:	40020070 	.word	0x40020070
 8003c9c:	40020088 	.word	0x40020088
 8003ca0:	400200a0 	.word	0x400200a0
 8003ca4:	400200b8 	.word	0x400200b8
 8003ca8:	40020410 	.word	0x40020410
 8003cac:	40020428 	.word	0x40020428
 8003cb0:	40020440 	.word	0x40020440
 8003cb4:	40020458 	.word	0x40020458
 8003cb8:	40020470 	.word	0x40020470
 8003cbc:	40020488 	.word	0x40020488
 8003cc0:	400204a0 	.word	0x400204a0
 8003cc4:	400204b8 	.word	0x400204b8
 8003cc8:	58025408 	.word	0x58025408
 8003ccc:	5802541c 	.word	0x5802541c
 8003cd0:	58025430 	.word	0x58025430
 8003cd4:	58025444 	.word	0x58025444
 8003cd8:	58025458 	.word	0x58025458
 8003cdc:	5802546c 	.word	0x5802546c
 8003ce0:	58025480 	.word	0x58025480
 8003ce4:	58025494 	.word	0x58025494

08003ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e226      	b.n	8004152 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA_Start_IT+0x2a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e21f      	b.n	8004152 <HAL_DMA_Start_IT+0x46a>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	f040 820a 	bne.w	800413c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a68      	ldr	r2, [pc, #416]	; (8003edc <HAL_DMA_Start_IT+0x1f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04a      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a66      	ldr	r2, [pc, #408]	; (8003ee0 <HAL_DMA_Start_IT+0x1f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d045      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_DMA_Start_IT+0x1fc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d040      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a63      	ldr	r2, [pc, #396]	; (8003ee8 <HAL_DMA_Start_IT+0x200>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d03b      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a62      	ldr	r2, [pc, #392]	; (8003eec <HAL_DMA_Start_IT+0x204>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d036      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_DMA_Start_IT+0x208>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	; (8003ef4 <HAL_DMA_Start_IT+0x20c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	; (8003ef8 <HAL_DMA_Start_IT+0x210>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d027      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_DMA_Start_IT+0x214>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	; (8003f00 <HAL_DMA_Start_IT+0x218>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	; (8003f04 <HAL_DMA_Start_IT+0x21c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_DMA_Start_IT+0x220>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	; (8003f0c <HAL_DMA_Start_IT+0x224>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	; (8003f10 <HAL_DMA_Start_IT+0x228>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	; (8003f14 <HAL_DMA_Start_IT+0x22c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_DMA_Start_IT+0x230>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <HAL_DMA_Start_IT+0x100>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <HAL_DMA_Start_IT+0x110>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f001 fb4a 	bl	8005498 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a34      	ldr	r2, [pc, #208]	; (8003edc <HAL_DMA_Start_IT+0x1f4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <HAL_DMA_Start_IT+0x1f8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_DMA_Start_IT+0x1fc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_DMA_Start_IT+0x200>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <HAL_DMA_Start_IT+0x204>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_DMA_Start_IT+0x208>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_DMA_Start_IT+0x20c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_DMA_Start_IT+0x210>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_DMA_Start_IT+0x214>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_DMA_Start_IT+0x218>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_DMA_Start_IT+0x21c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_DMA_Start_IT+0x220>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_DMA_Start_IT+0x224>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_DMA_Start_IT+0x228>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_DMA_Start_IT+0x22c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_DMA_Start_IT+0x230>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Start_IT+0x1c0>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_Start_IT+0x1c2>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 021e 	bic.w	r2, r3, #30
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0216 	orr.w	r2, r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d03e      	beq.n	8003f48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e035      	b.n	8003f48 <HAL_DMA_Start_IT+0x260>
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020e 	bic.w	r2, r3, #14
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 020a 	orr.w	r2, r2, #10
 8003f2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0204 	orr.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a83      	ldr	r2, [pc, #524]	; (800415c <HAL_DMA_Start_IT+0x474>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d072      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a82      	ldr	r2, [pc, #520]	; (8004160 <HAL_DMA_Start_IT+0x478>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d06d      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_DMA_Start_IT+0x47c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d068      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7f      	ldr	r2, [pc, #508]	; (8004168 <HAL_DMA_Start_IT+0x480>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d063      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7d      	ldr	r2, [pc, #500]	; (800416c <HAL_DMA_Start_IT+0x484>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d05e      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_DMA_Start_IT+0x488>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d059      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_DMA_Start_IT+0x48c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d054      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a79      	ldr	r2, [pc, #484]	; (8004178 <HAL_DMA_Start_IT+0x490>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04f      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_DMA_Start_IT+0x494>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a76      	ldr	r2, [pc, #472]	; (8004180 <HAL_DMA_Start_IT+0x498>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_DMA_Start_IT+0x49c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a73      	ldr	r2, [pc, #460]	; (8004188 <HAL_DMA_Start_IT+0x4a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_DMA_Start_IT+0x4a4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	; (8004190 <HAL_DMA_Start_IT+0x4a8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_DMA_Start_IT+0x4ac>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6d      	ldr	r2, [pc, #436]	; (8004198 <HAL_DMA_Start_IT+0x4b0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6b      	ldr	r2, [pc, #428]	; (800419c <HAL_DMA_Start_IT+0x4b4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6a      	ldr	r2, [pc, #424]	; (80041a0 <HAL_DMA_Start_IT+0x4b8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <HAL_DMA_Start_IT+0x4bc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <HAL_DMA_Start_IT+0x4c0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_DMA_Start_IT+0x4c4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a64      	ldr	r2, [pc, #400]	; (80041b0 <HAL_DMA_Start_IT+0x4c8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a62      	ldr	r2, [pc, #392]	; (80041b4 <HAL_DMA_Start_IT+0x4cc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a61      	ldr	r2, [pc, #388]	; (80041b8 <HAL_DMA_Start_IT+0x4d0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x354>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_DMA_Start_IT+0x356>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a37      	ldr	r2, [pc, #220]	; (800415c <HAL_DMA_Start_IT+0x474>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a36      	ldr	r2, [pc, #216]	; (8004160 <HAL_DMA_Start_IT+0x478>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a34      	ldr	r2, [pc, #208]	; (8004164 <HAL_DMA_Start_IT+0x47c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a33      	ldr	r2, [pc, #204]	; (8004168 <HAL_DMA_Start_IT+0x480>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a31      	ldr	r2, [pc, #196]	; (800416c <HAL_DMA_Start_IT+0x484>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a30      	ldr	r2, [pc, #192]	; (8004170 <HAL_DMA_Start_IT+0x488>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2e      	ldr	r2, [pc, #184]	; (8004174 <HAL_DMA_Start_IT+0x48c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_DMA_Start_IT+0x490>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2b      	ldr	r2, [pc, #172]	; (800417c <HAL_DMA_Start_IT+0x494>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <HAL_DMA_Start_IT+0x498>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_DMA_Start_IT+0x49c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_DMA_Start_IT+0x4a0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_DMA_Start_IT+0x4a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_DMA_Start_IT+0x4a8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_DMA_Start_IT+0x4ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_DMA_Start_IT+0x4b0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <HAL_DMA_Start_IT+0x442>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e012      	b.n	8004150 <HAL_DMA_Start_IT+0x468>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e009      	b.n	8004150 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40020010 	.word	0x40020010
 8004160:	40020028 	.word	0x40020028
 8004164:	40020040 	.word	0x40020040
 8004168:	40020058 	.word	0x40020058
 800416c:	40020070 	.word	0x40020070
 8004170:	40020088 	.word	0x40020088
 8004174:	400200a0 	.word	0x400200a0
 8004178:	400200b8 	.word	0x400200b8
 800417c:	40020410 	.word	0x40020410
 8004180:	40020428 	.word	0x40020428
 8004184:	40020440 	.word	0x40020440
 8004188:	40020458 	.word	0x40020458
 800418c:	40020470 	.word	0x40020470
 8004190:	40020488 	.word	0x40020488
 8004194:	400204a0 	.word	0x400204a0
 8004198:	400204b8 	.word	0x400204b8
 800419c:	58025408 	.word	0x58025408
 80041a0:	5802541c 	.word	0x5802541c
 80041a4:	58025430 	.word	0x58025430
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025458 	.word	0x58025458
 80041b0:	5802546c 	.word	0x5802546c
 80041b4:	58025480 	.word	0x58025480
 80041b8:	58025494 	.word	0x58025494

080041bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e205      	b.n	80045da <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d004      	beq.n	80041e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e1fa      	b.n	80045da <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a8c      	ldr	r2, [pc, #560]	; (800441c <HAL_DMA_Abort_IT+0x260>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a8b      	ldr	r2, [pc, #556]	; (8004420 <HAL_DMA_Abort_IT+0x264>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a89      	ldr	r2, [pc, #548]	; (8004424 <HAL_DMA_Abort_IT+0x268>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a88      	ldr	r2, [pc, #544]	; (8004428 <HAL_DMA_Abort_IT+0x26c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a86      	ldr	r2, [pc, #536]	; (800442c <HAL_DMA_Abort_IT+0x270>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a85      	ldr	r2, [pc, #532]	; (8004430 <HAL_DMA_Abort_IT+0x274>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_DMA_Abort_IT+0x278>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a82      	ldr	r2, [pc, #520]	; (8004438 <HAL_DMA_Abort_IT+0x27c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_DMA_Abort_IT+0x280>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7f      	ldr	r2, [pc, #508]	; (8004440 <HAL_DMA_Abort_IT+0x284>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7d      	ldr	r2, [pc, #500]	; (8004444 <HAL_DMA_Abort_IT+0x288>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7c      	ldr	r2, [pc, #496]	; (8004448 <HAL_DMA_Abort_IT+0x28c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_DMA_Abort_IT+0x290>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a79      	ldr	r2, [pc, #484]	; (8004450 <HAL_DMA_Abort_IT+0x294>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_DMA_Abort_IT+0x298>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_Abort_IT+0xc8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a76      	ldr	r2, [pc, #472]	; (8004458 <HAL_DMA_Abort_IT+0x29c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_DMA_Abort_IT+0xcc>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_DMA_Abort_IT+0xce>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d065      	beq.n	800435a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a60      	ldr	r2, [pc, #384]	; (800441c <HAL_DMA_Abort_IT+0x260>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a5e      	ldr	r2, [pc, #376]	; (8004420 <HAL_DMA_Abort_IT+0x264>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5d      	ldr	r2, [pc, #372]	; (8004424 <HAL_DMA_Abort_IT+0x268>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_DMA_Abort_IT+0x26c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5a      	ldr	r2, [pc, #360]	; (800442c <HAL_DMA_Abort_IT+0x270>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a58      	ldr	r2, [pc, #352]	; (8004430 <HAL_DMA_Abort_IT+0x274>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a57      	ldr	r2, [pc, #348]	; (8004434 <HAL_DMA_Abort_IT+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a55      	ldr	r2, [pc, #340]	; (8004438 <HAL_DMA_Abort_IT+0x27c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_DMA_Abort_IT+0x280>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_DMA_Abort_IT+0x284>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_DMA_Abort_IT+0x288>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4f      	ldr	r2, [pc, #316]	; (8004448 <HAL_DMA_Abort_IT+0x28c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4e      	ldr	r2, [pc, #312]	; (800444c <HAL_DMA_Abort_IT+0x290>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4c      	ldr	r2, [pc, #304]	; (8004450 <HAL_DMA_Abort_IT+0x294>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4b      	ldr	r2, [pc, #300]	; (8004454 <HAL_DMA_Abort_IT+0x298>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Abort_IT+0x17a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a49      	ldr	r2, [pc, #292]	; (8004458 <HAL_DMA_Abort_IT+0x29c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_Abort_IT+0x18c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e147      	b.n	80045d8 <HAL_DMA_Abort_IT+0x41c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e13e      	b.n	80045d8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 020e 	bic.w	r2, r2, #14
 8004368:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2b      	ldr	r2, [pc, #172]	; (800441c <HAL_DMA_Abort_IT+0x260>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04a      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_DMA_Abort_IT+0x264>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d045      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a28      	ldr	r2, [pc, #160]	; (8004424 <HAL_DMA_Abort_IT+0x268>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d040      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_DMA_Abort_IT+0x26c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d03b      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a25      	ldr	r2, [pc, #148]	; (800442c <HAL_DMA_Abort_IT+0x270>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d036      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <HAL_DMA_Abort_IT+0x274>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d031      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a22      	ldr	r2, [pc, #136]	; (8004434 <HAL_DMA_Abort_IT+0x278>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d02c      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <HAL_DMA_Abort_IT+0x27c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d027      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <HAL_DMA_Abort_IT+0x280>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <HAL_DMA_Abort_IT+0x284>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_DMA_Abort_IT+0x288>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_DMA_Abort_IT+0x28c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_DMA_Abort_IT+0x290>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a17      	ldr	r2, [pc, #92]	; (8004450 <HAL_DMA_Abort_IT+0x294>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a16      	ldr	r2, [pc, #88]	; (8004454 <HAL_DMA_Abort_IT+0x298>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_DMA_Abort_IT+0x24e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <HAL_DMA_Abort_IT+0x29c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d128      	bne.n	800445c <HAL_DMA_Abort_IT+0x2a0>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e027      	b.n	800446c <HAL_DMA_Abort_IT+0x2b0>
 800441c:	40020010 	.word	0x40020010
 8004420:	40020028 	.word	0x40020028
 8004424:	40020040 	.word	0x40020040
 8004428:	40020058 	.word	0x40020058
 800442c:	40020070 	.word	0x40020070
 8004430:	40020088 	.word	0x40020088
 8004434:	400200a0 	.word	0x400200a0
 8004438:	400200b8 	.word	0x400200b8
 800443c:	40020410 	.word	0x40020410
 8004440:	40020428 	.word	0x40020428
 8004444:	40020440 	.word	0x40020440
 8004448:	40020458 	.word	0x40020458
 800444c:	40020470 	.word	0x40020470
 8004450:	40020488 	.word	0x40020488
 8004454:	400204a0 	.word	0x400204a0
 8004458:	400204b8 	.word	0x400204b8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5c      	ldr	r2, [pc, #368]	; (80045e4 <HAL_DMA_Abort_IT+0x428>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d072      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5b      	ldr	r2, [pc, #364]	; (80045e8 <HAL_DMA_Abort_IT+0x42c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d06d      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a59      	ldr	r2, [pc, #356]	; (80045ec <HAL_DMA_Abort_IT+0x430>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d068      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_DMA_Abort_IT+0x434>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d063      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_DMA_Abort_IT+0x438>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d05e      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a55      	ldr	r2, [pc, #340]	; (80045f8 <HAL_DMA_Abort_IT+0x43c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d059      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a53      	ldr	r2, [pc, #332]	; (80045fc <HAL_DMA_Abort_IT+0x440>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d054      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_DMA_Abort_IT+0x444>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d04f      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a50      	ldr	r2, [pc, #320]	; (8004604 <HAL_DMA_Abort_IT+0x448>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d04a      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4f      	ldr	r2, [pc, #316]	; (8004608 <HAL_DMA_Abort_IT+0x44c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d045      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a4d      	ldr	r2, [pc, #308]	; (800460c <HAL_DMA_Abort_IT+0x450>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d040      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a4c      	ldr	r2, [pc, #304]	; (8004610 <HAL_DMA_Abort_IT+0x454>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d03b      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_DMA_Abort_IT+0x458>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d036      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a49      	ldr	r2, [pc, #292]	; (8004618 <HAL_DMA_Abort_IT+0x45c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d031      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <HAL_DMA_Abort_IT+0x460>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02c      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a46      	ldr	r2, [pc, #280]	; (8004620 <HAL_DMA_Abort_IT+0x464>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d027      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a44      	ldr	r2, [pc, #272]	; (8004624 <HAL_DMA_Abort_IT+0x468>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d022      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a43      	ldr	r2, [pc, #268]	; (8004628 <HAL_DMA_Abort_IT+0x46c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d01d      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a41      	ldr	r2, [pc, #260]	; (800462c <HAL_DMA_Abort_IT+0x470>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a40      	ldr	r2, [pc, #256]	; (8004630 <HAL_DMA_Abort_IT+0x474>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3e      	ldr	r2, [pc, #248]	; (8004634 <HAL_DMA_Abort_IT+0x478>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <HAL_DMA_Abort_IT+0x47c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3b      	ldr	r2, [pc, #236]	; (800463c <HAL_DMA_Abort_IT+0x480>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_DMA_Abort_IT+0x3a0>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3a      	ldr	r2, [pc, #232]	; (8004640 <HAL_DMA_Abort_IT+0x484>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Abort_IT+0x3a4>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_DMA_Abort_IT+0x3a6>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004574:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004594:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40020010 	.word	0x40020010
 80045e8:	40020028 	.word	0x40020028
 80045ec:	40020040 	.word	0x40020040
 80045f0:	40020058 	.word	0x40020058
 80045f4:	40020070 	.word	0x40020070
 80045f8:	40020088 	.word	0x40020088
 80045fc:	400200a0 	.word	0x400200a0
 8004600:	400200b8 	.word	0x400200b8
 8004604:	40020410 	.word	0x40020410
 8004608:	40020428 	.word	0x40020428
 800460c:	40020440 	.word	0x40020440
 8004610:	40020458 	.word	0x40020458
 8004614:	40020470 	.word	0x40020470
 8004618:	40020488 	.word	0x40020488
 800461c:	400204a0 	.word	0x400204a0
 8004620:	400204b8 	.word	0x400204b8
 8004624:	58025408 	.word	0x58025408
 8004628:	5802541c 	.word	0x5802541c
 800462c:	58025430 	.word	0x58025430
 8004630:	58025444 	.word	0x58025444
 8004634:	58025458 	.word	0x58025458
 8004638:	5802546c 	.word	0x5802546c
 800463c:	58025480 	.word	0x58025480
 8004640:	58025494 	.word	0x58025494

08004644 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004650:	4b67      	ldr	r3, [pc, #412]	; (80047f0 <HAL_DMA_IRQHandler+0x1ac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a67      	ldr	r2, [pc, #412]	; (80047f4 <HAL_DMA_IRQHandler+0x1b0>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a9b      	lsrs	r3, r3, #10
 800465c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5f      	ldr	r2, [pc, #380]	; (80047f8 <HAL_DMA_IRQHandler+0x1b4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5d      	ldr	r2, [pc, #372]	; (80047fc <HAL_DMA_IRQHandler+0x1b8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5c      	ldr	r2, [pc, #368]	; (8004800 <HAL_DMA_IRQHandler+0x1bc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5a      	ldr	r2, [pc, #360]	; (8004804 <HAL_DMA_IRQHandler+0x1c0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a59      	ldr	r2, [pc, #356]	; (8004808 <HAL_DMA_IRQHandler+0x1c4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a57      	ldr	r2, [pc, #348]	; (800480c <HAL_DMA_IRQHandler+0x1c8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_DMA_IRQHandler+0x1cc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a54      	ldr	r2, [pc, #336]	; (8004814 <HAL_DMA_IRQHandler+0x1d0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a53      	ldr	r2, [pc, #332]	; (8004818 <HAL_DMA_IRQHandler+0x1d4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a51      	ldr	r2, [pc, #324]	; (800481c <HAL_DMA_IRQHandler+0x1d8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a50      	ldr	r2, [pc, #320]	; (8004820 <HAL_DMA_IRQHandler+0x1dc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a4e      	ldr	r2, [pc, #312]	; (8004824 <HAL_DMA_IRQHandler+0x1e0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4d      	ldr	r2, [pc, #308]	; (8004828 <HAL_DMA_IRQHandler+0x1e4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4b      	ldr	r2, [pc, #300]	; (800482c <HAL_DMA_IRQHandler+0x1e8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <HAL_DMA_IRQHandler+0x1ec>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0xd2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a48      	ldr	r2, [pc, #288]	; (8004834 <HAL_DMA_IRQHandler+0x1f0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_DMA_IRQHandler+0xd6>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_DMA_IRQHandler+0xd8>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 842b 	beq.w	8004f78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2208      	movs	r2, #8
 800472c:	409a      	lsls	r2, r3
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a2 	beq.w	800487c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2e      	ldr	r2, [pc, #184]	; (80047f8 <HAL_DMA_IRQHandler+0x1b4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2d      	ldr	r2, [pc, #180]	; (80047fc <HAL_DMA_IRQHandler+0x1b8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <HAL_DMA_IRQHandler+0x1bc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <HAL_DMA_IRQHandler+0x1c0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a28      	ldr	r2, [pc, #160]	; (8004808 <HAL_DMA_IRQHandler+0x1c4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a27      	ldr	r2, [pc, #156]	; (800480c <HAL_DMA_IRQHandler+0x1c8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a25      	ldr	r2, [pc, #148]	; (8004810 <HAL_DMA_IRQHandler+0x1cc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_DMA_IRQHandler+0x1d0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_DMA_IRQHandler+0x1d4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a21      	ldr	r2, [pc, #132]	; (800481c <HAL_DMA_IRQHandler+0x1d8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_DMA_IRQHandler+0x1dc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_DMA_IRQHandler+0x1e0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_DMA_IRQHandler+0x1e4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_DMA_IRQHandler+0x1e8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_DMA_IRQHandler+0x1ec>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x194>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_DMA_IRQHandler+0x1f0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d12f      	bne.n	8004838 <HAL_DMA_IRQHandler+0x1f4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bf14      	ite	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	2300      	moveq	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e02e      	b.n	800484c <HAL_DMA_IRQHandler+0x208>
 80047ee:	bf00      	nop
 80047f0:	24000020 	.word	0x24000020
 80047f4:	1b4e81b5 	.word	0x1b4e81b5
 80047f8:	40020010 	.word	0x40020010
 80047fc:	40020028 	.word	0x40020028
 8004800:	40020040 	.word	0x40020040
 8004804:	40020058 	.word	0x40020058
 8004808:	40020070 	.word	0x40020070
 800480c:	40020088 	.word	0x40020088
 8004810:	400200a0 	.word	0x400200a0
 8004814:	400200b8 	.word	0x400200b8
 8004818:	40020410 	.word	0x40020410
 800481c:	40020428 	.word	0x40020428
 8004820:	40020440 	.word	0x40020440
 8004824:	40020458 	.word	0x40020458
 8004828:	40020470 	.word	0x40020470
 800482c:	40020488 	.word	0x40020488
 8004830:	400204a0 	.word	0x400204a0
 8004834:	400204b8 	.word	0x400204b8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf14      	ite	ne
 8004846:	2301      	movne	r3, #1
 8004848:	2300      	moveq	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2208      	movs	r2, #8
 800486a:	409a      	lsls	r2, r3
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d06e      	beq.n	8004970 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <HAL_DMA_IRQHandler+0x3f8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a67      	ldr	r2, [pc, #412]	; (8004a40 <HAL_DMA_IRQHandler+0x3fc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a66      	ldr	r2, [pc, #408]	; (8004a44 <HAL_DMA_IRQHandler+0x400>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a64      	ldr	r2, [pc, #400]	; (8004a48 <HAL_DMA_IRQHandler+0x404>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a63      	ldr	r2, [pc, #396]	; (8004a4c <HAL_DMA_IRQHandler+0x408>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <HAL_DMA_IRQHandler+0x40c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a60      	ldr	r2, [pc, #384]	; (8004a54 <HAL_DMA_IRQHandler+0x410>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5e      	ldr	r2, [pc, #376]	; (8004a58 <HAL_DMA_IRQHandler+0x414>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5d      	ldr	r2, [pc, #372]	; (8004a5c <HAL_DMA_IRQHandler+0x418>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_DMA_IRQHandler+0x41c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a5a      	ldr	r2, [pc, #360]	; (8004a64 <HAL_DMA_IRQHandler+0x420>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a58      	ldr	r2, [pc, #352]	; (8004a68 <HAL_DMA_IRQHandler+0x424>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a57      	ldr	r2, [pc, #348]	; (8004a6c <HAL_DMA_IRQHandler+0x428>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a55      	ldr	r2, [pc, #340]	; (8004a70 <HAL_DMA_IRQHandler+0x42c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_DMA_IRQHandler+0x430>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2ee>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_DMA_IRQHandler+0x434>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10a      	bne.n	8004948 <HAL_DMA_IRQHandler+0x304>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e003      	b.n	8004950 <HAL_DMA_IRQHandler+0x30c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2201      	movs	r2, #1
 800495e:	409a      	lsls	r2, r3
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f043 0202 	orr.w	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2204      	movs	r2, #4
 800497a:	409a      	lsls	r2, r3
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 808f 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <HAL_DMA_IRQHandler+0x3f8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <HAL_DMA_IRQHandler+0x3fc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <HAL_DMA_IRQHandler+0x400>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a27      	ldr	r2, [pc, #156]	; (8004a48 <HAL_DMA_IRQHandler+0x404>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <HAL_DMA_IRQHandler+0x408>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_DMA_IRQHandler+0x40c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a23      	ldr	r2, [pc, #140]	; (8004a54 <HAL_DMA_IRQHandler+0x410>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <HAL_DMA_IRQHandler+0x414>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <HAL_DMA_IRQHandler+0x418>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <HAL_DMA_IRQHandler+0x41c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_DMA_IRQHandler+0x420>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1b      	ldr	r2, [pc, #108]	; (8004a68 <HAL_DMA_IRQHandler+0x424>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <HAL_DMA_IRQHandler+0x428>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <HAL_DMA_IRQHandler+0x42c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_DMA_IRQHandler+0x430>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x3e2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <HAL_DMA_IRQHandler+0x434>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d12a      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x438>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e023      	b.n	8004a84 <HAL_DMA_IRQHandler+0x440>
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2204      	movs	r2, #4
 8004a92:	409a      	lsls	r2, r3
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	f043 0204 	orr.w	r2, r3, #4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2210      	movs	r2, #16
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a6 	beq.w	8004c06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a85      	ldr	r2, [pc, #532]	; (8004cd4 <HAL_DMA_IRQHandler+0x690>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d04a      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a83      	ldr	r2, [pc, #524]	; (8004cd8 <HAL_DMA_IRQHandler+0x694>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d045      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a82      	ldr	r2, [pc, #520]	; (8004cdc <HAL_DMA_IRQHandler+0x698>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d040      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a80      	ldr	r2, [pc, #512]	; (8004ce0 <HAL_DMA_IRQHandler+0x69c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d03b      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7f      	ldr	r2, [pc, #508]	; (8004ce4 <HAL_DMA_IRQHandler+0x6a0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d036      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7d      	ldr	r2, [pc, #500]	; (8004ce8 <HAL_DMA_IRQHandler+0x6a4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7c      	ldr	r2, [pc, #496]	; (8004cec <HAL_DMA_IRQHandler+0x6a8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d02c      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a7a      	ldr	r2, [pc, #488]	; (8004cf0 <HAL_DMA_IRQHandler+0x6ac>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d027      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a79      	ldr	r2, [pc, #484]	; (8004cf4 <HAL_DMA_IRQHandler+0x6b0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d022      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a77      	ldr	r2, [pc, #476]	; (8004cf8 <HAL_DMA_IRQHandler+0x6b4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a76      	ldr	r2, [pc, #472]	; (8004cfc <HAL_DMA_IRQHandler+0x6b8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a74      	ldr	r2, [pc, #464]	; (8004d00 <HAL_DMA_IRQHandler+0x6bc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a73      	ldr	r2, [pc, #460]	; (8004d04 <HAL_DMA_IRQHandler+0x6c0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a71      	ldr	r2, [pc, #452]	; (8004d08 <HAL_DMA_IRQHandler+0x6c4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a70      	ldr	r2, [pc, #448]	; (8004d0c <HAL_DMA_IRQHandler+0x6c8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x516>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_DMA_IRQHandler+0x6cc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10a      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x52c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e009      	b.n	8004b84 <HAL_DMA_IRQHandler+0x540>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d03e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2210      	movs	r2, #16
 8004b92:	409a      	lsls	r2, r3
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d024      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e01f      	b.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	e016      	b.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0208 	bic.w	r2, r2, #8
 8004bf4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2220      	movs	r2, #32
 8004c10:	409a      	lsls	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8110 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <HAL_DMA_IRQHandler+0x690>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_DMA_IRQHandler+0x694>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a29      	ldr	r2, [pc, #164]	; (8004cdc <HAL_DMA_IRQHandler+0x698>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a28      	ldr	r2, [pc, #160]	; (8004ce0 <HAL_DMA_IRQHandler+0x69c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_DMA_IRQHandler+0x6a0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <HAL_DMA_IRQHandler+0x6a4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_DMA_IRQHandler+0x6a8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <HAL_DMA_IRQHandler+0x6ac>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_DMA_IRQHandler+0x6b0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_DMA_IRQHandler+0x6b4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_DMA_IRQHandler+0x6b8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_DMA_IRQHandler+0x6bc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_DMA_IRQHandler+0x6c0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_DMA_IRQHandler+0x6c4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_DMA_IRQHandler+0x6c8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x678>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <HAL_DMA_IRQHandler+0x6cc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d12b      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x6d0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e02a      	b.n	8004d28 <HAL_DMA_IRQHandler+0x6e4>
 8004cd2:	bf00      	nop
 8004cd4:	40020010 	.word	0x40020010
 8004cd8:	40020028 	.word	0x40020028
 8004cdc:	40020040 	.word	0x40020040
 8004ce0:	40020058 	.word	0x40020058
 8004ce4:	40020070 	.word	0x40020070
 8004ce8:	40020088 	.word	0x40020088
 8004cec:	400200a0 	.word	0x400200a0
 8004cf0:	400200b8 	.word	0x400200b8
 8004cf4:	40020410 	.word	0x40020410
 8004cf8:	40020428 	.word	0x40020428
 8004cfc:	40020440 	.word	0x40020440
 8004d00:	40020458 	.word	0x40020458
 8004d04:	40020470 	.word	0x40020470
 8004d08:	40020488 	.word	0x40020488
 8004d0c:	400204a0 	.word	0x400204a0
 8004d10:	400204b8 	.word	0x400204b8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8087 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2220      	movs	r2, #32
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d139      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0216 	bic.w	r2, r2, #22
 8004d58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <HAL_DMA_IRQHandler+0x736>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0208 	bic.w	r2, r2, #8
 8004d88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	223f      	movs	r2, #63	; 0x3f
 8004d94:	409a      	lsls	r2, r3
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 834a 	beq.w	8005448 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
          }
          return;
 8004dbc:	e344      	b.n	8005448 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d108      	bne.n	8004dec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02c      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
 8004dea:	e027      	b.n	8004e3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e01e      	b.n	8004e3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8306 	beq.w	8005452 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8088 	beq.w	8004f64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a7a      	ldr	r2, [pc, #488]	; (800504c <HAL_DMA_IRQHandler+0xa08>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a79      	ldr	r2, [pc, #484]	; (8005050 <HAL_DMA_IRQHandler+0xa0c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_DMA_IRQHandler+0xa10>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a76      	ldr	r2, [pc, #472]	; (8005058 <HAL_DMA_IRQHandler+0xa14>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a74      	ldr	r2, [pc, #464]	; (800505c <HAL_DMA_IRQHandler+0xa18>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a73      	ldr	r2, [pc, #460]	; (8005060 <HAL_DMA_IRQHandler+0xa1c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a71      	ldr	r2, [pc, #452]	; (8005064 <HAL_DMA_IRQHandler+0xa20>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a70      	ldr	r2, [pc, #448]	; (8005068 <HAL_DMA_IRQHandler+0xa24>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_DMA_IRQHandler+0xa28>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6d      	ldr	r2, [pc, #436]	; (8005070 <HAL_DMA_IRQHandler+0xa2c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_DMA_IRQHandler+0xa30>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <HAL_DMA_IRQHandler+0xa34>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	; (800507c <HAL_DMA_IRQHandler+0xa38>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a67      	ldr	r2, [pc, #412]	; (8005080 <HAL_DMA_IRQHandler+0xa3c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a65      	ldr	r2, [pc, #404]	; (8005084 <HAL_DMA_IRQHandler+0xa40>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_IRQHandler+0x8b8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a64      	ldr	r2, [pc, #400]	; (8005088 <HAL_DMA_IRQHandler+0xa44>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <HAL_DMA_IRQHandler+0x8ca>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e007      	b.n	8004f1e <HAL_DMA_IRQHandler+0x8da>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d307      	bcc.n	8004f3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f2      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x8da>
 8004f38:	e000      	b.n	8004f3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f3a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f5a:	e003      	b.n	8004f64 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8272 	beq.w	8005452 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	e26c      	b.n	8005452 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a43      	ldr	r2, [pc, #268]	; (800508c <HAL_DMA_IRQHandler+0xa48>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d022      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a42      	ldr	r2, [pc, #264]	; (8005090 <HAL_DMA_IRQHandler+0xa4c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a40      	ldr	r2, [pc, #256]	; (8005094 <HAL_DMA_IRQHandler+0xa50>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d018      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <HAL_DMA_IRQHandler+0xa54>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3d      	ldr	r2, [pc, #244]	; (800509c <HAL_DMA_IRQHandler+0xa58>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <HAL_DMA_IRQHandler+0xa5c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3a      	ldr	r2, [pc, #232]	; (80050a4 <HAL_DMA_IRQHandler+0xa60>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x984>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a39      	ldr	r2, [pc, #228]	; (80050a8 <HAL_DMA_IRQHandler+0xa64>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x988>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <HAL_DMA_IRQHandler+0x98a>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 823f 	beq.w	8005452 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80cd 	beq.w	800518c <HAL_DMA_IRQHandler+0xb48>
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80c7 	beq.w	800518c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2204      	movs	r2, #4
 8005008:	409a      	lsls	r2, r3
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d049      	beq.n	80050ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8210 	beq.w	800544c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005034:	e20a      	b.n	800544c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8206 	beq.w	800544c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005048:	e200      	b.n	800544c <HAL_DMA_IRQHandler+0xe08>
 800504a:	bf00      	nop
 800504c:	40020010 	.word	0x40020010
 8005050:	40020028 	.word	0x40020028
 8005054:	40020040 	.word	0x40020040
 8005058:	40020058 	.word	0x40020058
 800505c:	40020070 	.word	0x40020070
 8005060:	40020088 	.word	0x40020088
 8005064:	400200a0 	.word	0x400200a0
 8005068:	400200b8 	.word	0x400200b8
 800506c:	40020410 	.word	0x40020410
 8005070:	40020428 	.word	0x40020428
 8005074:	40020440 	.word	0x40020440
 8005078:	40020458 	.word	0x40020458
 800507c:	40020470 	.word	0x40020470
 8005080:	40020488 	.word	0x40020488
 8005084:	400204a0 	.word	0x400204a0
 8005088:	400204b8 	.word	0x400204b8
 800508c:	58025408 	.word	0x58025408
 8005090:	5802541c 	.word	0x5802541c
 8005094:	58025430 	.word	0x58025430
 8005098:	58025444 	.word	0x58025444
 800509c:	58025458 	.word	0x58025458
 80050a0:	5802546c 	.word	0x5802546c
 80050a4:	58025480 	.word	0x58025480
 80050a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d160      	bne.n	8005178 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a8c      	ldr	r2, [pc, #560]	; (80052ec <HAL_DMA_IRQHandler+0xca8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04a      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a8a      	ldr	r2, [pc, #552]	; (80052f0 <HAL_DMA_IRQHandler+0xcac>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d045      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a89      	ldr	r2, [pc, #548]	; (80052f4 <HAL_DMA_IRQHandler+0xcb0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d040      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a87      	ldr	r2, [pc, #540]	; (80052f8 <HAL_DMA_IRQHandler+0xcb4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d03b      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a86      	ldr	r2, [pc, #536]	; (80052fc <HAL_DMA_IRQHandler+0xcb8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d036      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a84      	ldr	r2, [pc, #528]	; (8005300 <HAL_DMA_IRQHandler+0xcbc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d031      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a83      	ldr	r2, [pc, #524]	; (8005304 <HAL_DMA_IRQHandler+0xcc0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d02c      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a81      	ldr	r2, [pc, #516]	; (8005308 <HAL_DMA_IRQHandler+0xcc4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a80      	ldr	r2, [pc, #512]	; (800530c <HAL_DMA_IRQHandler+0xcc8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a7e      	ldr	r2, [pc, #504]	; (8005310 <HAL_DMA_IRQHandler+0xccc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7d      	ldr	r2, [pc, #500]	; (8005314 <HAL_DMA_IRQHandler+0xcd0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7b      	ldr	r2, [pc, #492]	; (8005318 <HAL_DMA_IRQHandler+0xcd4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7a      	ldr	r2, [pc, #488]	; (800531c <HAL_DMA_IRQHandler+0xcd8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a78      	ldr	r2, [pc, #480]	; (8005320 <HAL_DMA_IRQHandler+0xcdc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a77      	ldr	r2, [pc, #476]	; (8005324 <HAL_DMA_IRQHandler+0xce0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_DMA_IRQHandler+0xb12>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a75      	ldr	r2, [pc, #468]	; (8005328 <HAL_DMA_IRQHandler+0xce4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <HAL_DMA_IRQHandler+0xb24>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0208 	bic.w	r2, r2, #8
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <HAL_DMA_IRQHandler+0xb34>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8165 	beq.w	800544c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800518a:	e15f      	b.n	800544c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2202      	movs	r2, #2
 8005196:	409a      	lsls	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80c5 	beq.w	800532c <HAL_DMA_IRQHandler+0xce8>
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80bf 	beq.w	800532c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2202      	movs	r2, #2
 80051b8:	409a      	lsls	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 813a 	beq.w	8005450 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e4:	e134      	b.n	8005450 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8130 	beq.w	8005450 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f8:	e12a      	b.n	8005450 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d168      	bne.n	80052d6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_DMA_IRQHandler+0xca8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d04a      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a37      	ldr	r2, [pc, #220]	; (80052f0 <HAL_DMA_IRQHandler+0xcac>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d045      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	; (80052f4 <HAL_DMA_IRQHandler+0xcb0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d040      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <HAL_DMA_IRQHandler+0xcb4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d03b      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a32      	ldr	r2, [pc, #200]	; (80052fc <HAL_DMA_IRQHandler+0xcb8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d036      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_DMA_IRQHandler+0xcbc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d031      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2f      	ldr	r2, [pc, #188]	; (8005304 <HAL_DMA_IRQHandler+0xcc0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02c      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_DMA_IRQHandler+0xcc4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d027      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2c      	ldr	r2, [pc, #176]	; (800530c <HAL_DMA_IRQHandler+0xcc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_DMA_IRQHandler+0xccc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d01d      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <HAL_DMA_IRQHandler+0xcd0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a28      	ldr	r2, [pc, #160]	; (8005318 <HAL_DMA_IRQHandler+0xcd4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <HAL_DMA_IRQHandler+0xcd8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a25      	ldr	r2, [pc, #148]	; (8005320 <HAL_DMA_IRQHandler+0xcdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a23      	ldr	r2, [pc, #140]	; (8005324 <HAL_DMA_IRQHandler+0xce0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xc60>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_DMA_IRQHandler+0xce4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <HAL_DMA_IRQHandler+0xc72>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0214 	bic.w	r2, r2, #20
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e007      	b.n	80052c6 <HAL_DMA_IRQHandler+0xc82>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 020a 	bic.w	r2, r2, #10
 80052c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80b8 	beq.w	8005450 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052e8:	e0b2      	b.n	8005450 <HAL_DMA_IRQHandler+0xe0c>
 80052ea:	bf00      	nop
 80052ec:	40020010 	.word	0x40020010
 80052f0:	40020028 	.word	0x40020028
 80052f4:	40020040 	.word	0x40020040
 80052f8:	40020058 	.word	0x40020058
 80052fc:	40020070 	.word	0x40020070
 8005300:	40020088 	.word	0x40020088
 8005304:	400200a0 	.word	0x400200a0
 8005308:	400200b8 	.word	0x400200b8
 800530c:	40020410 	.word	0x40020410
 8005310:	40020428 	.word	0x40020428
 8005314:	40020440 	.word	0x40020440
 8005318:	40020458 	.word	0x40020458
 800531c:	40020470 	.word	0x40020470
 8005320:	40020488 	.word	0x40020488
 8005324:	400204a0 	.word	0x400204a0
 8005328:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2208      	movs	r2, #8
 8005336:	409a      	lsls	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8088 	beq.w	8005452 <HAL_DMA_IRQHandler+0xe0e>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8082 	beq.w	8005452 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a41      	ldr	r2, [pc, #260]	; (8005458 <HAL_DMA_IRQHandler+0xe14>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d04a      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3f      	ldr	r2, [pc, #252]	; (800545c <HAL_DMA_IRQHandler+0xe18>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d045      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3e      	ldr	r2, [pc, #248]	; (8005460 <HAL_DMA_IRQHandler+0xe1c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d040      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <HAL_DMA_IRQHandler+0xe20>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d03b      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <HAL_DMA_IRQHandler+0xe24>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d036      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a39      	ldr	r2, [pc, #228]	; (800546c <HAL_DMA_IRQHandler+0xe28>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d031      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a38      	ldr	r2, [pc, #224]	; (8005470 <HAL_DMA_IRQHandler+0xe2c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d02c      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a36      	ldr	r2, [pc, #216]	; (8005474 <HAL_DMA_IRQHandler+0xe30>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d027      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a35      	ldr	r2, [pc, #212]	; (8005478 <HAL_DMA_IRQHandler+0xe34>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d022      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a33      	ldr	r2, [pc, #204]	; (800547c <HAL_DMA_IRQHandler+0xe38>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01d      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a32      	ldr	r2, [pc, #200]	; (8005480 <HAL_DMA_IRQHandler+0xe3c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d018      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a30      	ldr	r2, [pc, #192]	; (8005484 <HAL_DMA_IRQHandler+0xe40>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2f      	ldr	r2, [pc, #188]	; (8005488 <HAL_DMA_IRQHandler+0xe44>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00e      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_DMA_IRQHandler+0xe48>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <HAL_DMA_IRQHandler+0xe4c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d004      	beq.n	80053ee <HAL_DMA_IRQHandler+0xdaa>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <HAL_DMA_IRQHandler+0xe50>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <HAL_DMA_IRQHandler+0xdbc>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 021c 	bic.w	r2, r2, #28
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e007      	b.n	8005410 <HAL_DMA_IRQHandler+0xdcc>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 020e 	bic.w	r2, r2, #14
 800540e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
 8005446:	e004      	b.n	8005452 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005448:	bf00      	nop
 800544a:	e002      	b.n	8005452 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005450:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028
 8005460:	40020040 	.word	0x40020040
 8005464:	40020058 	.word	0x40020058
 8005468:	40020070 	.word	0x40020070
 800546c:	40020088 	.word	0x40020088
 8005470:	400200a0 	.word	0x400200a0
 8005474:	400200b8 	.word	0x400200b8
 8005478:	40020410 	.word	0x40020410
 800547c:	40020428 	.word	0x40020428
 8005480:	40020440 	.word	0x40020440
 8005484:	40020458 	.word	0x40020458
 8005488:	40020470 	.word	0x40020470
 800548c:	40020488 	.word	0x40020488
 8005490:	400204a0 	.word	0x400204a0
 8005494:	400204b8 	.word	0x400204b8

08005498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a84      	ldr	r2, [pc, #528]	; (80056c8 <DMA_SetConfig+0x230>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d072      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a82      	ldr	r2, [pc, #520]	; (80056cc <DMA_SetConfig+0x234>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d06d      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a81      	ldr	r2, [pc, #516]	; (80056d0 <DMA_SetConfig+0x238>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d068      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7f      	ldr	r2, [pc, #508]	; (80056d4 <DMA_SetConfig+0x23c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d063      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7e      	ldr	r2, [pc, #504]	; (80056d8 <DMA_SetConfig+0x240>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d05e      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a7c      	ldr	r2, [pc, #496]	; (80056dc <DMA_SetConfig+0x244>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d059      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a7b      	ldr	r2, [pc, #492]	; (80056e0 <DMA_SetConfig+0x248>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d054      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a79      	ldr	r2, [pc, #484]	; (80056e4 <DMA_SetConfig+0x24c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04f      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a78      	ldr	r2, [pc, #480]	; (80056e8 <DMA_SetConfig+0x250>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d04a      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a76      	ldr	r2, [pc, #472]	; (80056ec <DMA_SetConfig+0x254>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d045      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a75      	ldr	r2, [pc, #468]	; (80056f0 <DMA_SetConfig+0x258>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d040      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a73      	ldr	r2, [pc, #460]	; (80056f4 <DMA_SetConfig+0x25c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d03b      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a72      	ldr	r2, [pc, #456]	; (80056f8 <DMA_SetConfig+0x260>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d036      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a70      	ldr	r2, [pc, #448]	; (80056fc <DMA_SetConfig+0x264>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d031      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6f      	ldr	r2, [pc, #444]	; (8005700 <DMA_SetConfig+0x268>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d02c      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a6d      	ldr	r2, [pc, #436]	; (8005704 <DMA_SetConfig+0x26c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d027      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6c      	ldr	r2, [pc, #432]	; (8005708 <DMA_SetConfig+0x270>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6a      	ldr	r2, [pc, #424]	; (800570c <DMA_SetConfig+0x274>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01d      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a69      	ldr	r2, [pc, #420]	; (8005710 <DMA_SetConfig+0x278>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a67      	ldr	r2, [pc, #412]	; (8005714 <DMA_SetConfig+0x27c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a66      	ldr	r2, [pc, #408]	; (8005718 <DMA_SetConfig+0x280>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a64      	ldr	r2, [pc, #400]	; (800571c <DMA_SetConfig+0x284>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a63      	ldr	r2, [pc, #396]	; (8005720 <DMA_SetConfig+0x288>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <DMA_SetConfig+0x10a>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a61      	ldr	r2, [pc, #388]	; (8005724 <DMA_SetConfig+0x28c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <DMA_SetConfig+0x10e>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <DMA_SetConfig+0x110>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3e      	ldr	r2, [pc, #248]	; (80056c8 <DMA_SetConfig+0x230>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d04a      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <DMA_SetConfig+0x234>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d045      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <DMA_SetConfig+0x238>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d040      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <DMA_SetConfig+0x23c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d03b      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <DMA_SetConfig+0x240>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d036      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a37      	ldr	r2, [pc, #220]	; (80056dc <DMA_SetConfig+0x244>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d031      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <DMA_SetConfig+0x248>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d02c      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <DMA_SetConfig+0x24c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d027      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <DMA_SetConfig+0x250>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d022      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a31      	ldr	r2, [pc, #196]	; (80056ec <DMA_SetConfig+0x254>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d01d      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <DMA_SetConfig+0x258>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2e      	ldr	r2, [pc, #184]	; (80056f4 <DMA_SetConfig+0x25c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <DMA_SetConfig+0x260>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2b      	ldr	r2, [pc, #172]	; (80056fc <DMA_SetConfig+0x264>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <DMA_SetConfig+0x268>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <DMA_SetConfig+0x1d0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <DMA_SetConfig+0x26c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <DMA_SetConfig+0x1d4>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <DMA_SetConfig+0x1d6>
 800566c:	2300      	movs	r3, #0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d05a      	beq.n	8005728 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	223f      	movs	r2, #63	; 0x3f
 800567c:	409a      	lsls	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005690:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d108      	bne.n	80056b4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056b2:	e087      	b.n	80057c4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]
}
 80056c4:	e07e      	b.n	80057c4 <DMA_SetConfig+0x32c>
 80056c6:	bf00      	nop
 80056c8:	40020010 	.word	0x40020010
 80056cc:	40020028 	.word	0x40020028
 80056d0:	40020040 	.word	0x40020040
 80056d4:	40020058 	.word	0x40020058
 80056d8:	40020070 	.word	0x40020070
 80056dc:	40020088 	.word	0x40020088
 80056e0:	400200a0 	.word	0x400200a0
 80056e4:	400200b8 	.word	0x400200b8
 80056e8:	40020410 	.word	0x40020410
 80056ec:	40020428 	.word	0x40020428
 80056f0:	40020440 	.word	0x40020440
 80056f4:	40020458 	.word	0x40020458
 80056f8:	40020470 	.word	0x40020470
 80056fc:	40020488 	.word	0x40020488
 8005700:	400204a0 	.word	0x400204a0
 8005704:	400204b8 	.word	0x400204b8
 8005708:	58025408 	.word	0x58025408
 800570c:	5802541c 	.word	0x5802541c
 8005710:	58025430 	.word	0x58025430
 8005714:	58025444 	.word	0x58025444
 8005718:	58025458 	.word	0x58025458
 800571c:	5802546c 	.word	0x5802546c
 8005720:	58025480 	.word	0x58025480
 8005724:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <DMA_SetConfig+0x338>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <DMA_SetConfig+0x33c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <DMA_SetConfig+0x340>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a24      	ldr	r2, [pc, #144]	; (80057dc <DMA_SetConfig+0x344>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <DMA_SetConfig+0x348>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <DMA_SetConfig+0x34c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <DMA_SetConfig+0x350>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <DMA_SetConfig+0x2e0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <DMA_SetConfig+0x354>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <DMA_SetConfig+0x2e4>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <DMA_SetConfig+0x2e6>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2201      	movs	r2, #1
 800578c:	409a      	lsls	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d108      	bne.n	80057b4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	60da      	str	r2, [r3, #12]
}
 80057b2:	e007      	b.n	80057c4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	60da      	str	r2, [r3, #12]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	58025408 	.word	0x58025408
 80057d4:	5802541c 	.word	0x5802541c
 80057d8:	58025430 	.word	0x58025430
 80057dc:	58025444 	.word	0x58025444
 80057e0:	58025458 	.word	0x58025458
 80057e4:	5802546c 	.word	0x5802546c
 80057e8:	58025480 	.word	0x58025480
 80057ec:	58025494 	.word	0x58025494

080057f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a42      	ldr	r2, [pc, #264]	; (8005908 <DMA_CalcBaseAndBitshift+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d04a      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a41      	ldr	r2, [pc, #260]	; (800590c <DMA_CalcBaseAndBitshift+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d045      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3f      	ldr	r2, [pc, #252]	; (8005910 <DMA_CalcBaseAndBitshift+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d040      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3e      	ldr	r2, [pc, #248]	; (8005914 <DMA_CalcBaseAndBitshift+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d03b      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <DMA_CalcBaseAndBitshift+0x128>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d036      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a3b      	ldr	r2, [pc, #236]	; (800591c <DMA_CalcBaseAndBitshift+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d031      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a39      	ldr	r2, [pc, #228]	; (8005920 <DMA_CalcBaseAndBitshift+0x130>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02c      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a38      	ldr	r2, [pc, #224]	; (8005924 <DMA_CalcBaseAndBitshift+0x134>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d027      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a36      	ldr	r2, [pc, #216]	; (8005928 <DMA_CalcBaseAndBitshift+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a35      	ldr	r2, [pc, #212]	; (800592c <DMA_CalcBaseAndBitshift+0x13c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d01d      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a33      	ldr	r2, [pc, #204]	; (8005930 <DMA_CalcBaseAndBitshift+0x140>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a32      	ldr	r2, [pc, #200]	; (8005934 <DMA_CalcBaseAndBitshift+0x144>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a30      	ldr	r2, [pc, #192]	; (8005938 <DMA_CalcBaseAndBitshift+0x148>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2f      	ldr	r2, [pc, #188]	; (800593c <DMA_CalcBaseAndBitshift+0x14c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <DMA_CalcBaseAndBitshift+0x150>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2c      	ldr	r2, [pc, #176]	; (8005944 <DMA_CalcBaseAndBitshift+0x154>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <DMA_CalcBaseAndBitshift+0xac>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <DMA_CalcBaseAndBitshift+0xae>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d024      	beq.n	80058ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3b10      	subs	r3, #16
 80058aa:	4a27      	ldr	r2, [pc, #156]	; (8005948 <DMA_CalcBaseAndBitshift+0x158>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	4a24      	ldr	r2, [pc, #144]	; (800594c <DMA_CalcBaseAndBitshift+0x15c>)
 80058bc:	5cd3      	ldrb	r3, [r2, r3]
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d908      	bls.n	80058dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <DMA_CalcBaseAndBitshift+0x160>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	659a      	str	r2, [r3, #88]	; 0x58
 80058da:	e00d      	b.n	80058f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <DMA_CalcBaseAndBitshift+0x160>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6593      	str	r3, [r2, #88]	; 0x58
 80058ea:	e005      	b.n	80058f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40020010 	.word	0x40020010
 800590c:	40020028 	.word	0x40020028
 8005910:	40020040 	.word	0x40020040
 8005914:	40020058 	.word	0x40020058
 8005918:	40020070 	.word	0x40020070
 800591c:	40020088 	.word	0x40020088
 8005920:	400200a0 	.word	0x400200a0
 8005924:	400200b8 	.word	0x400200b8
 8005928:	40020410 	.word	0x40020410
 800592c:	40020428 	.word	0x40020428
 8005930:	40020440 	.word	0x40020440
 8005934:	40020458 	.word	0x40020458
 8005938:	40020470 	.word	0x40020470
 800593c:	40020488 	.word	0x40020488
 8005940:	400204a0 	.word	0x400204a0
 8005944:	400204b8 	.word	0x400204b8
 8005948:	aaaaaaab 	.word	0xaaaaaaab
 800594c:	0800cd44 	.word	0x0800cd44
 8005950:	fffffc00 	.word	0xfffffc00

08005954 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d120      	bne.n	80059aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	2b03      	cmp	r3, #3
 800596e:	d858      	bhi.n	8005a22 <DMA_CheckFifoParam+0xce>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <DMA_CheckFifoParam+0x24>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005989 	.word	0x08005989
 800597c:	0800599b 	.word	0x0800599b
 8005980:	08005989 	.word	0x08005989
 8005984:	08005a23 	.word	0x08005a23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d048      	beq.n	8005a26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005998:	e045      	b.n	8005a26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059a2:	d142      	bne.n	8005a2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059a8:	e03f      	b.n	8005a2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b2:	d123      	bne.n	80059fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d838      	bhi.n	8005a2e <DMA_CheckFifoParam+0xda>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <DMA_CheckFifoParam+0x70>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059db 	.word	0x080059db
 80059cc:	080059d5 	.word	0x080059d5
 80059d0:	080059ed 	.word	0x080059ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
        break;
 80059d8:	e030      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d025      	beq.n	8005a32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059ea:	e022      	b.n	8005a32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059f4:	d11f      	bne.n	8005a36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059fa:	e01c      	b.n	8005a36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d902      	bls.n	8005a0a <DMA_CheckFifoParam+0xb6>
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d003      	beq.n	8005a10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a08:	e018      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0e:	e015      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8005a20:	e00b      	b.n	8005a3a <DMA_CheckFifoParam+0xe6>
        break;
 8005a22:	bf00      	nop
 8005a24:	e00a      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a26:	bf00      	nop
 8005a28:	e008      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e006      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a2e:	bf00      	nop
 8005a30:	e004      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
    break;
 8005a3a:	bf00      	nop
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop

08005a4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a38      	ldr	r2, [pc, #224]	; (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a35      	ldr	r2, [pc, #212]	; (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a32      	ldr	r2, [pc, #200]	; (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3b08      	subs	r3, #8
 8005abc:	4a28      	ldr	r2, [pc, #160]	; (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ad8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ae8:	e024      	b.n	8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	3b10      	subs	r3, #16
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d806      	bhi.n	8005b12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d902      	bls.n	8005b12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	58025408 	.word	0x58025408
 8005b44:	5802541c 	.word	0x5802541c
 8005b48:	58025430 	.word	0x58025430
 8005b4c:	58025444 	.word	0x58025444
 8005b50:	58025458 	.word	0x58025458
 8005b54:	5802546c 	.word	0x5802546c
 8005b58:	58025480 	.word	0x58025480
 8005b5c:	58025494 	.word	0x58025494
 8005b60:	cccccccd 	.word	0xcccccccd
 8005b64:	16009600 	.word	0x16009600
 8005b68:	58025880 	.word	0x58025880
 8005b6c:	aaaaaaab 	.word	0xaaaaaaab
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	4002040f 	.word	0x4002040f
 8005b78:	10008200 	.word	0x10008200
 8005b7c:	40020880 	.word	0x40020880

08005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04a      	beq.n	8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d847      	bhi.n	8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c08:	671a      	str	r2, [r3, #112]	; 0x70
 8005c0a:	e009      	b.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2201      	movs	r2, #1
 8005c26:	409a      	lsls	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	58025408 	.word	0x58025408
 8005c3c:	5802541c 	.word	0x5802541c
 8005c40:	58025430 	.word	0x58025430
 8005c44:	58025444 	.word	0x58025444
 8005c48:	58025458 	.word	0x58025458
 8005c4c:	5802546c 	.word	0x5802546c
 8005c50:	58025480 	.word	0x58025480
 8005c54:	58025494 	.word	0x58025494
 8005c58:	1600963f 	.word	0x1600963f
 8005c5c:	58025940 	.word	0x58025940
 8005c60:	1000823f 	.word	0x1000823f
 8005c64:	40020940 	.word	0x40020940

08005c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c76:	4b89      	ldr	r3, [pc, #548]	; (8005e9c <HAL_GPIO_Init+0x234>)
 8005c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c7a:	e194      	b.n	8005fa6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2101      	movs	r1, #1
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8186 	beq.w	8005fa0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_GPIO_Init+0x4c>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d007      	beq.n	8005cb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca8:	2b11      	cmp	r3, #17
 8005caa:	d003      	beq.n	8005cb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b12      	cmp	r3, #18
 8005cb2:	d130      	bne.n	8005d16 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cea:	2201      	movs	r2, #1
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0201 	and.w	r2, r3, #1
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2203      	movs	r2, #3
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d003      	beq.n	8005d56 <HAL_GPIO_Init+0xee>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b12      	cmp	r3, #18
 8005d54:	d123      	bne.n	8005d9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	08da      	lsrs	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3208      	adds	r2, #8
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	4013      	ands	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	08da      	lsrs	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3208      	adds	r2, #8
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	2203      	movs	r2, #3
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43db      	mvns	r3, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0203 	and.w	r2, r3, #3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80e0 	beq.w	8005fa0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de0:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <HAL_GPIO_Init+0x238>)
 8005de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005de6:	4a2e      	ldr	r2, [pc, #184]	; (8005ea0 <HAL_GPIO_Init+0x238>)
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005df0:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <HAL_GPIO_Init+0x238>)
 8005df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfe:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <HAL_GPIO_Init+0x23c>)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	3302      	adds	r3, #2
 8005e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <HAL_GPIO_Init+0x240>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d052      	beq.n	8005ed0 <HAL_GPIO_Init+0x268>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_GPIO_Init+0x244>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_GPIO_Init+0x22e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <HAL_GPIO_Init+0x248>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02b      	beq.n	8005e92 <HAL_GPIO_Init+0x22a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <HAL_GPIO_Init+0x24c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d025      	beq.n	8005e8e <HAL_GPIO_Init+0x226>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <HAL_GPIO_Init+0x250>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01f      	beq.n	8005e8a <HAL_GPIO_Init+0x222>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <HAL_GPIO_Init+0x254>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d019      	beq.n	8005e86 <HAL_GPIO_Init+0x21e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_GPIO_Init+0x258>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_GPIO_Init+0x21a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_GPIO_Init+0x25c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00d      	beq.n	8005e7e <HAL_GPIO_Init+0x216>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <HAL_GPIO_Init+0x260>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <HAL_GPIO_Init+0x212>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <HAL_GPIO_Init+0x264>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <HAL_GPIO_Init+0x20e>
 8005e72:	2309      	movs	r3, #9
 8005e74:	e02d      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e76:	230a      	movs	r3, #10
 8005e78:	e02b      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	e029      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e7e:	2307      	movs	r3, #7
 8005e80:	e027      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e82:	2306      	movs	r3, #6
 8005e84:	e025      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e86:	2305      	movs	r3, #5
 8005e88:	e023      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e021      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e01f      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e01d      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e01b      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e9a:	bf00      	nop
 8005e9c:	58000080 	.word	0x58000080
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58000400 	.word	0x58000400
 8005ea8:	58020000 	.word	0x58020000
 8005eac:	58020400 	.word	0x58020400
 8005eb0:	58020800 	.word	0x58020800
 8005eb4:	58020c00 	.word	0x58020c00
 8005eb8:	58021000 	.word	0x58021000
 8005ebc:	58021400 	.word	0x58021400
 8005ec0:	58021800 	.word	0x58021800
 8005ec4:	58021c00 	.word	0x58021c00
 8005ec8:	58022000 	.word	0x58022000
 8005ecc:	58022400 	.word	0x58022400
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	f002 0203 	and.w	r2, r2, #3
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4093      	lsls	r3, r2
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ee2:	4938      	ldr	r1, [pc, #224]	; (8005fc4 <HAL_GPIO_Init+0x35c>)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f ae63 	bne.w	8005c7c <HAL_GPIO_Init+0x14>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58000400 	.word	0x58000400

08005fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fd8:	787b      	ldrb	r3, [r7, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fe4:	e003      	b.n	8005fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	041a      	lsls	r2, r3, #16
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	887b      	ldrh	r3, [r7, #2]
 800600c:	401a      	ands	r2, r3
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006014:	887b      	ldrh	r3, [r7, #2]
 8006016:	041a      	lsls	r2, r3, #16
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800601c:	e002      	b.n	8006024 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800601e:	887a      	ldrh	r2, [r7, #2]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	619a      	str	r2, [r3, #24]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_PWREx_ConfigSupply+0x70>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b04      	cmp	r3, #4
 8006042:	d00a      	beq.n	800605a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d001      	beq.n	8006056 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e01f      	b.n	8006096 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e01d      	b.n	8006096 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800605a:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <HAL_PWREx_ConfigSupply+0x70>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f023 0207 	bic.w	r2, r3, #7
 8006062:	490f      	ldr	r1, [pc, #60]	; (80060a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800606a:	f7fc f955 	bl	8002318 <HAL_GetTick>
 800606e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006070:	e009      	b.n	8006086 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006072:	f7fc f951 	bl	8002318 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006080:	d901      	bls.n	8006086 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e007      	b.n	8006096 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800608e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006092:	d1ee      	bne.n	8006072 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	58024800 	.word	0x58024800

080060a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e3c4      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8087 	beq.w	80061d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c4:	4ba2      	ldr	r3, [pc, #648]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ce:	4ba0      	ldr	r3, [pc, #640]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d007      	beq.n	80060ea <HAL_RCC_OscConfig+0x46>
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	2b18      	cmp	r3, #24
 80060de:	d110      	bne.n	8006102 <HAL_RCC_OscConfig+0x5e>
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d10b      	bne.n	8006102 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ea:	4b99      	ldr	r3, [pc, #612]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d06c      	beq.n	80061d0 <HAL_RCC_OscConfig+0x12c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d168      	bne.n	80061d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e39e      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x76>
 800610c:	4b90      	ldr	r3, [pc, #576]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a8f      	ldr	r2, [pc, #572]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e02e      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x98>
 8006122:	4b8b      	ldr	r3, [pc, #556]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a8a      	ldr	r2, [pc, #552]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b88      	ldr	r3, [pc, #544]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a87      	ldr	r2, [pc, #540]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e01d      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006144:	d10c      	bne.n	8006160 <HAL_RCC_OscConfig+0xbc>
 8006146:	4b82      	ldr	r3, [pc, #520]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a81      	ldr	r2, [pc, #516]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	4b7f      	ldr	r3, [pc, #508]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7e      	ldr	r2, [pc, #504]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e00b      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 8006160:	4b7b      	ldr	r3, [pc, #492]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a7a      	ldr	r2, [pc, #488]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b78      	ldr	r3, [pc, #480]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a77      	ldr	r2, [pc, #476]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc f8ca 	bl	8002318 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006188:	f7fc f8c6 	bl	8002318 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	; 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e352      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800619a:	4b6d      	ldr	r3, [pc, #436]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0xe4>
 80061a6:	e014      	b.n	80061d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fc f8b6 	bl	8002318 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061b0:	f7fc f8b2 	bl	8002318 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e33e      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061c2:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x10c>
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8092 	beq.w	8006304 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e0:	4b5b      	ldr	r3, [pc, #364]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ea:	4b59      	ldr	r3, [pc, #356]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_RCC_OscConfig+0x162>
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b18      	cmp	r3, #24
 80061fa:	d12d      	bne.n	8006258 <HAL_RCC_OscConfig+0x1b4>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d128      	bne.n	8006258 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006206:	4b52      	ldr	r3, [pc, #328]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_RCC_OscConfig+0x17a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e310      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621e:	f7fc f8a9 	bl	8002374 <HAL_GetREVID>
 8006222:	4602      	mov	r2, r0
 8006224:	f241 0303 	movw	r3, #4099	; 0x1003
 8006228:	429a      	cmp	r2, r3
 800622a:	d80a      	bhi.n	8006242 <HAL_RCC_OscConfig+0x19e>
 800622c:	4b48      	ldr	r3, [pc, #288]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	4945      	ldr	r1, [pc, #276]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800623c:	4313      	orrs	r3, r2
 800623e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006240:	e060      	b.n	8006304 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006242:	4b43      	ldr	r3, [pc, #268]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	061b      	lsls	r3, r3, #24
 8006250:	493f      	ldr	r1, [pc, #252]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006252:	4313      	orrs	r3, r2
 8006254:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006256:	e055      	b.n	8006304 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d038      	beq.n	80062d2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006260:	4b3b      	ldr	r3, [pc, #236]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f023 0219 	bic.w	r2, r3, #25
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4938      	ldr	r1, [pc, #224]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006272:	f7fc f851 	bl	8002318 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800627a:	f7fc f84d 	bl	8002318 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e2d9      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800628c:	4b30      	ldr	r3, [pc, #192]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006298:	f7fc f86c 	bl	8002374 <HAL_GetREVID>
 800629c:	4602      	mov	r2, r0
 800629e:	f241 0303 	movw	r3, #4099	; 0x1003
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d80a      	bhi.n	80062bc <HAL_RCC_OscConfig+0x218>
 80062a6:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	031b      	lsls	r3, r3, #12
 80062b4:	4926      	ldr	r1, [pc, #152]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	604b      	str	r3, [r1, #4]
 80062ba:	e023      	b.n	8006304 <HAL_RCC_OscConfig+0x260>
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	4921      	ldr	r1, [pc, #132]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	e018      	b.n	8006304 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d2:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fc f81b 	bl	8002318 <HAL_GetTick>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e6:	f7fc f817 	bl	8002318 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e2a3      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8091 	beq.w	8006434 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b08      	cmp	r3, #8
 8006326:	d007      	beq.n	8006338 <HAL_RCC_OscConfig+0x294>
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b18      	cmp	r3, #24
 800632c:	d12f      	bne.n	800638e <HAL_RCC_OscConfig+0x2ea>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d12a      	bne.n	800638e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCC_OscConfig+0x2ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_RCC_OscConfig+0x2b0>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d003      	beq.n	8006354 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e277      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
 8006350:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006354:	f7fc f80e 	bl	8002374 <HAL_GetREVID>
 8006358:	4602      	mov	r2, r0
 800635a:	f241 0303 	movw	r3, #4099	; 0x1003
 800635e:	429a      	cmp	r2, r3
 8006360:	d80a      	bhi.n	8006378 <HAL_RCC_OscConfig+0x2d4>
 8006362:	4ba2      	ldr	r3, [pc, #648]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	069b      	lsls	r3, r3, #26
 8006370:	499e      	ldr	r1, [pc, #632]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006372:	4313      	orrs	r3, r2
 8006374:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006376:	e05d      	b.n	8006434 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006378:	4b9c      	ldr	r3, [pc, #624]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	061b      	lsls	r3, r3, #24
 8006386:	4999      	ldr	r1, [pc, #612]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006388:	4313      	orrs	r3, r2
 800638a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800638c:	e052      	b.n	8006434 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d035      	beq.n	8006402 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006396:	4b95      	ldr	r3, [pc, #596]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a94      	ldr	r2, [pc, #592]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a2:	f7fb ffb9 	bl	8002318 <HAL_GetTick>
 80063a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063aa:	f7fb ffb5 	bl	8002318 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e241      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063bc:	4b8b      	ldr	r3, [pc, #556]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0f0      	beq.n	80063aa <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c8:	f7fb ffd4 	bl	8002374 <HAL_GetREVID>
 80063cc:	4602      	mov	r2, r0
 80063ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d80a      	bhi.n	80063ec <HAL_RCC_OscConfig+0x348>
 80063d6:	4b85      	ldr	r3, [pc, #532]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	069b      	lsls	r3, r3, #26
 80063e4:	4981      	ldr	r1, [pc, #516]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	604b      	str	r3, [r1, #4]
 80063ea:	e023      	b.n	8006434 <HAL_RCC_OscConfig+0x390>
 80063ec:	4b7f      	ldr	r3, [pc, #508]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	497c      	ldr	r1, [pc, #496]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60cb      	str	r3, [r1, #12]
 8006400:	e018      	b.n	8006434 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006402:	4b7a      	ldr	r3, [pc, #488]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a79      	ldr	r2, [pc, #484]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fb ff83 	bl	8002318 <HAL_GetTick>
 8006412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006416:	f7fb ff7f 	bl	8002318 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e20b      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006428:	4b70      	ldr	r3, [pc, #448]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f0      	bne.n	8006416 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d036      	beq.n	80064ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d019      	beq.n	800647c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006448:	4b68      	ldr	r3, [pc, #416]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800644a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644c:	4a67      	ldr	r2, [pc, #412]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006454:	f7fb ff60 	bl	8002318 <HAL_GetTick>
 8006458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800645c:	f7fb ff5c 	bl	8002318 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1e8      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800646e:	4b5f      	ldr	r3, [pc, #380]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0x3b8>
 800647a:	e018      	b.n	80064ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800647c:	4b5b      	ldr	r3, [pc, #364]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	4a5a      	ldr	r2, [pc, #360]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006488:	f7fb ff46 	bl	8002318 <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006490:	f7fb ff42 	bl	8002318 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e1ce      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064a2:	4b52      	ldr	r3, [pc, #328]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d036      	beq.n	8006528 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d019      	beq.n	80064f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064c2:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a49      	ldr	r2, [pc, #292]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ce:	f7fb ff23 	bl	8002318 <HAL_GetTick>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064d6:	f7fb ff1f 	bl	8002318 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1ab      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064e8:	4b40      	ldr	r3, [pc, #256]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x432>
 80064f4:	e018      	b.n	8006528 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064f6:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3c      	ldr	r2, [pc, #240]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80064fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006500:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006502:	f7fb ff09 	bl	8002318 <HAL_GetTick>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800650a:	f7fb ff05 	bl	8002318 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e191      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800651c:	4b33      	ldr	r3, [pc, #204]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f0      	bne.n	800650a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8086 	beq.w	8006642 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006536:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <HAL_RCC_OscConfig+0x54c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <HAL_RCC_OscConfig+0x54c>)
 800653c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006542:	f7fb fee9 	bl	8002318 <HAL_GetTick>
 8006546:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800654a:	f7fb fee5 	bl	8002318 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b64      	cmp	r3, #100	; 0x64
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e171      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800655c:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <HAL_RCC_OscConfig+0x54c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d106      	bne.n	800657e <HAL_RCC_OscConfig+0x4da>
 8006570:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6713      	str	r3, [r2, #112]	; 0x70
 800657c:	e02d      	b.n	80065da <HAL_RCC_OscConfig+0x536>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4fc>
 8006586:	4b19      	ldr	r3, [pc, #100]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a18      	ldr	r2, [pc, #96]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	6713      	str	r3, [r2, #112]	; 0x70
 8006592:	4b16      	ldr	r3, [pc, #88]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 8006598:	f023 0304 	bic.w	r3, r3, #4
 800659c:	6713      	str	r3, [r2, #112]	; 0x70
 800659e:	e01c      	b.n	80065da <HAL_RCC_OscConfig+0x536>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	d10c      	bne.n	80065c2 <HAL_RCC_OscConfig+0x51e>
 80065a8:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	4a0f      	ldr	r2, [pc, #60]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	6713      	str	r3, [r2, #112]	; 0x70
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b8:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6713      	str	r3, [r2, #112]	; 0x70
 80065c0:	e00b      	b.n	80065da <HAL_RCC_OscConfig+0x536>
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a06      	ldr	r2, [pc, #24]	; (80065ec <HAL_RCC_OscConfig+0x548>)
 80065d4:	f023 0304 	bic.w	r3, r3, #4
 80065d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01a      	beq.n	8006618 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e2:	f7fb fe99 	bl	8002318 <HAL_GetTick>
 80065e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e8:	e00f      	b.n	800660a <HAL_RCC_OscConfig+0x566>
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fb fe90 	bl	8002318 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e11a      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800660a:	4b8f      	ldr	r3, [pc, #572]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0ee      	beq.n	80065f4 <HAL_RCC_OscConfig+0x550>
 8006616:	e014      	b.n	8006642 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fb fe7e 	bl	8002318 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800661e:	e00a      	b.n	8006636 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	f7fb fe7a 	bl	8002318 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f241 3288 	movw	r2, #5000	; 0x1388
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e104      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006636:	4b84      	ldr	r3, [pc, #528]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1ee      	bne.n	8006620 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80f9 	beq.w	800683e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800664c:	4b7e      	ldr	r3, [pc, #504]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006654:	2b18      	cmp	r3, #24
 8006656:	f000 80b4 	beq.w	80067c2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b02      	cmp	r3, #2
 8006660:	f040 8095 	bne.w	800678e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006664:	4b78      	ldr	r3, [pc, #480]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a77      	ldr	r2, [pc, #476]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800666a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800666e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fb fe52 	bl	8002318 <HAL_GetTick>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006678:	f7fb fe4e 	bl	8002318 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e0da      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668a:	4b6f      	ldr	r3, [pc, #444]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006696:	4b6c      	ldr	r3, [pc, #432]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669a:	4b6c      	ldr	r3, [pc, #432]	; (800684c <HAL_RCC_OscConfig+0x7a8>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	430a      	orrs	r2, r1
 80066aa:	4967      	ldr	r1, [pc, #412]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	628b      	str	r3, [r1, #40]	; 0x28
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	3b01      	subs	r3, #1
 80066c0:	025b      	lsls	r3, r3, #9
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	3b01      	subs	r3, #1
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	3b01      	subs	r3, #1
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e0:	4959      	ldr	r1, [pc, #356]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066e6:	4b58      	ldr	r3, [pc, #352]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	4a57      	ldr	r2, [pc, #348]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066f2:	4b55      	ldr	r3, [pc, #340]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80066f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f6:	4b56      	ldr	r3, [pc, #344]	; (8006850 <HAL_RCC_OscConfig+0x7ac>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066fe:	00d2      	lsls	r2, r2, #3
 8006700:	4951      	ldr	r1, [pc, #324]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006702:	4313      	orrs	r3, r2
 8006704:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006706:	4b50      	ldr	r3, [pc, #320]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f023 020c 	bic.w	r2, r3, #12
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	494d      	ldr	r1, [pc, #308]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006714:	4313      	orrs	r3, r2
 8006716:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006718:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	f023 0202 	bic.w	r2, r3, #2
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	4948      	ldr	r1, [pc, #288]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006726:	4313      	orrs	r3, r2
 8006728:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800672a:	4b47      	ldr	r3, [pc, #284]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	4a46      	ldr	r2, [pc, #280]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006736:	4b44      	ldr	r3, [pc, #272]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	4a43      	ldr	r2, [pc, #268]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800673c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006742:	4b41      	ldr	r3, [pc, #260]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4a40      	ldr	r2, [pc, #256]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800674c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800674e:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4a3d      	ldr	r2, [pc, #244]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800675a:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006766:	f7fb fdd7 	bl	8002318 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676e:	f7fb fdd3 	bl	8002318 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e05f      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006780:	4b31      	ldr	r3, [pc, #196]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x6ca>
 800678c:	e057      	b.n	800683e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2d      	ldr	r2, [pc, #180]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 8006794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679a:	f7fb fdbd 	bl	8002318 <HAL_GetTick>
 800679e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a2:	f7fb fdb9 	bl	8002318 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e045      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067b4:	4b24      	ldr	r3, [pc, #144]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <HAL_RCC_OscConfig+0x6fe>
 80067c0:	e03d      	b.n	800683e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067c2:	4b21      	ldr	r3, [pc, #132]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067c8:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <HAL_RCC_OscConfig+0x7a4>)
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d031      	beq.n	800683a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f003 0203 	and.w	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d12a      	bne.n	800683a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d122      	bne.n	800683a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d11a      	bne.n	800683a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0a5b      	lsrs	r3, r3, #9
 8006808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d111      	bne.n	800683a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d108      	bne.n	800683a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d001      	beq.n	800683e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3730      	adds	r7, #48	; 0x30
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	58024400 	.word	0x58024400
 800684c:	fffffc0c 	.word	0xfffffc0c
 8006850:	ffff0007 	.word	0xffff0007

08006854 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e19c      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b8a      	ldr	r3, [pc, #552]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d910      	bls.n	8006898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b87      	ldr	r3, [pc, #540]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 020f 	bic.w	r2, r3, #15
 800687e:	4985      	ldr	r1, [pc, #532]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006886:	4b83      	ldr	r3, [pc, #524]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e184      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d010      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	4b7b      	ldr	r3, [pc, #492]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d908      	bls.n	80068c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068b4:	4b78      	ldr	r3, [pc, #480]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	4975      	ldr	r1, [pc, #468]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	4b70      	ldr	r3, [pc, #448]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068de:	429a      	cmp	r2, r3
 80068e0:	d908      	bls.n	80068f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068e2:	4b6d      	ldr	r3, [pc, #436]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	496a      	ldr	r1, [pc, #424]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d010      	beq.n	8006922 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	4b64      	ldr	r3, [pc, #400]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800690c:	429a      	cmp	r2, r3
 800690e:	d908      	bls.n	8006922 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006910:	4b61      	ldr	r3, [pc, #388]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	495e      	ldr	r1, [pc, #376]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 800691e:	4313      	orrs	r3, r2
 8006920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d010      	beq.n	8006950 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69da      	ldr	r2, [r3, #28]
 8006932:	4b59      	ldr	r3, [pc, #356]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800693a:	429a      	cmp	r2, r3
 800693c:	d908      	bls.n	8006950 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800693e:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4953      	ldr	r1, [pc, #332]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 800694c:	4313      	orrs	r3, r2
 800694e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	429a      	cmp	r2, r3
 800696a:	d908      	bls.n	800697e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800696c:	4b4a      	ldr	r3, [pc, #296]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f023 020f 	bic.w	r2, r3, #15
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4947      	ldr	r1, [pc, #284]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 800697a:	4313      	orrs	r3, r2
 800697c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d055      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800698a:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	4940      	ldr	r1, [pc, #256]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006998:	4313      	orrs	r3, r2
 800699a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d107      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069a4:	4b3c      	ldr	r3, [pc, #240]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d121      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0f6      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069bc:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d115      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0ea      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069d4:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e0de      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e4:	4b2c      	ldr	r3, [pc, #176]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0d6      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069f4:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f023 0207 	bic.w	r2, r3, #7
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4925      	ldr	r1, [pc, #148]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fb fc87 	bl	8002318 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0c:	e00a      	b.n	8006a24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a0e:	f7fb fc83 	bl	8002318 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e0be      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a24:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d1eb      	bne.n	8006a0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d010      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d208      	bcs.n	8006a64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f023 020f 	bic.w	r2, r3, #15
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	490e      	ldr	r1, [pc, #56]	; (8006a98 <HAL_RCC_ClockConfig+0x244>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a64:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d214      	bcs.n	8006a9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 020f 	bic.w	r2, r3, #15
 8006a7a:	4906      	ldr	r1, [pc, #24]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a82:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <HAL_RCC_ClockConfig+0x240>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d005      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e086      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x34e>
 8006a94:	52002000 	.word	0x52002000
 8006a98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d010      	beq.n	8006aca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d208      	bcs.n	8006aca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ab8:	4b3c      	ldr	r3, [pc, #240]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4939      	ldr	r1, [pc, #228]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	4b34      	ldr	r3, [pc, #208]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d208      	bcs.n	8006af8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ae6:	4b31      	ldr	r3, [pc, #196]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	492e      	ldr	r1, [pc, #184]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d010      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	4b28      	ldr	r3, [pc, #160]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d208      	bcs.n	8006b26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b14:	4b25      	ldr	r3, [pc, #148]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	4922      	ldr	r1, [pc, #136]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d010      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d208      	bcs.n	8006b54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b42:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4917      	ldr	r1, [pc, #92]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b54:	f000 f834 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b58:	4601      	mov	r1, r0
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	4a12      	ldr	r2, [pc, #72]	; (8006bb0 <HAL_RCC_ClockConfig+0x35c>)
 8006b66:	5cd3      	ldrb	r3, [r2, r3]
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8006b70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b72:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCC_ClockConfig+0x358>)
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	4a0d      	ldr	r2, [pc, #52]	; (8006bb0 <HAL_RCC_ClockConfig+0x35c>)
 8006b7c:	5cd3      	ldrb	r3, [r2, r3]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
 8006b88:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <HAL_RCC_ClockConfig+0x360>)
 8006b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b8c:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <HAL_RCC_ClockConfig+0x364>)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <HAL_RCC_ClockConfig+0x368>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fb fb74 	bl	8002284 <HAL_InitTick>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0800cd34 	.word	0x0800cd34
 8006bb4:	24000024 	.word	0x24000024
 8006bb8:	24000020 	.word	0x24000020
 8006bbc:	24000028 	.word	0x24000028

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc6:	4baf      	ldr	r3, [pc, #700]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bce:	2b18      	cmp	r3, #24
 8006bd0:	f200 814e 	bhi.w	8006e70 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006e71 	.word	0x08006e71
 8006be4:	08006e71 	.word	0x08006e71
 8006be8:	08006e71 	.word	0x08006e71
 8006bec:	08006e71 	.word	0x08006e71
 8006bf0:	08006e71 	.word	0x08006e71
 8006bf4:	08006e71 	.word	0x08006e71
 8006bf8:	08006e71 	.word	0x08006e71
 8006bfc:	08006c67 	.word	0x08006c67
 8006c00:	08006e71 	.word	0x08006e71
 8006c04:	08006e71 	.word	0x08006e71
 8006c08:	08006e71 	.word	0x08006e71
 8006c0c:	08006e71 	.word	0x08006e71
 8006c10:	08006e71 	.word	0x08006e71
 8006c14:	08006e71 	.word	0x08006e71
 8006c18:	08006e71 	.word	0x08006e71
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006e71 	.word	0x08006e71
 8006c24:	08006e71 	.word	0x08006e71
 8006c28:	08006e71 	.word	0x08006e71
 8006c2c:	08006e71 	.word	0x08006e71
 8006c30:	08006e71 	.word	0x08006e71
 8006c34:	08006e71 	.word	0x08006e71
 8006c38:	08006e71 	.word	0x08006e71
 8006c3c:	08006c73 	.word	0x08006c73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c40:	4b90      	ldr	r3, [pc, #576]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c4c:	4b8d      	ldr	r3, [pc, #564]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	08db      	lsrs	r3, r3, #3
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	4a8c      	ldr	r2, [pc, #560]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c5e:	e10a      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c60:	4b89      	ldr	r3, [pc, #548]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c62:	61bb      	str	r3, [r7, #24]
    break;
 8006c64:	e107      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c66:	4b89      	ldr	r3, [pc, #548]	; (8006e8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c68:	61bb      	str	r3, [r7, #24]
    break;
 8006c6a:	e104      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c6c:	4b88      	ldr	r3, [pc, #544]	; (8006e90 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006c6e:	61bb      	str	r3, [r7, #24]
    break;
 8006c70:	e101      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c72:	4b84      	ldr	r3, [pc, #528]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c7c:	4b81      	ldr	r3, [pc, #516]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c88:	4b7e      	ldr	r3, [pc, #504]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c92:	4b7c      	ldr	r3, [pc, #496]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80da 	beq.w	8006e6a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d05a      	beq.n	8006d72 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d302      	bcc.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x106>
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d078      	beq.n	8006db6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006cc4:	e099      	b.n	8006dfa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cc6:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d02d      	beq.n	8006d2e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cd2:	4b6c      	ldr	r3, [pc, #432]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfc:	4b61      	ldr	r3, [pc, #388]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d10:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d2c:	e087      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d38:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006e98 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d40:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d54:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d70:	e065      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006e9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d84:	4b3f      	ldr	r3, [pc, #252]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d98:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db4:	e043      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc8:	4b2e      	ldr	r3, [pc, #184]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ddc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df8:	e021      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e04:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006e9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0c:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e20:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e3e:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	0a5b      	lsrs	r3, r3, #9
 8006e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e48:	3301      	adds	r3, #1
 8006e4a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e62:	ee17 3a90 	vmov	r3, s15
 8006e66:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e68:	e005      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
    break;
 8006e6e:	e002      	b.n	8006e76 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e72:	61bb      	str	r3, [r7, #24]
    break;
 8006e74:	bf00      	nop
  }

  return sysclockfreq;
 8006e76:	69bb      	ldr	r3, [r7, #24]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3724      	adds	r7, #36	; 0x24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	58024400 	.word	0x58024400
 8006e88:	03d09000 	.word	0x03d09000
 8006e8c:	003d0900 	.word	0x003d0900
 8006e90:	017d7840 	.word	0x017d7840
 8006e94:	46000000 	.word	0x46000000
 8006e98:	4c742400 	.word	0x4c742400
 8006e9c:	4a742400 	.word	0x4a742400
 8006ea0:	4bbebc20 	.word	0x4bbebc20

08006ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eaa:	f7ff fe89 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006eae:	4601      	mov	r1, r0
 8006eb0:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	0a1b      	lsrs	r3, r3, #8
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ebc:	5cd3      	ldrb	r3, [r2, r3]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ec6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ed2:	5cd3      	ldrb	r3, [r2, r3]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ee0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ee2:	4a07      	ldr	r2, [pc, #28]	; (8006f00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <HAL_RCC_GetHCLKFreq+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	0800cd34 	.word	0x0800cd34
 8006efc:	24000024 	.word	0x24000024
 8006f00:	24000020 	.word	0x24000020

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f08:	f7ff ffcc 	bl	8006ea4 <HAL_RCC_GetHCLKFreq>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	0800cd34 	.word	0x0800cd34

08006f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f34:	f7ff ffb6 	bl	8006ea4 <HAL_RCC_GetHCLKFreq>
 8006f38:	4601      	mov	r1, r0
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f46:	5cd3      	ldrb	r3, [r2, r3]
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	58024400 	.word	0x58024400
 8006f58:	0800cd34 	.word	0x0800cd34

08006f5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f68:	2300      	movs	r3, #0
 8006f6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d03d      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f80:	d013      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f86:	d802      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006f8c:	e01f      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f92:	d013      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f98:	d01c      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006f9a:	e018      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9c:	4baf      	ldr	r3, [pc, #700]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4aae      	ldr	r2, [pc, #696]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fa8:	e015      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	2102      	movs	r1, #2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fd23 	bl	80089fc <RCCEx_PLL2_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fba:	e00c      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3324      	adds	r3, #36	; 0x24
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fdcc 	bl	8008b60 <RCCEx_PLL3_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fdc:	4b9f      	ldr	r3, [pc, #636]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe8:	499c      	ldr	r1, [pc, #624]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	650b      	str	r3, [r1, #80]	; 0x50
 8006fee:	e001      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d03d      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	2b04      	cmp	r3, #4
 8007006:	d826      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007025 	.word	0x08007025
 8007014:	08007033 	.word	0x08007033
 8007018:	08007045 	.word	0x08007045
 800701c:	0800705d 	.word	0x0800705d
 8007020:	0800705d 	.word	0x0800705d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007024:	4b8d      	ldr	r3, [pc, #564]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a8c      	ldr	r2, [pc, #560]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800702a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007030:	e015      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3304      	adds	r3, #4
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fcdf 	bl	80089fc <RCCEx_PLL2_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007042:	e00c      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fd88 	bl	8008b60 <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
      break;
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800705c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007064:	4b7d      	ldr	r3, [pc, #500]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	f023 0207 	bic.w	r2, r3, #7
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	497a      	ldr	r1, [pc, #488]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007072:	4313      	orrs	r3, r2
 8007074:	650b      	str	r3, [r1, #80]	; 0x50
 8007076:	e001      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007084:	2b00      	cmp	r3, #0
 8007086:	d03e      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	2b80      	cmp	r3, #128	; 0x80
 800708e:	d01c      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d804      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d00d      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800709c:	e01e      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800709e:	2bc0      	cmp	r3, #192	; 0xc0
 80070a0:	d01f      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a6:	d01e      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070a8:	e018      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070aa:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	4a6b      	ldr	r2, [pc, #428]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070b6:	e017      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fc9c 	bl	80089fc <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070c8:	e00e      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fd45 	bl	8008b60 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070da:	e005      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      break;
 80070e0:	e002      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80070e2:	bf00      	nop
 80070e4:	e000      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80070e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070ee:	4b5b      	ldr	r3, [pc, #364]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fa:	4958      	ldr	r1, [pc, #352]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007100:	e001      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710e:	2b00      	cmp	r3, #0
 8007110:	d044      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800711c:	d01f      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800711e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007122:	d805      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800712c:	d00e      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800712e:	e01f      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007130:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007134:	d01f      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800713a:	d01e      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800713c:	e018      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713e:	4b47      	ldr	r3, [pc, #284]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	4a46      	ldr	r2, [pc, #280]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800714a:	e017      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3304      	adds	r3, #4
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fc52 	bl	80089fc <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800715c:	e00e      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3324      	adds	r3, #36	; 0x24
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fcfb 	bl	8008b60 <RCCEx_PLL3_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800716e:	e005      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      break;
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800717a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007182:	4b36      	ldr	r3, [pc, #216]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007190:	4932      	ldr	r1, [pc, #200]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007192:	4313      	orrs	r3, r2
 8007194:	658b      	str	r3, [r1, #88]	; 0x58
 8007196:	e001      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d044      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b2:	d01f      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80071b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b8:	d805      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80071be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071c2:	d00e      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071c4:	e01f      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80071c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ca:	d01f      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80071cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071d0:	d01e      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071d2:	e018      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d4:	4b21      	ldr	r3, [pc, #132]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071e0:	e017      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	2100      	movs	r1, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 fc07 	bl	80089fc <RCCEx_PLL2_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071f2:	e00e      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3324      	adds	r3, #36	; 0x24
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 fcb0 	bl	8008b60 <RCCEx_PLL3_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007204:	e005      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
      break;
 800720a:	e002      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007218:	4b10      	ldr	r3, [pc, #64]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007226:	490d      	ldr	r1, [pc, #52]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007228:	4313      	orrs	r3, r2
 800722a:	658b      	str	r3, [r1, #88]	; 0x58
 800722c:	e001      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d035      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007242:	2b10      	cmp	r3, #16
 8007244:	d00c      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007246:	2b10      	cmp	r3, #16
 8007248:	d802      	bhi.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01b      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800724e:	e017      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d00c      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007254:	2b30      	cmp	r3, #48	; 0x30
 8007256:	d018      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007258:	e012      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007260:	4baf      	ldr	r3, [pc, #700]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	4aae      	ldr	r2, [pc, #696]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800726c:	e00e      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	2102      	movs	r1, #2
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fbc1 	bl	80089fc <RCCEx_PLL2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800727e:	e005      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800728a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007292:	4ba3      	ldr	r3, [pc, #652]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007296:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729e:	49a0      	ldr	r1, [pc, #640]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072a4:	e001      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d042      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072be:	d01f      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c4:	d805      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ce:	d00e      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x392>
 80072d0:	e01f      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80072d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072d6:	d01f      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d01e      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80072de:	e018      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e0:	4b8f      	ldr	r3, [pc, #572]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a8e      	ldr	r2, [pc, #568]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ec:	e017      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3304      	adds	r3, #4
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fb81 	bl	80089fc <RCCEx_PLL2_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072fe:	e00e      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fc2a 	bl	8008b60 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007310:	e005      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
      break;
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007318:	bf00      	nop
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800731c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007324:	4b7e      	ldr	r3, [pc, #504]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007330:	497b      	ldr	r1, [pc, #492]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007332:	4313      	orrs	r3, r2
 8007334:	650b      	str	r3, [r1, #80]	; 0x50
 8007336:	e001      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d042      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007350:	d01b      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007356:	d805      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d022      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800735c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007360:	d00a      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007362:	e01b      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007364:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007368:	d01d      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800736a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800736e:	d01c      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007370:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007374:	d01b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007376:	e011      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3304      	adds	r3, #4
 800737c:	2101      	movs	r1, #1
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fb3c 	bl	80089fc <RCCEx_PLL2_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007388:	e012      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3324      	adds	r3, #36	; 0x24
 800738e:	2101      	movs	r1, #1
 8007390:	4618      	mov	r0, r3
 8007392:	f001 fbe5 	bl	8008b60 <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800739a:	e009      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	e006      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073a2:	bf00      	nop
 80073a4:	e004      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073a6:	bf00      	nop
 80073a8:	e002      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073aa:	bf00      	nop
 80073ac:	e000      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073b6:	4b5a      	ldr	r3, [pc, #360]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c2:	4957      	ldr	r1, [pc, #348]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	650b      	str	r3, [r1, #80]	; 0x50
 80073c8:	e001      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d044      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e4:	d01b      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80073e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ea:	d805      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d022      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073f4:	d00a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80073f6:	e01b      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fc:	d01d      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007402:	d01c      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007408:	d01b      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800740a:	e011      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	2101      	movs	r1, #1
 8007412:	4618      	mov	r0, r3
 8007414:	f001 faf2 	bl	80089fc <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800741c:	e012      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2101      	movs	r1, #1
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fb9b 	bl	8008b60 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800742e:	e009      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	e006      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007436:	bf00      	nop
 8007438:	e004      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800743a:	bf00      	nop
 800743c:	e002      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800743e:	bf00      	nop
 8007440:	e000      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800744a:	4b35      	ldr	r3, [pc, #212]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007458:	4931      	ldr	r1, [pc, #196]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800745a:	4313      	orrs	r3, r2
 800745c:	658b      	str	r3, [r1, #88]	; 0x58
 800745e:	e001      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02d      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007478:	d005      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800747a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747e:	d009      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007484:	e00f      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007486:	4b26      	ldr	r3, [pc, #152]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a25      	ldr	r2, [pc, #148]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800748c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007492:	e00c      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	2101      	movs	r1, #1
 800749a:	4618      	mov	r0, r3
 800749c:	f001 faae 	bl	80089fc <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
      break;
 80074aa:	e000      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80074ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074b4:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c0:	4917      	ldr	r1, [pc, #92]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	650b      	str	r3, [r1, #80]	; 0x50
 80074c6:	e001      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d035      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d81b      	bhi.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80074e0:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007525 	.word	0x08007525
 80074ec:	080074f9 	.word	0x080074f9
 80074f0:	08007507 	.word	0x08007507
 80074f4:	08007525 	.word	0x08007525
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4a08      	ldr	r2, [pc, #32]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007504:	e00f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	2102      	movs	r1, #2
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fa75 	bl	80089fc <RCCEx_PLL2_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007516:	e006      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
      break;
 800751c:	e003      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
      break;
 8007524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800752c:	4bba      	ldr	r3, [pc, #744]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800752e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007530:	f023 0203 	bic.w	r2, r3, #3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007538:	49b7      	ldr	r1, [pc, #732]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800753a:	4313      	orrs	r3, r2
 800753c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800753e:	e001      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8086 	beq.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007552:	4bb2      	ldr	r3, [pc, #712]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4ab1      	ldr	r2, [pc, #708]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800755e:	f7fa fedb 	bl	8002318 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007564:	e009      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007566:	f7fa fed7 	bl	8002318 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b64      	cmp	r3, #100	; 0x64
 8007572:	d902      	bls.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	75fb      	strb	r3, [r7, #23]
        break;
 8007578:	e005      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800757a:	4ba8      	ldr	r3, [pc, #672]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0ef      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d166      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800758c:	4ba2      	ldr	r3, [pc, #648]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800758e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007596:	4053      	eors	r3, r2
 8007598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759c:	2b00      	cmp	r3, #0
 800759e:	d013      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075a0:	4b9d      	ldr	r3, [pc, #628]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075aa:	4b9b      	ldr	r3, [pc, #620]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a9a      	ldr	r2, [pc, #616]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075b6:	4b98      	ldr	r3, [pc, #608]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a97      	ldr	r2, [pc, #604]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075c2:	4a95      	ldr	r2, [pc, #596]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d2:	d115      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fa fea0 	bl	8002318 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075da:	e00b      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075dc:	f7fa fe9c 	bl	8002318 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d902      	bls.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	75fb      	strb	r3, [r7, #23]
            break;
 80075f2:	e005      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075f4:	4b88      	ldr	r3, [pc, #544]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0ed      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d126      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d10d      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007616:	4b80      	ldr	r3, [pc, #512]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007624:	0919      	lsrs	r1, r3, #4
 8007626:	4b7e      	ldr	r3, [pc, #504]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007628:	400b      	ands	r3, r1
 800762a:	497b      	ldr	r1, [pc, #492]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800762c:	4313      	orrs	r3, r2
 800762e:	610b      	str	r3, [r1, #16]
 8007630:	e005      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007632:	4b79      	ldr	r3, [pc, #484]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	4a78      	ldr	r2, [pc, #480]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800763c:	6113      	str	r3, [r2, #16]
 800763e:	4b76      	ldr	r3, [pc, #472]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007640:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764c:	4972      	ldr	r1, [pc, #456]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800764e:	4313      	orrs	r3, r2
 8007650:	670b      	str	r3, [r1, #112]	; 0x70
 8007652:	e004      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	75bb      	strb	r3, [r7, #22]
 8007658:	e001      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d07d      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800766e:	2b28      	cmp	r3, #40	; 0x28
 8007670:	d866      	bhi.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007747 	.word	0x08007747
 800767c:	08007741 	.word	0x08007741
 8007680:	08007741 	.word	0x08007741
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007741 	.word	0x08007741
 8007690:	08007741 	.word	0x08007741
 8007694:	08007741 	.word	0x08007741
 8007698:	0800771d 	.word	0x0800771d
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007741 	.word	0x08007741
 80076b0:	08007741 	.word	0x08007741
 80076b4:	08007741 	.word	0x08007741
 80076b8:	0800772f 	.word	0x0800772f
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007741 	.word	0x08007741
 80076c4:	08007741 	.word	0x08007741
 80076c8:	08007741 	.word	0x08007741
 80076cc:	08007741 	.word	0x08007741
 80076d0:	08007741 	.word	0x08007741
 80076d4:	08007741 	.word	0x08007741
 80076d8:	08007747 	.word	0x08007747
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007741 	.word	0x08007741
 80076e4:	08007741 	.word	0x08007741
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007741 	.word	0x08007741
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007741 	.word	0x08007741
 8007704:	08007741 	.word	0x08007741
 8007708:	08007741 	.word	0x08007741
 800770c:	08007741 	.word	0x08007741
 8007710:	08007741 	.word	0x08007741
 8007714:	08007741 	.word	0x08007741
 8007718:	08007747 	.word	0x08007747
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	2101      	movs	r1, #1
 8007722:	4618      	mov	r0, r3
 8007724:	f001 f96a 	bl	80089fc <RCCEx_PLL2_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800772c:	e00c      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3324      	adds	r3, #36	; 0x24
 8007732:	2101      	movs	r1, #1
 8007734:	4618      	mov	r0, r3
 8007736:	f001 fa13 	bl	8008b60 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800773e:	e003      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
      break;
 8007744:	e000      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800774e:	4b32      	ldr	r3, [pc, #200]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775a:	492f      	ldr	r1, [pc, #188]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	654b      	str	r3, [r1, #84]	; 0x54
 8007760:	e001      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d037      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	2b05      	cmp	r3, #5
 8007778:	d820      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077c3 	.word	0x080077c3
 8007784:	08007799 	.word	0x08007799
 8007788:	080077ab 	.word	0x080077ab
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077c3 	.word	0x080077c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	2101      	movs	r1, #1
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 f92c 	bl	80089fc <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077a8:	e00c      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3324      	adds	r3, #36	; 0x24
 80077ae:	2101      	movs	r1, #1
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 f9d5 	bl	8008b60 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077ba:	e003      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e000      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80077c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f023 0207 	bic.w	r2, r3, #7
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	4910      	ldr	r1, [pc, #64]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	654b      	str	r3, [r1, #84]	; 0x54
 80077dc:	e001      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d040      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d827      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	0800784f 	.word	0x0800784f
 8007804:	08007825 	.word	0x08007825
 8007808:	08007837 	.word	0x08007837
 800780c:	0800784f 	.word	0x0800784f
 8007810:	0800784f 	.word	0x0800784f
 8007814:	0800784f 	.word	0x0800784f
 8007818:	58024400 	.word	0x58024400
 800781c:	58024800 	.word	0x58024800
 8007820:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f8e6 	bl	80089fc <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007834:	e00c      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2101      	movs	r1, #1
 800783c:	4618      	mov	r0, r3
 800783e:	f001 f98f 	bl	8008b60 <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e000      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800784e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007856:	4bb2      	ldr	r3, [pc, #712]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f023 0207 	bic.w	r2, r3, #7
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	49ae      	ldr	r1, [pc, #696]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007866:	4313      	orrs	r3, r2
 8007868:	658b      	str	r3, [r1, #88]	; 0x58
 800786a:	e001      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d044      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007886:	d01b      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800788c:	d805      	bhi.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d022      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007896:	d00a      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007898:	e01b      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d01d      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80078a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078a4:	d01c      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80078a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078aa:	d01b      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80078ac:	e011      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 f8a1 	bl	80089fc <RCCEx_PLL2_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078be:	e012      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	2102      	movs	r1, #2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 f94a 	bl	8008b60 <RCCEx_PLL3_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078d0:	e009      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
      break;
 80078d6:	e006      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ec:	4b8c      	ldr	r3, [pc, #560]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fa:	4989      	ldr	r1, [pc, #548]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007900:	e001      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d044      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791c:	d01b      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800791e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007922:	d805      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d022      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d00a      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800792e:	e01b      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007934:	d01d      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007936:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800793a:	d01c      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800793c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007940:	d01b      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007942:	e011      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	2100      	movs	r1, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f001 f856 	bl	80089fc <RCCEx_PLL2_Config>
 8007950:	4603      	mov	r3, r0
 8007952:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007954:	e012      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3324      	adds	r3, #36	; 0x24
 800795a:	2102      	movs	r1, #2
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8ff 	bl	8008b60 <RCCEx_PLL3_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007966:	e009      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
      break;
 800796c:	e006      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800796e:	bf00      	nop
 8007970:	e004      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800797a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007982:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007990:	4963      	ldr	r1, [pc, #396]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	658b      	str	r3, [r1, #88]	; 0x58
 8007996:	e001      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d044      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b2:	d01b      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80079b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b8:	d805      	bhi.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d022      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80079c4:	e01b      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80079c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ca:	d01d      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80079cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079d0:	d01c      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80079d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079d6:	d01b      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80079d8:	e011      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 f80b 	bl	80089fc <RCCEx_PLL2_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079ea:	e012      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f8b4 	bl	8008b60 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079fc:	e009      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
      break;
 8007a02:	e006      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a04:	bf00      	nop
 8007a06:	e004      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a08:	bf00      	nop
 8007a0a:	e002      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a0c:	bf00      	nop
 8007a0e:	e000      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a18:	4b41      	ldr	r3, [pc, #260]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a26:	493e      	ldr	r1, [pc, #248]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a2c:	e001      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01a      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3324      	adds	r3, #36	; 0x24
 8007a4e:	2102      	movs	r1, #2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 f885 	bl	8008b60 <RCCEx_PLL3_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a60:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a6e:	492c      	ldr	r1, [pc, #176]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8a:	d10a      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3324      	adds	r3, #36	; 0x24
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f864 	bl	8008b60 <RCCEx_PLL3_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007aa2:	4b1f      	ldr	r3, [pc, #124]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab0:	491b      	ldr	r1, [pc, #108]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d032      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d00d      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ad2:	d016      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d111      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 ff8c 	bl	80089fc <RCCEx_PLL2_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ae8:	e00c      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3324      	adds	r3, #36	; 0x24
 8007aee:	2102      	movs	r1, #2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f835 	bl	8008b60 <RCCEx_PLL3_Config>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007afa:	e003      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
      break;
 8007b00:	e000      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b18:	4901      	ldr	r1, [pc, #4]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b1e:	e003      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02f      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b3e:	d00c      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b44:	d015      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b4a:	d10f      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4c:	4b71      	ldr	r3, [pc, #452]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a70      	ldr	r2, [pc, #448]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b58:	e00c      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3324      	adds	r3, #36	; 0x24
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fffd 	bl	8008b60 <RCCEx_PLL3_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b6a:	e003      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b7a:	4b66      	ldr	r3, [pc, #408]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b88:	4962      	ldr	r1, [pc, #392]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	654b      	str	r3, [r1, #84]	; 0x54
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d029      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bac:	d007      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007bae:	e00f      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb0:	4b58      	ldr	r3, [pc, #352]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a57      	ldr	r2, [pc, #348]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bbc:	e00b      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 ff19 	bl	80089fc <RCCEx_PLL2_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bce:	e002      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d109      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bdc:	4b4d      	ldr	r3, [pc, #308]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be8:	494a      	ldr	r1, [pc, #296]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bee:	e001      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3324      	adds	r3, #36	; 0x24
 8007c04:	2102      	movs	r1, #2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ffaa 	bl	8008b60 <RCCEx_PLL3_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02f      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2a:	d00c      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c30:	d802      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007c36:	e00d      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3c:	d00f      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c42:	d00e      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007c44:	e006      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c46:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	4a32      	ldr	r2, [pc, #200]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c52:	e007      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e004      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c6a:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c76:	4927      	ldr	r1, [pc, #156]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8007c7c:	e001      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	491e      	ldr	r1, [pc, #120]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cac:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb8:	4916      	ldr	r1, [pc, #88]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00d      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cd4:	6113      	str	r3, [r2, #16]
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ce0:	490c      	ldr	r1, [pc, #48]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da08      	bge.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfa:	4906      	ldr	r1, [pc, #24]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007d00:	7dbb      	ldrb	r3, [r7, #22]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	58024400 	.word	0x58024400

08007d18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b090      	sub	sp, #64	; 0x40
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	d150      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007d28:	4ba1      	ldr	r3, [pc, #644]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d844      	bhi.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d55 	.word	0x08007d55
 8007d44:	08007d65 	.word	0x08007d65
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	08007dbd 	.word	0x08007dbd
 8007d50:	08007d85 	.word	0x08007d85
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fd03 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d62:	e241      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d64:	f107 0318 	add.w	r3, r7, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fa63 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d72:	e239      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d74:	f107 030c 	add.w	r3, r7, #12
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fba7 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d82:	e231      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d84:	4b8a      	ldr	r3, [pc, #552]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d94:	4b87      	ldr	r3, [pc, #540]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d98:	e226      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da0:	d102      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007da2:	4b85      	ldr	r3, [pc, #532]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da6:	e21f      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dae:	d102      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007db0:	4b82      	ldr	r3, [pc, #520]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db4:	e218      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dba:	e215      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dbc:	4b80      	ldr	r3, [pc, #512]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc0:	e212      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc6:	bf00      	nop
 8007dc8:	e20e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd0:	d14f      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007dd2:	4b77      	ldr	r3, [pc, #476]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	2b80      	cmp	r3, #128	; 0x80
 8007de0:	d01c      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007de2:	2b80      	cmp	r3, #128	; 0x80
 8007de4:	d804      	bhi.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d008      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d00e      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007dee:	e03c      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007df0:	2bc0      	cmp	r3, #192	; 0xc0
 8007df2:	d037      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df8:	d018      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007dfa:	e036      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fcaf 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	e1ed      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0c:	f107 0318 	add.w	r3, r7, #24
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fa0f 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1a:	e1e5      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fb53 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2a:	e1dd      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e2c:	4b60      	ldr	r3, [pc, #384]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e3c:	4b5d      	ldr	r3, [pc, #372]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e40:	e1d2      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e48:	d102      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007e4a:	4b5b      	ldr	r3, [pc, #364]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4e:	e1cb      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e56:	d102      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007e58:	4b58      	ldr	r3, [pc, #352]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5c:	e1c4      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e62:	e1c1      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e64:	4b56      	ldr	r3, [pc, #344]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e68:	e1be      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6e:	bf00      	nop
 8007e70:	e1ba      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e78:	d153      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007e7a:	4b4d      	ldr	r3, [pc, #308]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8a:	d01f      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e90:	d805      	bhi.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e9a:	d00f      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007e9c:	e03d      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007e9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ea2:	d037      	beq.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ea8:	d018      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007eaa:	e036      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fc57 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	e195      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebc:	f107 0318 	add.w	r3, r7, #24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f9b7 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eca:	e18d      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fafb 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eda:	e185      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007edc:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007eec:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ef0:	e17a      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef8:	d102      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007efa:	4b2f      	ldr	r3, [pc, #188]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007efe:	e173      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007f08:	4b2c      	ldr	r3, [pc, #176]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0c:	e16c      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f12:	e169      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f14:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f18:	e166      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1e:	bf00      	nop
 8007f20:	e162      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f28:	d15d      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007f2a:	4b21      	ldr	r3, [pc, #132]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f3a:	d01f      	beq.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f40:	d805      	bhi.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f4a:	d00f      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007f4c:	e047      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f52:	d041      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f58:	d018      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007f5a:	e040      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fbff 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e13d      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6c:	f107 0318 	add.w	r3, r7, #24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f95f 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7a:	e135      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 faa3 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	e12d      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fa0:	e122      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fae:	e11b      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	03d09000 	.word	0x03d09000
 8007fb8:	003d0900 	.word	0x003d0900
 8007fbc:	017d7840 	.word	0x017d7840
 8007fc0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fca:	d102      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007fcc:	4b89      	ldr	r3, [pc, #548]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd0:	e10a      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd6:	e107      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fd8:	4b87      	ldr	r3, [pc, #540]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fdc:	e104      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe2:	bf00      	nop
 8007fe4:	e100      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fec:	d153      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007fee:	4b83      	ldr	r3, [pc, #524]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ff6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffe:	d01f      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008004:	d805      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800e:	d00f      	beq.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008010:	e03d      	b.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008012:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008016:	d037      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800801c:	d018      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800801e:	e036      	b.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fb9d 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800802e:	e0db      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008030:	f107 0318 	add.w	r3, r7, #24
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8fd 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800803e:	e0d3      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fa41 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800804e:	e0cb      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008050:	4b6a      	ldr	r3, [pc, #424]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008058:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008060:	4b67      	ldr	r3, [pc, #412]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008064:	e0c0      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800806e:	4b65      	ldr	r3, [pc, #404]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008072:	e0b9      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800807c:	4b5d      	ldr	r3, [pc, #372]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008080:	e0b2      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008086:	e0af      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808c:	e0ac      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008092:	bf00      	nop
 8008094:	e0a8      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800809c:	d13d      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800809e:	4b57      	ldr	r3, [pc, #348]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d00c      	beq.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80080b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b4:	d011      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d12b      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f8b8 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c8:	e08e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f9fc 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d8:	e086      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080da:	4b48      	ldr	r3, [pc, #288]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080ea:	4b45      	ldr	r3, [pc, #276]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080ee:	e07b      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f6:	d102      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80080f8:	4b42      	ldr	r3, [pc, #264]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fc:	e074      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008104:	d102      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008106:	4b3b      	ldr	r3, [pc, #236]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810a:	e06d      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008110:	e06a      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008116:	bf00      	nop
 8008118:	e066      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008120:	d11f      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008122:	4b36      	ldr	r3, [pc, #216]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008136:	d008      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008138:	e00f      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800813a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fb10 	bl	8008764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008148:	e04e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814a:	f107 0318 	add.w	r3, r7, #24
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f870 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008158:	e046      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815e:	bf00      	nop
 8008160:	e042      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008168:	d13c      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800816a:	4b24      	ldr	r3, [pc, #144]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800817a:	d01e      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800817c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008180:	d805      	bhi.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00d      	beq.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800818a:	d00e      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800818c:	e026      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d01d      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008198:	d01d      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800819a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800819e:	d014      	beq.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80081a0:	e01c      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80081a2:	f000 f831 	bl	8008208 <HAL_RCCEx_GetD3PCLK1Freq>
 80081a6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80081a8:	e01e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0318 	add.w	r3, r7, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f840 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b8:	e016      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f984 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c8:	e00e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ce:	e00b      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d4:	e008      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081da:	e005      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e0:	bf00      	nop
 80081e2:	e001      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3740      	adds	r7, #64	; 0x40
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	017d7840 	.word	0x017d7840
 80081f8:	00bb8000 	.word	0x00bb8000
 80081fc:	58024400 	.word	0x58024400
 8008200:	03d09000 	.word	0x03d09000
 8008204:	003d0900 	.word	0x003d0900

08008208 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800820c:	f7fe fe4a 	bl	8006ea4 <HAL_RCC_GetHCLKFreq>
 8008210:	4601      	mov	r1, r0
 8008212:	4b06      	ldr	r3, [pc, #24]	; (800822c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	091b      	lsrs	r3, r3, #4
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4a04      	ldr	r2, [pc, #16]	; (8008230 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800821e:	5cd3      	ldrb	r3, [r2, r3]
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008228:	4618      	mov	r0, r3
 800822a:	bd80      	pop	{r7, pc}
 800822c:	58024400 	.word	0x58024400
 8008230:	0800cd34 	.word	0x0800cd34

08008234 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008234:	b480      	push	{r7}
 8008236:	b089      	sub	sp, #36	; 0x24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800823c:	4b9d      	ldr	r3, [pc, #628]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008246:	4b9b      	ldr	r3, [pc, #620]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	0b1b      	lsrs	r3, r3, #12
 800824c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008250:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008252:	4b98      	ldr	r3, [pc, #608]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800825e:	4b95      	ldr	r3, [pc, #596]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	fb02 f303 	mul.w	r3, r2, r3
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 810a 	beq.w	8008496 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d05a      	beq.n	800833e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008288:	2b01      	cmp	r3, #1
 800828a:	d302      	bcc.n	8008292 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800828c:	2b02      	cmp	r3, #2
 800828e:	d078      	beq.n	8008382 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008290:	e099      	b.n	80083c6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008292:	4b88      	ldr	r3, [pc, #544]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d02d      	beq.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800829e:	4b85      	ldr	r3, [pc, #532]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	08db      	lsrs	r3, r3, #3
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	4a83      	ldr	r2, [pc, #524]	; (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80082aa:	fa22 f303 	lsr.w	r3, r2, r3
 80082ae:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c8:	4b7a      	ldr	r3, [pc, #488]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082f8:	e087      	b.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	ee07 3a90 	vmov	s15, r3
 8008300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008304:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830c:	4b69      	ldr	r3, [pc, #420]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008320:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833c:	e065      	b.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008348:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800834c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008350:	4b58      	ldr	r3, [pc, #352]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008360:	ed97 6a03 	vldr	s12, [r7, #12]
 8008364:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008380:	e043      	b.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008394:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c4:	e021      	b.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008408:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800840a:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	0a5b      	lsrs	r3, r3, #9
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008424:	edd7 6a07 	vldr	s13, [r7, #28]
 8008428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008430:	ee17 2a90 	vmov	r2, s15
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800844e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008452:	edd7 6a07 	vldr	s13, [r7, #28]
 8008456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800845e:	ee17 2a90 	vmov	r2, s15
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	0e1b      	lsrs	r3, r3, #24
 800846c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008480:	edd7 6a07 	vldr	s13, [r7, #28]
 8008484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848c:	ee17 2a90 	vmov	r2, s15
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008494:	e008      	b.n	80084a8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	609a      	str	r2, [r3, #8]
}
 80084a8:	bf00      	nop
 80084aa:	3724      	adds	r7, #36	; 0x24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	58024400 	.word	0x58024400
 80084b8:	03d09000 	.word	0x03d09000
 80084bc:	46000000 	.word	0x46000000
 80084c0:	4c742400 	.word	0x4c742400
 80084c4:	4a742400 	.word	0x4a742400
 80084c8:	4bbebc20 	.word	0x4bbebc20

080084cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b089      	sub	sp, #36	; 0x24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084d4:	4b9d      	ldr	r3, [pc, #628]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80084de:	4b9b      	ldr	r3, [pc, #620]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	0d1b      	lsrs	r3, r3, #20
 80084e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084ea:	4b98      	ldr	r3, [pc, #608]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084f6:	4b95      	ldr	r3, [pc, #596]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	08db      	lsrs	r3, r3, #3
 80084fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 810a 	beq.w	800872e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d05a      	beq.n	80085d6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d302      	bcc.n	800852a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008524:	2b02      	cmp	r3, #2
 8008526:	d078      	beq.n	800861a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008528:	e099      	b.n	800865e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800852a:	4b88      	ldr	r3, [pc, #544]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d02d      	beq.n	8008592 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008536:	4b85      	ldr	r3, [pc, #532]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	4a83      	ldr	r2, [pc, #524]	; (8008750 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008542:	fa22 f303 	lsr.w	r3, r2, r3
 8008546:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008560:	4b7a      	ldr	r3, [pc, #488]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	ed97 6a03 	vldr	s12, [r7, #12]
 8008574:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008590:	e087      	b.n	80086a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b69      	ldr	r3, [pc, #420]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d4:	e065      	b.n	80086a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800875c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80085e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e8:	4b58      	ldr	r3, [pc, #352]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008618:	e043      	b.n	80086a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862c:	4b47      	ldr	r3, [pc, #284]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008640:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865c:	e021      	b.n	80086a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800875c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800866c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008670:	4b36      	ldr	r3, [pc, #216]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008680:	ed97 6a03 	vldr	s12, [r7, #12]
 8008684:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086a0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	0a5b      	lsrs	r3, r3, #9
 80086a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c8:	ee17 2a90 	vmov	r2, s15
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80086d0:	4b1e      	ldr	r3, [pc, #120]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f6:	ee17 2a90 	vmov	r2, s15
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	0e1b      	lsrs	r3, r3, #24
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008718:	edd7 6a07 	vldr	s13, [r7, #28]
 800871c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008724:	ee17 2a90 	vmov	r2, s15
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800872c:	e008      	b.n	8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	3724      	adds	r7, #36	; 0x24
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	58024400 	.word	0x58024400
 8008750:	03d09000 	.word	0x03d09000
 8008754:	46000000 	.word	0x46000000
 8008758:	4c742400 	.word	0x4c742400
 800875c:	4a742400 	.word	0x4a742400
 8008760:	4bbebc20 	.word	0x4bbebc20

08008764 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008764:	b480      	push	{r7}
 8008766:	b089      	sub	sp, #36	; 0x24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800876c:	4b9d      	ldr	r3, [pc, #628]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008776:	4b9b      	ldr	r3, [pc, #620]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	091b      	lsrs	r3, r3, #4
 800877c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008780:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008782:	4b98      	ldr	r3, [pc, #608]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800878c:	4b95      	ldr	r3, [pc, #596]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800878e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 810a 	beq.w	80089c4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d05a      	beq.n	800886c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d302      	bcc.n	80087c0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d078      	beq.n	80088b0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80087be:	e099      	b.n	80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087c0:	4b88      	ldr	r3, [pc, #544]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0320 	and.w	r3, r3, #32
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02d      	beq.n	8008828 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087cc:	4b85      	ldr	r3, [pc, #532]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	08db      	lsrs	r3, r3, #3
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	4a84      	ldr	r2, [pc, #528]	; (80089e8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
 80087dc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b7b      	ldr	r3, [pc, #492]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a03 	vldr	s12, [r7, #12]
 800880a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80089ec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008826:	e087      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80089f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883a:	4b6a      	ldr	r3, [pc, #424]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884a:	ed97 6a03 	vldr	s12, [r7, #12]
 800884e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80089ec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800886a:	e065      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80089f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800887a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887e:	4b59      	ldr	r3, [pc, #356]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008892:	eddf 5a56 	vldr	s11, [pc, #344]	; 80089ec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ae:	e043      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80089f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c2:	4b48      	ldr	r3, [pc, #288]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80089ec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80088da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f2:	e021      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80089f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008906:	4b37      	ldr	r3, [pc, #220]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008916:	ed97 6a03 	vldr	s12, [r7, #12]
 800891a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80089ec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800891e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008936:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008938:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	0a5b      	lsrs	r3, r3, #9
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800894e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008952:	edd7 6a07 	vldr	s13, [r7, #28]
 8008956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895e:	ee17 2a90 	vmov	r2, s15
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008966:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800897c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008980:	edd7 6a07 	vldr	s13, [r7, #28]
 8008984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800898c:	ee17 2a90 	vmov	r2, s15
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008994:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	0e1b      	lsrs	r3, r3, #24
 800899a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80089b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ba:	ee17 2a90 	vmov	r2, s15
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80089c2:	e008      	b.n	80089d6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	609a      	str	r2, [r3, #8]
}
 80089d6:	bf00      	nop
 80089d8:	3724      	adds	r7, #36	; 0x24
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
 80089e8:	03d09000 	.word	0x03d09000
 80089ec:	46000000 	.word	0x46000000
 80089f0:	4c742400 	.word	0x4c742400
 80089f4:	4a742400 	.word	0x4a742400
 80089f8:	4bbebc20 	.word	0x4bbebc20

080089fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a0a:	4b53      	ldr	r3, [pc, #332]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d101      	bne.n	8008a1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e099      	b.n	8008b4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a1a:	4b4f      	ldr	r3, [pc, #316]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a4e      	ldr	r2, [pc, #312]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a26:	f7f9 fc77 	bl	8002318 <HAL_GetTick>
 8008a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a2c:	e008      	b.n	8008a40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a2e:	f7f9 fc73 	bl	8002318 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d901      	bls.n	8008a40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e086      	b.n	8008b4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a40:	4b45      	ldr	r3, [pc, #276]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f0      	bne.n	8008a2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a4c:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	031b      	lsls	r3, r3, #12
 8008a5a:	493f      	ldr	r1, [pc, #252]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	628b      	str	r3, [r1, #40]	; 0x28
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	025b      	lsls	r3, r3, #9
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	041b      	lsls	r3, r3, #16
 8008a7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a90:	4931      	ldr	r1, [pc, #196]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a96:	4b30      	ldr	r3, [pc, #192]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	492d      	ldr	r1, [pc, #180]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008aa8:	4b2b      	ldr	r3, [pc, #172]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f023 0220 	bic.w	r2, r3, #32
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	4928      	ldr	r1, [pc, #160]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008aba:	4b27      	ldr	r3, [pc, #156]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	4a26      	ldr	r2, [pc, #152]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	f023 0310 	bic.w	r3, r3, #16
 8008ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ac6:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <RCCEx_PLL2_Config+0x160>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	69d2      	ldr	r2, [r2, #28]
 8008ad2:	00d2      	lsls	r2, r2, #3
 8008ad4:	4920      	ldr	r1, [pc, #128]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ada:	4b1f      	ldr	r3, [pc, #124]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	f043 0310 	orr.w	r3, r3, #16
 8008ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008af2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008af8:	e00f      	b.n	8008b1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d106      	bne.n	8008b0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b00:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b0c:	e005      	b.n	8008b1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b0e:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	4a11      	ldr	r2, [pc, #68]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b1a:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a0e      	ldr	r2, [pc, #56]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b26:	f7f9 fbf7 	bl	8002318 <HAL_GetTick>
 8008b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b2c:	e008      	b.n	8008b40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b2e:	f7f9 fbf3 	bl	8002318 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d901      	bls.n	8008b40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e006      	b.n	8008b4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <RCCEx_PLL2_Config+0x15c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0f0      	beq.n	8008b2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	58024400 	.word	0x58024400
 8008b5c:	ffff0007 	.word	0xffff0007

08008b60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b6e:	4b53      	ldr	r3, [pc, #332]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d101      	bne.n	8008b7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e099      	b.n	8008cb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b7e:	4b4f      	ldr	r3, [pc, #316]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a4e      	ldr	r2, [pc, #312]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8a:	f7f9 fbc5 	bl	8002318 <HAL_GetTick>
 8008b8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b90:	e008      	b.n	8008ba4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b92:	f7f9 fbc1 	bl	8002318 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e086      	b.n	8008cb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ba4:	4b45      	ldr	r3, [pc, #276]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f0      	bne.n	8008b92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bb0:	4b42      	ldr	r3, [pc, #264]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	051b      	lsls	r3, r3, #20
 8008bbe:	493f      	ldr	r1, [pc, #252]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	628b      	str	r3, [r1, #40]	; 0x28
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	025b      	lsls	r3, r3, #9
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	061b      	lsls	r3, r3, #24
 8008bf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bf4:	4931      	ldr	r1, [pc, #196]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008bfa:	4b30      	ldr	r3, [pc, #192]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	492d      	ldr	r1, [pc, #180]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c0c:	4b2b      	ldr	r3, [pc, #172]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	4928      	ldr	r1, [pc, #160]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c1e:	4b27      	ldr	r3, [pc, #156]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	4a26      	ldr	r2, [pc, #152]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c2e:	4b24      	ldr	r3, [pc, #144]	; (8008cc0 <RCCEx_PLL3_Config+0x160>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	69d2      	ldr	r2, [r2, #28]
 8008c36:	00d2      	lsls	r2, r2, #3
 8008c38:	4920      	ldr	r1, [pc, #128]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c3e:	4b1f      	ldr	r3, [pc, #124]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c50:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c5c:	e00f      	b.n	8008c7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d106      	bne.n	8008c72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c64:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	4a14      	ldr	r2, [pc, #80]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c70:	e005      	b.n	8008c7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c72:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	4a11      	ldr	r2, [pc, #68]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a0e      	ldr	r2, [pc, #56]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8a:	f7f9 fb45 	bl	8002318 <HAL_GetTick>
 8008c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c90:	e008      	b.n	8008ca4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c92:	f7f9 fb41 	bl	8002318 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e006      	b.n	8008cb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <RCCEx_PLL3_Config+0x15c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	ffff0007 	.word	0xffff0007

08008cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e01d      	b.n	8008d12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f8 ff22 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f000 fa4c 	bl	80091a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <HAL_TIM_Base_Start_IT+0x50>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b06      	cmp	r3, #6
 8008d44:	d00b      	beq.n	8008d5e <HAL_TIM_Base_Start_IT+0x42>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d4c:	d007      	beq.n	8008d5e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	00010007 	.word	0x00010007

08008d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d122      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d11b      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0202 	mvn.w	r2, #2
 8008d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9d6 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008db8:	e005      	b.n	8008dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f9c8 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9d9 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d122      	bne.n	8008e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d11b      	bne.n	8008e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0204 	mvn.w	r2, #4
 8008df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2202      	movs	r2, #2
 8008df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f9ac 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008e0c:	e005      	b.n	8008e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f99e 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9af 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d122      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d11b      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0208 	mvn.w	r2, #8
 8008e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f982 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008e60:	e005      	b.n	8008e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f974 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f985 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d122      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b10      	cmp	r3, #16
 8008e8e:	d11b      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0210 	mvn.w	r2, #16
 8008e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f958 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f94a 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f95b 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10e      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d107      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0201 	mvn.w	r2, #1
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f7 fdd2 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efe:	2b80      	cmp	r3, #128	; 0x80
 8008f00:	d10e      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d107      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fb0a 	bl	8009534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2e:	d10e      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d107      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fafd 	bl	8009548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b40      	cmp	r3, #64	; 0x40
 8008f5a:	d10e      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d107      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f909 	bl	800918c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d10e      	bne.n	8008fa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d107      	bne.n	8008fa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f06f 0220 	mvn.w	r2, #32
 8008f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fabd 	bl	8009520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_TIM_ConfigClockSource+0x18>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e0b7      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x188>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4b57      	ldr	r3, [pc, #348]	; (8009140 <HAL_TIM_ConfigClockSource+0x190>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b70      	cmp	r3, #112	; 0x70
 8008ffe:	d02e      	beq.n	800905e <HAL_TIM_ConfigClockSource+0xae>
 8009000:	2b70      	cmp	r3, #112	; 0x70
 8009002:	d812      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x7a>
 8009004:	2b30      	cmp	r3, #48	; 0x30
 8009006:	f000 8084 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x162>
 800900a:	2b30      	cmp	r3, #48	; 0x30
 800900c:	d806      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x6c>
 800900e:	2b10      	cmp	r3, #16
 8009010:	d07f      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009012:	2b20      	cmp	r3, #32
 8009014:	d07d      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d07b      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800901a:	e084      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800901c:	2b50      	cmp	r3, #80	; 0x50
 800901e:	d048      	beq.n	80090b2 <HAL_TIM_ConfigClockSource+0x102>
 8009020:	2b60      	cmp	r3, #96	; 0x60
 8009022:	d056      	beq.n	80090d2 <HAL_TIM_ConfigClockSource+0x122>
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d064      	beq.n	80090f2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009028:	e07d      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800902a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800902e:	d070      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009030:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009034:	d809      	bhi.n	800904a <HAL_TIM_ConfigClockSource+0x9a>
 8009036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903a:	d027      	beq.n	800908c <HAL_TIM_ConfigClockSource+0xdc>
 800903c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009040:	d067      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	d06d      	beq.n	8009124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009048:	e06d      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800904a:	4a3e      	ldr	r2, [pc, #248]	; (8009144 <HAL_TIM_ConfigClockSource+0x194>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d060      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009050:	4a3d      	ldr	r2, [pc, #244]	; (8009148 <HAL_TIM_ConfigClockSource+0x198>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d05d      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
 8009056:	4a3d      	ldr	r2, [pc, #244]	; (800914c <HAL_TIM_ConfigClockSource+0x19c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d05a      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800905c:	e063      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6899      	ldr	r1, [r3, #8]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f000 f9af 	bl	80093d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009080:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	609a      	str	r2, [r3, #8]
      break;
 800908a:	e04c      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6899      	ldr	r1, [r3, #8]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f000 f998 	bl	80093d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ae:	609a      	str	r2, [r3, #8]
      break;
 80090b0:	e039      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	6859      	ldr	r1, [r3, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	461a      	mov	r2, r3
 80090c0:	f000 f908 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2150      	movs	r1, #80	; 0x50
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f962 	bl	8009394 <TIM_ITRx_SetConfig>
      break;
 80090d0:	e029      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6859      	ldr	r1, [r3, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	461a      	mov	r2, r3
 80090e0:	f000 f927 	bl	8009332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2160      	movs	r1, #96	; 0x60
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f952 	bl	8009394 <TIM_ITRx_SetConfig>
      break;
 80090f0:	e019      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6859      	ldr	r1, [r3, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	461a      	mov	r2, r3
 8009100:	f000 f8e8 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2140      	movs	r1, #64	; 0x40
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f942 	bl	8009394 <TIM_ITRx_SetConfig>
      break;
 8009110:	e009      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f000 f939 	bl	8009394 <TIM_ITRx_SetConfig>
      break;
 8009122:	e000      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	ffceff88 	.word	0xffceff88
 8009144:	00100030 	.word	0x00100030
 8009148:	00100040 	.word	0x00100040
 800914c:	00100020 	.word	0x00100020

08009150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a40      	ldr	r2, [pc, #256]	; (80092b4 <TIM_Base_SetConfig+0x114>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d013      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d00f      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a3d      	ldr	r2, [pc, #244]	; (80092b8 <TIM_Base_SetConfig+0x118>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a3c      	ldr	r2, [pc, #240]	; (80092bc <TIM_Base_SetConfig+0x11c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d007      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a3b      	ldr	r2, [pc, #236]	; (80092c0 <TIM_Base_SetConfig+0x120>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a3a      	ldr	r2, [pc, #232]	; (80092c4 <TIM_Base_SetConfig+0x124>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d108      	bne.n	80091f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a2f      	ldr	r2, [pc, #188]	; (80092b4 <TIM_Base_SetConfig+0x114>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d01f      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009200:	d01b      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a2c      	ldr	r2, [pc, #176]	; (80092b8 <TIM_Base_SetConfig+0x118>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d017      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a2b      	ldr	r2, [pc, #172]	; (80092bc <TIM_Base_SetConfig+0x11c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a2a      	ldr	r2, [pc, #168]	; (80092c0 <TIM_Base_SetConfig+0x120>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a29      	ldr	r2, [pc, #164]	; (80092c4 <TIM_Base_SetConfig+0x124>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a28      	ldr	r2, [pc, #160]	; (80092c8 <TIM_Base_SetConfig+0x128>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a27      	ldr	r2, [pc, #156]	; (80092cc <TIM_Base_SetConfig+0x12c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a26      	ldr	r2, [pc, #152]	; (80092d0 <TIM_Base_SetConfig+0x130>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d108      	bne.n	800924c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <TIM_Base_SetConfig+0x114>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00f      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a12      	ldr	r2, [pc, #72]	; (80092c4 <TIM_Base_SetConfig+0x124>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00b      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <TIM_Base_SetConfig+0x128>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a10      	ldr	r2, [pc, #64]	; (80092cc <TIM_Base_SetConfig+0x12c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a0f      	ldr	r2, [pc, #60]	; (80092d0 <TIM_Base_SetConfig+0x130>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d103      	bne.n	80092a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	615a      	str	r2, [r3, #20]
}
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40010000 	.word	0x40010000
 80092b8:	40000400 	.word	0x40000400
 80092bc:	40000800 	.word	0x40000800
 80092c0:	40000c00 	.word	0x40000c00
 80092c4:	40010400 	.word	0x40010400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40014400 	.word	0x40014400
 80092d0:	40014800 	.word	0x40014800

080092d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f023 0201 	bic.w	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 030a 	bic.w	r3, r3, #10
 8009310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009332:	b480      	push	{r7}
 8009334:	b087      	sub	sp, #28
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	f023 0210 	bic.w	r2, r3, #16
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800935c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800936e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
	...

08009394 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <TIM_ITRx_SetConfig+0x38>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f043 0307 	orr.w	r3, r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	609a      	str	r2, [r3, #8]
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	ffcfff8f 	.word	0xffcfff8f

080093d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	021a      	lsls	r2, r3, #8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	609a      	str	r2, [r3, #8]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009424:	2302      	movs	r3, #2
 8009426:	e068      	b.n	80094fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a2e      	ldr	r2, [pc, #184]	; (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a2d      	ldr	r2, [pc, #180]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d108      	bne.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a1e      	ldr	r2, [pc, #120]	; (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d01d      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949a:	d018      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1b      	ldr	r2, [pc, #108]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d013      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d00e      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a18      	ldr	r2, [pc, #96]	; (8009518 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d009      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a13      	ldr	r2, [pc, #76]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d004      	beq.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a14      	ldr	r2, [pc, #80]	; (800951c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d10c      	bne.n	80094e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40010000 	.word	0x40010000
 800950c:	40010400 	.word	0x40010400
 8009510:	40000400 	.word	0x40000400
 8009514:	40000800 	.word	0x40000800
 8009518:	40000c00 	.word	0x40000c00
 800951c:	40001800 	.word	0x40001800

08009520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e042      	b.n	80095f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7f8 fb3d 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2224      	movs	r2, #36	; 0x24
 800958a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fba6 	bl	8009cf0 <UART_SetConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e022      	b.n	80095f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 fd18 	bl	800bfec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f002 fd9f 	bl	800c130 <UART_CheckIdleState>
 80095f2:	4603      	mov	r3, r0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	4613      	mov	r3, r2
 8009608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009610:	2b20      	cmp	r3, #32
 8009612:	d168      	bne.n	80096e6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <HAL_UART_Transmit_IT+0x24>
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e061      	b.n	80096e8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800962a:	2b01      	cmp	r3, #1
 800962c:	d101      	bne.n	8009632 <HAL_UART_Transmit_IT+0x36>
 800962e:	2302      	movs	r3, #2
 8009630:	e05a      	b.n	80096e8 <HAL_UART_Transmit_IT+0xec>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	88fa      	ldrh	r2, [r7, #6]
 800964c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2221      	movs	r2, #33	; 0x21
 8009662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800966a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966e:	d11c      	bne.n	80096aa <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009678:	d107      	bne.n	800968a <HAL_UART_Transmit_IT+0x8e>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d103      	bne.n	800968a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a1b      	ldr	r2, [pc, #108]	; (80096f4 <HAL_UART_Transmit_IT+0xf8>)
 8009686:	671a      	str	r2, [r3, #112]	; 0x70
 8009688:	e002      	b.n	8009690 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a1a      	ldr	r2, [pc, #104]	; (80096f8 <HAL_UART_Transmit_IT+0xfc>)
 800968e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80096a6:	609a      	str	r2, [r3, #8]
 80096a8:	e01b      	b.n	80096e2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b2:	d107      	bne.n	80096c4 <HAL_UART_Transmit_IT+0xc8>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a0f      	ldr	r2, [pc, #60]	; (80096fc <HAL_UART_Transmit_IT+0x100>)
 80096c0:	671a      	str	r2, [r3, #112]	; 0x70
 80096c2:	e002      	b.n	80096ca <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a0e      	ldr	r2, [pc, #56]	; (8009700 <HAL_UART_Transmit_IT+0x104>)
 80096c8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096e0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	e000      	b.n	80096e8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80096e6:	2302      	movs	r3, #2
  }
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	0800c5ff 	.word	0x0800c5ff
 80096f8:	0800c565 	.word	0x0800c565
 80096fc:	0800c4e7 	.word	0x0800c4e7
 8009700:	0800c473 	.word	0x0800c473

08009704 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009718:	2b20      	cmp	r3, #32
 800971a:	f040 80bc 	bne.w	8009896 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_UART_Receive_IT+0x26>
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0b4      	b.n	8009898 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_UART_Receive_IT+0x38>
 8009738:	2302      	movs	r3, #2
 800973a:	e0ad      	b.n	8009898 <HAL_UART_Receive_IT+0x194>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	88fa      	ldrh	r2, [r7, #6]
 8009756:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009768:	d10e      	bne.n	8009788 <HAL_UART_Receive_IT+0x84>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <HAL_UART_Receive_IT+0x7a>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800977c:	e02d      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	22ff      	movs	r2, #255	; 0xff
 8009782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009786:	e028      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <HAL_UART_Receive_IT+0xa8>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d104      	bne.n	80097a2 <HAL_UART_Receive_IT+0x9e>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097a0:	e01b      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	227f      	movs	r2, #127	; 0x7f
 80097a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097aa:	e016      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b4:	d10d      	bne.n	80097d2 <HAL_UART_Receive_IT+0xce>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <HAL_UART_Receive_IT+0xc4>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	227f      	movs	r2, #127	; 0x7f
 80097c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097c6:	e008      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	223f      	movs	r2, #63	; 0x3f
 80097cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097d0:	e003      	b.n	80097da <HAL_UART_Receive_IT+0xd6>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2222      	movs	r2, #34	; 0x22
 80097e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0201 	orr.w	r2, r2, #1
 80097f8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009802:	d12a      	bne.n	800985a <HAL_UART_Receive_IT+0x156>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800980a:	88fa      	ldrh	r2, [r7, #6]
 800980c:	429a      	cmp	r2, r3
 800980e:	d324      	bcc.n	800985a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009818:	d107      	bne.n	800982a <HAL_UART_Receive_IT+0x126>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <HAL_UART_Receive_IT+0x1a0>)
 8009826:	66da      	str	r2, [r3, #108]	; 0x6c
 8009828:	e002      	b.n	8009830 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4a1e      	ldr	r2, [pc, #120]	; (80098a8 <HAL_UART_Receive_IT+0x1a4>)
 800982e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009846:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009856:	609a      	str	r2, [r3, #8]
 8009858:	e01b      	b.n	8009892 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009862:	d107      	bne.n	8009874 <HAL_UART_Receive_IT+0x170>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a0f      	ldr	r2, [pc, #60]	; (80098ac <HAL_UART_Receive_IT+0x1a8>)
 8009870:	66da      	str	r2, [r3, #108]	; 0x6c
 8009872:	e002      	b.n	800987a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <HAL_UART_Receive_IT+0x1ac>)
 8009878:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009890:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e000      	b.n	8009898 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009896:	2302      	movs	r3, #2
  }
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	0800c935 	.word	0x0800c935
 80098a8:	0800c82d 	.word	0x0800c82d
 80098ac:	0800c781 	.word	0x0800c781
 80098b0:	0800c6d7 	.word	0x0800c6d7

080098b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d170      	bne.n	80099ae <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <HAL_UART_Receive_DMA+0x24>
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e069      	b.n	80099b0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d101      	bne.n	80098ea <HAL_UART_Receive_DMA+0x36>
 80098e6:	2302      	movs	r3, #2
 80098e8:	e062      	b.n	80099b0 <HAL_UART_Receive_DMA+0xfc>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2222      	movs	r2, #34	; 0x22
 800990c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009914:	2b00      	cmp	r3, #0
 8009916:	d02c      	beq.n	8009972 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800991c:	4a26      	ldr	r2, [pc, #152]	; (80099b8 <HAL_UART_Receive_DMA+0x104>)
 800991e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009924:	4a25      	ldr	r2, [pc, #148]	; (80099bc <HAL_UART_Receive_DMA+0x108>)
 8009926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800992c:	4a24      	ldr	r2, [pc, #144]	; (80099c0 <HAL_UART_Receive_DMA+0x10c>)
 800992e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009934:	2200      	movs	r2, #0
 8009936:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3324      	adds	r3, #36	; 0x24
 8009942:	4619      	mov	r1, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009948:	461a      	mov	r2, r3
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	f7fa f9cc 	bl	8003ce8 <HAL_DMA_Start_IT>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00d      	beq.n	8009972 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2210      	movs	r2, #16
 800995a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e01e      	b.n	80099b0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009988:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0201 	orr.w	r2, r2, #1
 8009998:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e000      	b.n	80099b0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80099ae:	2302      	movs	r3, #2
  }
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	0800c345 	.word	0x0800c345
 80099bc:	0800c3ab 	.word	0x0800c3ab
 80099c0:	0800c3c7 	.word	0x0800c3c7

080099c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80099ea:	4013      	ands	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d118      	bne.n	8009a26 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d013      	beq.n	8009a26 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 8145 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
      }
      return;
 8009a24:	e13f      	b.n	8009ca6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80e8 	beq.w	8009bfe <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4ba1      	ldr	r3, [pc, #644]	; (8009cb8 <HAL_UART_IRQHandler+0x2f4>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d105      	bne.n	8009a44 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	4ba0      	ldr	r3, [pc, #640]	; (8009cbc <HAL_UART_IRQHandler+0x2f8>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80dd 	beq.w	8009bfe <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <HAL_UART_IRQHandler+0xac>
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a66:	f043 0201 	orr.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d010      	beq.n	8009a9c <HAL_UART_IRQHandler+0xd8>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	f043 0204 	orr.w	r2, r3, #4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d010      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x104>
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	f043 0202 	orr.w	r2, r3, #2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d015      	beq.n	8009afe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4b76      	ldr	r3, [pc, #472]	; (8009cb8 <HAL_UART_IRQHandler+0x2f4>)
 8009ae0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2208      	movs	r2, #8
 8009aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af4:	f043 0208 	orr.w	r2, r3, #8
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d011      	beq.n	8009b2c <HAL_UART_IRQHandler+0x168>
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b22:	f043 0220 	orr.w	r2, r3, #32
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80b9 	beq.w	8009caa <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d011      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b78:	2b40      	cmp	r3, #64	; 0x40
 8009b7a:	d004      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d031      	beq.n	8009bea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f002 fbb8 	bl	800c2fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d123      	bne.n	8009be2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d013      	beq.n	8009bda <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bb6:	4a42      	ldr	r2, [pc, #264]	; (8009cc0 <HAL_UART_IRQHandler+0x2fc>)
 8009bb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fa fafc 	bl	80041bc <HAL_DMA_Abort_IT>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d017      	beq.n	8009bfa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	e00f      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f87c 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be0:	e00b      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f878 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be8:	e007      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f874 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009bf8:	e057      	b.n	8009caa <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfa:	bf00      	nop
    return;
 8009bfc:	e055      	b.n	8009caa <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00d      	beq.n	8009c24 <HAL_UART_IRQHandler+0x260>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d008      	beq.n	8009c24 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 ff0d 	bl	800ca3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c22:	e045      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d012      	beq.n	8009c54 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d008      	beq.n	8009c54 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d031      	beq.n	8009cae <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
    }
    return;
 8009c52:	e02c      	b.n	8009cae <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <HAL_UART_IRQHandler+0x2ac>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f002 fd1a 	bl	800c6a2 <UART_EndTransmit_IT>
    return;
 8009c6e:	e01f      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d008      	beq.n	8009c8c <HAL_UART_IRQHandler+0x2c8>
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 feed 	bl	800ca64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c8a:	e011      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00c      	beq.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da09      	bge.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 fed7 	bl	800ca50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ca2:	bf00      	nop
 8009ca4:	e004      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009ca6:	bf00      	nop
 8009ca8:	e002      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009caa:	bf00      	nop
 8009cac:	e000      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009cae:	bf00      	nop
  }
}
 8009cb0:	3720      	adds	r7, #32
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	10000001 	.word	0x10000001
 8009cbc:	04000120 	.word	0x04000120
 8009cc0:	0800c447 	.word	0x0800c447

08009cc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	0000      	movs	r0, r0
	...

08009cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009cf4:	b090      	sub	sp, #64	; 0x40
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d26:	4313      	orrs	r3, r2
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	4bc1      	ldr	r3, [pc, #772]	; (800a038 <UART_SetConfig+0x348>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d3a:	430b      	orrs	r3, r1
 8009d3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4ab7      	ldr	r2, [pc, #732]	; (800a03c <UART_SetConfig+0x34c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	4bb2      	ldr	r3, [pc, #712]	; (800a040 <UART_SetConfig+0x350>)
 8009d76:	4013      	ands	r3, r2
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6812      	ldr	r2, [r2, #0]
 8009d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d88:	f023 010f 	bic.w	r1, r3, #15
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4aa9      	ldr	r2, [pc, #676]	; (800a044 <UART_SetConfig+0x354>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d177      	bne.n	8009e92 <UART_SetConfig+0x1a2>
 8009da2:	4ba9      	ldr	r3, [pc, #676]	; (800a048 <UART_SetConfig+0x358>)
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009daa:	2b28      	cmp	r3, #40	; 0x28
 8009dac:	d86c      	bhi.n	8009e88 <UART_SetConfig+0x198>
 8009dae:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <UART_SetConfig+0xc4>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009e59 	.word	0x08009e59
 8009db8:	08009e89 	.word	0x08009e89
 8009dbc:	08009e89 	.word	0x08009e89
 8009dc0:	08009e89 	.word	0x08009e89
 8009dc4:	08009e89 	.word	0x08009e89
 8009dc8:	08009e89 	.word	0x08009e89
 8009dcc:	08009e89 	.word	0x08009e89
 8009dd0:	08009e89 	.word	0x08009e89
 8009dd4:	08009e61 	.word	0x08009e61
 8009dd8:	08009e89 	.word	0x08009e89
 8009ddc:	08009e89 	.word	0x08009e89
 8009de0:	08009e89 	.word	0x08009e89
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009e89 	.word	0x08009e89
 8009dec:	08009e89 	.word	0x08009e89
 8009df0:	08009e89 	.word	0x08009e89
 8009df4:	08009e69 	.word	0x08009e69
 8009df8:	08009e89 	.word	0x08009e89
 8009dfc:	08009e89 	.word	0x08009e89
 8009e00:	08009e89 	.word	0x08009e89
 8009e04:	08009e89 	.word	0x08009e89
 8009e08:	08009e89 	.word	0x08009e89
 8009e0c:	08009e89 	.word	0x08009e89
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009e71 	.word	0x08009e71
 8009e18:	08009e89 	.word	0x08009e89
 8009e1c:	08009e89 	.word	0x08009e89
 8009e20:	08009e89 	.word	0x08009e89
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e89 	.word	0x08009e89
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e79 	.word	0x08009e79
 8009e38:	08009e89 	.word	0x08009e89
 8009e3c:	08009e89 	.word	0x08009e89
 8009e40:	08009e89 	.word	0x08009e89
 8009e44:	08009e89 	.word	0x08009e89
 8009e48:	08009e89 	.word	0x08009e89
 8009e4c:	08009e89 	.word	0x08009e89
 8009e50:	08009e89 	.word	0x08009e89
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e5e:	e233      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e60:	2304      	movs	r3, #4
 8009e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e66:	e22f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e6e:	e22b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e70:	2310      	movs	r3, #16
 8009e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e76:	e227      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e78:	2320      	movs	r3, #32
 8009e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e7e:	e223      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e80:	2340      	movs	r3, #64	; 0x40
 8009e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e86:	e21f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e88:	2380      	movs	r3, #128	; 0x80
 8009e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e8e:	bf00      	nop
 8009e90:	e21a      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a6d      	ldr	r2, [pc, #436]	; (800a04c <UART_SetConfig+0x35c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d132      	bne.n	8009f02 <UART_SetConfig+0x212>
 8009e9c:	4b6a      	ldr	r3, [pc, #424]	; (800a048 <UART_SetConfig+0x358>)
 8009e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	d827      	bhi.n	8009ef8 <UART_SetConfig+0x208>
 8009ea8:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <UART_SetConfig+0x1c0>)
 8009eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eae:	bf00      	nop
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ed1 	.word	0x08009ed1
 8009eb8:	08009ed9 	.word	0x08009ed9
 8009ebc:	08009ee1 	.word	0x08009ee1
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ef1 	.word	0x08009ef1
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ece:	e1fb      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ed6:	e1f7      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ed8:	2308      	movs	r3, #8
 8009eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ede:	e1f3      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ee6:	e1ef      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ee8:	2320      	movs	r3, #32
 8009eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eee:	e1eb      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ef6:	e1e7      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009ef8:	2380      	movs	r3, #128	; 0x80
 8009efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009efe:	bf00      	nop
 8009f00:	e1e2      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a52      	ldr	r2, [pc, #328]	; (800a050 <UART_SetConfig+0x360>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d132      	bne.n	8009f72 <UART_SetConfig+0x282>
 8009f0c:	4b4e      	ldr	r3, [pc, #312]	; (800a048 <UART_SetConfig+0x358>)
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	2b05      	cmp	r3, #5
 8009f16:	d827      	bhi.n	8009f68 <UART_SetConfig+0x278>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <UART_SetConfig+0x230>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f3e:	e1c3      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f46:	e1bf      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f4e:	e1bb      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f56:	e1b7      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f5e:	e1b3      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f66:	e1af      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f6e:	bf00      	nop
 8009f70:	e1aa      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a37      	ldr	r2, [pc, #220]	; (800a054 <UART_SetConfig+0x364>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d132      	bne.n	8009fe2 <UART_SetConfig+0x2f2>
 8009f7c:	4b32      	ldr	r3, [pc, #200]	; (800a048 <UART_SetConfig+0x358>)
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f80:	f003 0307 	and.w	r3, r3, #7
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d827      	bhi.n	8009fd8 <UART_SetConfig+0x2e8>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x2a0>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	08009fc1 	.word	0x08009fc1
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fae:	e18b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fb6:	e187      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fbe:	e183      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fc6:	e17f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fc8:	2320      	movs	r3, #32
 8009fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fce:	e17b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fd6:	e177      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fd8:	2380      	movs	r3, #128	; 0x80
 8009fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fde:	bf00      	nop
 8009fe0:	e172      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a1c      	ldr	r2, [pc, #112]	; (800a058 <UART_SetConfig+0x368>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d144      	bne.n	800a076 <UART_SetConfig+0x386>
 8009fec:	4b16      	ldr	r3, [pc, #88]	; (800a048 <UART_SetConfig+0x358>)
 8009fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff0:	f003 0307 	and.w	r3, r3, #7
 8009ff4:	2b05      	cmp	r3, #5
 8009ff6:	d839      	bhi.n	800a06c <UART_SetConfig+0x37c>
 8009ff8:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <UART_SetConfig+0x310>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a019 	.word	0x0800a019
 800a004:	0800a021 	.word	0x0800a021
 800a008:	0800a029 	.word	0x0800a029
 800a00c:	0800a031 	.word	0x0800a031
 800a010:	0800a05d 	.word	0x0800a05d
 800a014:	0800a065 	.word	0x0800a065
 800a018:	2300      	movs	r3, #0
 800a01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a01e:	e153      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a020:	2304      	movs	r3, #4
 800a022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a026:	e14f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a028:	2308      	movs	r3, #8
 800a02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a02e:	e14b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a030:	2310      	movs	r3, #16
 800a032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a036:	e147      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a038:	cfff69f3 	.word	0xcfff69f3
 800a03c:	58000c00 	.word	0x58000c00
 800a040:	11fff4ff 	.word	0x11fff4ff
 800a044:	40011000 	.word	0x40011000
 800a048:	58024400 	.word	0x58024400
 800a04c:	40004400 	.word	0x40004400
 800a050:	40004800 	.word	0x40004800
 800a054:	40004c00 	.word	0x40004c00
 800a058:	40005000 	.word	0x40005000
 800a05c:	2320      	movs	r3, #32
 800a05e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a062:	e131      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a064:	2340      	movs	r3, #64	; 0x40
 800a066:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a06a:	e12d      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a06c:	2380      	movs	r3, #128	; 0x80
 800a06e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a072:	bf00      	nop
 800a074:	e128      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4ac3      	ldr	r2, [pc, #780]	; (800a388 <UART_SetConfig+0x698>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d178      	bne.n	800a172 <UART_SetConfig+0x482>
 800a080:	4bc2      	ldr	r3, [pc, #776]	; (800a38c <UART_SetConfig+0x69c>)
 800a082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a088:	2b28      	cmp	r3, #40	; 0x28
 800a08a:	d86d      	bhi.n	800a168 <UART_SetConfig+0x478>
 800a08c:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <UART_SetConfig+0x3a4>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a139 	.word	0x0800a139
 800a098:	0800a169 	.word	0x0800a169
 800a09c:	0800a169 	.word	0x0800a169
 800a0a0:	0800a169 	.word	0x0800a169
 800a0a4:	0800a169 	.word	0x0800a169
 800a0a8:	0800a169 	.word	0x0800a169
 800a0ac:	0800a169 	.word	0x0800a169
 800a0b0:	0800a169 	.word	0x0800a169
 800a0b4:	0800a141 	.word	0x0800a141
 800a0b8:	0800a169 	.word	0x0800a169
 800a0bc:	0800a169 	.word	0x0800a169
 800a0c0:	0800a169 	.word	0x0800a169
 800a0c4:	0800a169 	.word	0x0800a169
 800a0c8:	0800a169 	.word	0x0800a169
 800a0cc:	0800a169 	.word	0x0800a169
 800a0d0:	0800a169 	.word	0x0800a169
 800a0d4:	0800a149 	.word	0x0800a149
 800a0d8:	0800a169 	.word	0x0800a169
 800a0dc:	0800a169 	.word	0x0800a169
 800a0e0:	0800a169 	.word	0x0800a169
 800a0e4:	0800a169 	.word	0x0800a169
 800a0e8:	0800a169 	.word	0x0800a169
 800a0ec:	0800a169 	.word	0x0800a169
 800a0f0:	0800a169 	.word	0x0800a169
 800a0f4:	0800a151 	.word	0x0800a151
 800a0f8:	0800a169 	.word	0x0800a169
 800a0fc:	0800a169 	.word	0x0800a169
 800a100:	0800a169 	.word	0x0800a169
 800a104:	0800a169 	.word	0x0800a169
 800a108:	0800a169 	.word	0x0800a169
 800a10c:	0800a169 	.word	0x0800a169
 800a110:	0800a169 	.word	0x0800a169
 800a114:	0800a159 	.word	0x0800a159
 800a118:	0800a169 	.word	0x0800a169
 800a11c:	0800a169 	.word	0x0800a169
 800a120:	0800a169 	.word	0x0800a169
 800a124:	0800a169 	.word	0x0800a169
 800a128:	0800a169 	.word	0x0800a169
 800a12c:	0800a169 	.word	0x0800a169
 800a130:	0800a169 	.word	0x0800a169
 800a134:	0800a161 	.word	0x0800a161
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	e0c3      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a140:	2304      	movs	r3, #4
 800a142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a146:	e0bf      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a148:	2308      	movs	r3, #8
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	e0bb      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a150:	2310      	movs	r3, #16
 800a152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a156:	e0b7      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a158:	2320      	movs	r3, #32
 800a15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a15e:	e0b3      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a160:	2340      	movs	r3, #64	; 0x40
 800a162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a166:	e0af      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a168:	2380      	movs	r3, #128	; 0x80
 800a16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a16e:	bf00      	nop
 800a170:	e0aa      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a86      	ldr	r2, [pc, #536]	; (800a390 <UART_SetConfig+0x6a0>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d132      	bne.n	800a1e2 <UART_SetConfig+0x4f2>
 800a17c:	4b83      	ldr	r3, [pc, #524]	; (800a38c <UART_SetConfig+0x69c>)
 800a17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	2b05      	cmp	r3, #5
 800a186:	d827      	bhi.n	800a1d8 <UART_SetConfig+0x4e8>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x4a0>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	e08b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1b6:	e087      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	e083      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1c6:	e07f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ce:	e07b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1d0:	2340      	movs	r3, #64	; 0x40
 800a1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1d6:	e077      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1d8:	2380      	movs	r3, #128	; 0x80
 800a1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1de:	bf00      	nop
 800a1e0:	e072      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a6b      	ldr	r2, [pc, #428]	; (800a394 <UART_SetConfig+0x6a4>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d132      	bne.n	800a252 <UART_SetConfig+0x562>
 800a1ec:	4b67      	ldr	r3, [pc, #412]	; (800a38c <UART_SetConfig+0x69c>)
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	2b05      	cmp	r3, #5
 800a1f6:	d827      	bhi.n	800a248 <UART_SetConfig+0x558>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <UART_SetConfig+0x510>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a219 	.word	0x0800a219
 800a204:	0800a221 	.word	0x0800a221
 800a208:	0800a229 	.word	0x0800a229
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a239 	.word	0x0800a239
 800a214:	0800a241 	.word	0x0800a241
 800a218:	2300      	movs	r3, #0
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e053      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a220:	2304      	movs	r3, #4
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	e04f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a228:	2308      	movs	r3, #8
 800a22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a22e:	e04b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a230:	2310      	movs	r3, #16
 800a232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a236:	e047      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a238:	2320      	movs	r3, #32
 800a23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a23e:	e043      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a246:	e03f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a24e:	bf00      	nop
 800a250:	e03a      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a50      	ldr	r2, [pc, #320]	; (800a398 <UART_SetConfig+0x6a8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d132      	bne.n	800a2c2 <UART_SetConfig+0x5d2>
 800a25c:	4b4b      	ldr	r3, [pc, #300]	; (800a38c <UART_SetConfig+0x69c>)
 800a25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	2b05      	cmp	r3, #5
 800a266:	d827      	bhi.n	800a2b8 <UART_SetConfig+0x5c8>
 800a268:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x580>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	2302      	movs	r3, #2
 800a28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a28e:	e01b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a290:	2304      	movs	r3, #4
 800a292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a296:	e017      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a298:	2308      	movs	r3, #8
 800a29a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a29e:	e013      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2a6:	e00f      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ae:	e00b      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2b6:	e007      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2be:	bf00      	nop
 800a2c0:	e002      	b.n	800a2c8 <UART_SetConfig+0x5d8>
 800a2c2:	2380      	movs	r3, #128	; 0x80
 800a2c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a32      	ldr	r2, [pc, #200]	; (800a398 <UART_SetConfig+0x6a8>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	f040 86f7 	bne.w	800b0c2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	f000 80c0 	beq.w	800a45e <UART_SetConfig+0x76e>
 800a2de:	2b08      	cmp	r3, #8
 800a2e0:	dc04      	bgt.n	800a2ec <UART_SetConfig+0x5fc>
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d00c      	beq.n	800a300 <UART_SetConfig+0x610>
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d065      	beq.n	800a3b6 <UART_SetConfig+0x6c6>
 800a2ea:	e27a      	b.n	800a7e2 <UART_SetConfig+0xaf2>
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	f000 81b0 	beq.w	800a652 <UART_SetConfig+0x962>
 800a2f2:	2b40      	cmp	r3, #64	; 0x40
 800a2f4:	f000 821e 	beq.w	800a734 <UART_SetConfig+0xa44>
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	f000 8104 	beq.w	800a506 <UART_SetConfig+0x816>
 800a2fe:	e270      	b.n	800a7e2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a300:	f7fd ff82 	bl	8008208 <HAL_RCCEx_GetD3PCLK1Freq>
 800a304:	4602      	mov	r2, r0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d04e      	beq.n	800a3ac <UART_SetConfig+0x6bc>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	2b01      	cmp	r3, #1
 800a314:	d048      	beq.n	800a3a8 <UART_SetConfig+0x6b8>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d042      	beq.n	800a3a4 <UART_SetConfig+0x6b4>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	2b03      	cmp	r3, #3
 800a324:	d03c      	beq.n	800a3a0 <UART_SetConfig+0x6b0>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d036      	beq.n	800a39c <UART_SetConfig+0x6ac>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	2b05      	cmp	r3, #5
 800a334:	d026      	beq.n	800a384 <UART_SetConfig+0x694>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	2b06      	cmp	r3, #6
 800a33c:	d020      	beq.n	800a380 <UART_SetConfig+0x690>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	2b07      	cmp	r3, #7
 800a344:	d01a      	beq.n	800a37c <UART_SetConfig+0x68c>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	2b08      	cmp	r3, #8
 800a34c:	d014      	beq.n	800a378 <UART_SetConfig+0x688>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	2b09      	cmp	r3, #9
 800a354:	d00e      	beq.n	800a374 <UART_SetConfig+0x684>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	2b0a      	cmp	r3, #10
 800a35c:	d008      	beq.n	800a370 <UART_SetConfig+0x680>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	2b0b      	cmp	r3, #11
 800a364:	d102      	bne.n	800a36c <UART_SetConfig+0x67c>
 800a366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a36a:	e020      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e01e      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	e01c      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a374:	2340      	movs	r3, #64	; 0x40
 800a376:	e01a      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a378:	2320      	movs	r3, #32
 800a37a:	e018      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a37c:	2310      	movs	r3, #16
 800a37e:	e016      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a380:	230c      	movs	r3, #12
 800a382:	e014      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a384:	230a      	movs	r3, #10
 800a386:	e012      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a388:	40011400 	.word	0x40011400
 800a38c:	58024400 	.word	0x58024400
 800a390:	40007800 	.word	0x40007800
 800a394:	40007c00 	.word	0x40007c00
 800a398:	58000c00 	.word	0x58000c00
 800a39c:	2308      	movs	r3, #8
 800a39e:	e006      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	e004      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	e002      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e000      	b.n	800a3ae <UART_SetConfig+0x6be>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3b4:	e219      	b.n	800a7ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b6:	f107 0318 	add.w	r3, r7, #24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fd ff3a 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d044      	beq.n	800a454 <UART_SetConfig+0x764>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d03e      	beq.n	800a450 <UART_SetConfig+0x760>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d038      	beq.n	800a44c <UART_SetConfig+0x75c>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d032      	beq.n	800a448 <UART_SetConfig+0x758>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	d02c      	beq.n	800a444 <UART_SetConfig+0x754>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d026      	beq.n	800a440 <UART_SetConfig+0x750>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b06      	cmp	r3, #6
 800a3f8:	d020      	beq.n	800a43c <UART_SetConfig+0x74c>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b07      	cmp	r3, #7
 800a400:	d01a      	beq.n	800a438 <UART_SetConfig+0x748>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b08      	cmp	r3, #8
 800a408:	d014      	beq.n	800a434 <UART_SetConfig+0x744>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d00e      	beq.n	800a430 <UART_SetConfig+0x740>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b0a      	cmp	r3, #10
 800a418:	d008      	beq.n	800a42c <UART_SetConfig+0x73c>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	2b0b      	cmp	r3, #11
 800a420:	d102      	bne.n	800a428 <UART_SetConfig+0x738>
 800a422:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a426:	e016      	b.n	800a456 <UART_SetConfig+0x766>
 800a428:	2301      	movs	r3, #1
 800a42a:	e014      	b.n	800a456 <UART_SetConfig+0x766>
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	e012      	b.n	800a456 <UART_SetConfig+0x766>
 800a430:	2340      	movs	r3, #64	; 0x40
 800a432:	e010      	b.n	800a456 <UART_SetConfig+0x766>
 800a434:	2320      	movs	r3, #32
 800a436:	e00e      	b.n	800a456 <UART_SetConfig+0x766>
 800a438:	2310      	movs	r3, #16
 800a43a:	e00c      	b.n	800a456 <UART_SetConfig+0x766>
 800a43c:	230c      	movs	r3, #12
 800a43e:	e00a      	b.n	800a456 <UART_SetConfig+0x766>
 800a440:	230a      	movs	r3, #10
 800a442:	e008      	b.n	800a456 <UART_SetConfig+0x766>
 800a444:	2308      	movs	r3, #8
 800a446:	e006      	b.n	800a456 <UART_SetConfig+0x766>
 800a448:	2306      	movs	r3, #6
 800a44a:	e004      	b.n	800a456 <UART_SetConfig+0x766>
 800a44c:	2304      	movs	r3, #4
 800a44e:	e002      	b.n	800a456 <UART_SetConfig+0x766>
 800a450:	2302      	movs	r3, #2
 800a452:	e000      	b.n	800a456 <UART_SetConfig+0x766>
 800a454:	2301      	movs	r3, #1
 800a456:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a45c:	e1c5      	b.n	800a7ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe f832 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d044      	beq.n	800a4fc <UART_SetConfig+0x80c>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b01      	cmp	r3, #1
 800a478:	d03e      	beq.n	800a4f8 <UART_SetConfig+0x808>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d038      	beq.n	800a4f4 <UART_SetConfig+0x804>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b03      	cmp	r3, #3
 800a488:	d032      	beq.n	800a4f0 <UART_SetConfig+0x800>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d02c      	beq.n	800a4ec <UART_SetConfig+0x7fc>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b05      	cmp	r3, #5
 800a498:	d026      	beq.n	800a4e8 <UART_SetConfig+0x7f8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b06      	cmp	r3, #6
 800a4a0:	d020      	beq.n	800a4e4 <UART_SetConfig+0x7f4>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b07      	cmp	r3, #7
 800a4a8:	d01a      	beq.n	800a4e0 <UART_SetConfig+0x7f0>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d014      	beq.n	800a4dc <UART_SetConfig+0x7ec>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b09      	cmp	r3, #9
 800a4b8:	d00e      	beq.n	800a4d8 <UART_SetConfig+0x7e8>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	2b0a      	cmp	r3, #10
 800a4c0:	d008      	beq.n	800a4d4 <UART_SetConfig+0x7e4>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	2b0b      	cmp	r3, #11
 800a4c8:	d102      	bne.n	800a4d0 <UART_SetConfig+0x7e0>
 800a4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ce:	e016      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e014      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4d4:	2380      	movs	r3, #128	; 0x80
 800a4d6:	e012      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	e010      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4dc:	2320      	movs	r3, #32
 800a4de:	e00e      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	e00c      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	e00a      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4e8:	230a      	movs	r3, #10
 800a4ea:	e008      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	e006      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4f0:	2306      	movs	r3, #6
 800a4f2:	e004      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	e002      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e000      	b.n	800a4fe <UART_SetConfig+0x80e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a504:	e171      	b.n	800a7ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a506:	4b7a      	ldr	r3, [pc, #488]	; (800a6f0 <UART_SetConfig+0xa00>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d054      	beq.n	800a5bc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a512:	4b77      	ldr	r3, [pc, #476]	; (800a6f0 <UART_SetConfig+0xa00>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	08db      	lsrs	r3, r3, #3
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	4a75      	ldr	r2, [pc, #468]	; (800a6f4 <UART_SetConfig+0xa04>)
 800a51e:	40da      	lsrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d044      	beq.n	800a5b2 <UART_SetConfig+0x8c2>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d03e      	beq.n	800a5ae <UART_SetConfig+0x8be>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b02      	cmp	r3, #2
 800a536:	d038      	beq.n	800a5aa <UART_SetConfig+0x8ba>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d032      	beq.n	800a5a6 <UART_SetConfig+0x8b6>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b04      	cmp	r3, #4
 800a546:	d02c      	beq.n	800a5a2 <UART_SetConfig+0x8b2>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b05      	cmp	r3, #5
 800a54e:	d026      	beq.n	800a59e <UART_SetConfig+0x8ae>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b06      	cmp	r3, #6
 800a556:	d020      	beq.n	800a59a <UART_SetConfig+0x8aa>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b07      	cmp	r3, #7
 800a55e:	d01a      	beq.n	800a596 <UART_SetConfig+0x8a6>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b08      	cmp	r3, #8
 800a566:	d014      	beq.n	800a592 <UART_SetConfig+0x8a2>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	d00e      	beq.n	800a58e <UART_SetConfig+0x89e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	2b0a      	cmp	r3, #10
 800a576:	d008      	beq.n	800a58a <UART_SetConfig+0x89a>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b0b      	cmp	r3, #11
 800a57e:	d102      	bne.n	800a586 <UART_SetConfig+0x896>
 800a580:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a584:	e016      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a586:	2301      	movs	r3, #1
 800a588:	e014      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a58a:	2380      	movs	r3, #128	; 0x80
 800a58c:	e012      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a58e:	2340      	movs	r3, #64	; 0x40
 800a590:	e010      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a592:	2320      	movs	r3, #32
 800a594:	e00e      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a596:	2310      	movs	r3, #16
 800a598:	e00c      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a59a:	230c      	movs	r3, #12
 800a59c:	e00a      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a59e:	230a      	movs	r3, #10
 800a5a0:	e008      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	e006      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a5a6:	2306      	movs	r3, #6
 800a5a8:	e004      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	e002      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e000      	b.n	800a5b4 <UART_SetConfig+0x8c4>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a5ba:	e116      	b.n	800a7ea <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d043      	beq.n	800a64c <UART_SetConfig+0x95c>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d03d      	beq.n	800a648 <UART_SetConfig+0x958>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d037      	beq.n	800a644 <UART_SetConfig+0x954>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d031      	beq.n	800a640 <UART_SetConfig+0x950>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d02b      	beq.n	800a63c <UART_SetConfig+0x94c>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2b05      	cmp	r3, #5
 800a5ea:	d025      	beq.n	800a638 <UART_SetConfig+0x948>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	2b06      	cmp	r3, #6
 800a5f2:	d01f      	beq.n	800a634 <UART_SetConfig+0x944>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	2b07      	cmp	r3, #7
 800a5fa:	d019      	beq.n	800a630 <UART_SetConfig+0x940>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	2b08      	cmp	r3, #8
 800a602:	d013      	beq.n	800a62c <UART_SetConfig+0x93c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	2b09      	cmp	r3, #9
 800a60a:	d00d      	beq.n	800a628 <UART_SetConfig+0x938>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	2b0a      	cmp	r3, #10
 800a612:	d007      	beq.n	800a624 <UART_SetConfig+0x934>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b0b      	cmp	r3, #11
 800a61a:	d101      	bne.n	800a620 <UART_SetConfig+0x930>
 800a61c:	4b36      	ldr	r3, [pc, #216]	; (800a6f8 <UART_SetConfig+0xa08>)
 800a61e:	e016      	b.n	800a64e <UART_SetConfig+0x95e>
 800a620:	4b34      	ldr	r3, [pc, #208]	; (800a6f4 <UART_SetConfig+0xa04>)
 800a622:	e014      	b.n	800a64e <UART_SetConfig+0x95e>
 800a624:	4b35      	ldr	r3, [pc, #212]	; (800a6fc <UART_SetConfig+0xa0c>)
 800a626:	e012      	b.n	800a64e <UART_SetConfig+0x95e>
 800a628:	4b35      	ldr	r3, [pc, #212]	; (800a700 <UART_SetConfig+0xa10>)
 800a62a:	e010      	b.n	800a64e <UART_SetConfig+0x95e>
 800a62c:	4b35      	ldr	r3, [pc, #212]	; (800a704 <UART_SetConfig+0xa14>)
 800a62e:	e00e      	b.n	800a64e <UART_SetConfig+0x95e>
 800a630:	4b35      	ldr	r3, [pc, #212]	; (800a708 <UART_SetConfig+0xa18>)
 800a632:	e00c      	b.n	800a64e <UART_SetConfig+0x95e>
 800a634:	4b35      	ldr	r3, [pc, #212]	; (800a70c <UART_SetConfig+0xa1c>)
 800a636:	e00a      	b.n	800a64e <UART_SetConfig+0x95e>
 800a638:	4b35      	ldr	r3, [pc, #212]	; (800a710 <UART_SetConfig+0xa20>)
 800a63a:	e008      	b.n	800a64e <UART_SetConfig+0x95e>
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <UART_SetConfig+0xa24>)
 800a63e:	e006      	b.n	800a64e <UART_SetConfig+0x95e>
 800a640:	4b35      	ldr	r3, [pc, #212]	; (800a718 <UART_SetConfig+0xa28>)
 800a642:	e004      	b.n	800a64e <UART_SetConfig+0x95e>
 800a644:	4b35      	ldr	r3, [pc, #212]	; (800a71c <UART_SetConfig+0xa2c>)
 800a646:	e002      	b.n	800a64e <UART_SetConfig+0x95e>
 800a648:	4b35      	ldr	r3, [pc, #212]	; (800a720 <UART_SetConfig+0xa30>)
 800a64a:	e000      	b.n	800a64e <UART_SetConfig+0x95e>
 800a64c:	4b29      	ldr	r3, [pc, #164]	; (800a6f4 <UART_SetConfig+0xa04>)
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a650:	e0cb      	b.n	800a7ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	d046      	beq.n	800a6e8 <UART_SetConfig+0x9f8>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d040      	beq.n	800a6e4 <UART_SetConfig+0x9f4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b02      	cmp	r3, #2
 800a668:	d03a      	beq.n	800a6e0 <UART_SetConfig+0x9f0>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d034      	beq.n	800a6dc <UART_SetConfig+0x9ec>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	2b04      	cmp	r3, #4
 800a678:	d02e      	beq.n	800a6d8 <UART_SetConfig+0x9e8>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d028      	beq.n	800a6d4 <UART_SetConfig+0x9e4>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2b06      	cmp	r3, #6
 800a688:	d022      	beq.n	800a6d0 <UART_SetConfig+0x9e0>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b07      	cmp	r3, #7
 800a690:	d01c      	beq.n	800a6cc <UART_SetConfig+0x9dc>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b08      	cmp	r3, #8
 800a698:	d016      	beq.n	800a6c8 <UART_SetConfig+0x9d8>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b09      	cmp	r3, #9
 800a6a0:	d00f      	beq.n	800a6c2 <UART_SetConfig+0x9d2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b0a      	cmp	r3, #10
 800a6a8:	d008      	beq.n	800a6bc <UART_SetConfig+0x9cc>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b0b      	cmp	r3, #11
 800a6b0:	d102      	bne.n	800a6b8 <UART_SetConfig+0x9c8>
 800a6b2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a6b6:	e018      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6b8:	4b13      	ldr	r3, [pc, #76]	; (800a708 <UART_SetConfig+0xa18>)
 800a6ba:	e016      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6bc:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a6c0:	e013      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a6c6:	e010      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6c8:	4b16      	ldr	r3, [pc, #88]	; (800a724 <UART_SetConfig+0xa34>)
 800a6ca:	e00e      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <UART_SetConfig+0xa08>)
 800a6ce:	e00c      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6d0:	4b15      	ldr	r3, [pc, #84]	; (800a728 <UART_SetConfig+0xa38>)
 800a6d2:	e00a      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6d4:	4b15      	ldr	r3, [pc, #84]	; (800a72c <UART_SetConfig+0xa3c>)
 800a6d6:	e008      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6d8:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <UART_SetConfig+0xa0c>)
 800a6da:	e006      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6dc:	4b14      	ldr	r3, [pc, #80]	; (800a730 <UART_SetConfig+0xa40>)
 800a6de:	e004      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <UART_SetConfig+0xa10>)
 800a6e2:	e002      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <UART_SetConfig+0xa14>)
 800a6e6:	e000      	b.n	800a6ea <UART_SetConfig+0x9fa>
 800a6e8:	4b07      	ldr	r3, [pc, #28]	; (800a708 <UART_SetConfig+0xa18>)
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6ec:	e07d      	b.n	800a7ea <UART_SetConfig+0xafa>
 800a6ee:	bf00      	nop
 800a6f0:	58024400 	.word	0x58024400
 800a6f4:	03d09000 	.word	0x03d09000
 800a6f8:	0003d090 	.word	0x0003d090
 800a6fc:	0007a120 	.word	0x0007a120
 800a700:	000f4240 	.word	0x000f4240
 800a704:	001e8480 	.word	0x001e8480
 800a708:	003d0900 	.word	0x003d0900
 800a70c:	00516155 	.word	0x00516155
 800a710:	0061a800 	.word	0x0061a800
 800a714:	007a1200 	.word	0x007a1200
 800a718:	00a2c2aa 	.word	0x00a2c2aa
 800a71c:	00f42400 	.word	0x00f42400
 800a720:	01e84800 	.word	0x01e84800
 800a724:	0001e848 	.word	0x0001e848
 800a728:	00051615 	.word	0x00051615
 800a72c:	00061a80 	.word	0x00061a80
 800a730:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d04e      	beq.n	800a7da <UART_SetConfig+0xaea>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	2b01      	cmp	r3, #1
 800a742:	d047      	beq.n	800a7d4 <UART_SetConfig+0xae4>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d040      	beq.n	800a7ce <UART_SetConfig+0xade>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b03      	cmp	r3, #3
 800a752:	d039      	beq.n	800a7c8 <UART_SetConfig+0xad8>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d032      	beq.n	800a7c2 <UART_SetConfig+0xad2>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	2b05      	cmp	r3, #5
 800a762:	d02b      	beq.n	800a7bc <UART_SetConfig+0xacc>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b06      	cmp	r3, #6
 800a76a:	d024      	beq.n	800a7b6 <UART_SetConfig+0xac6>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b07      	cmp	r3, #7
 800a772:	d01d      	beq.n	800a7b0 <UART_SetConfig+0xac0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d016      	beq.n	800a7aa <UART_SetConfig+0xaba>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b09      	cmp	r3, #9
 800a782:	d00f      	beq.n	800a7a4 <UART_SetConfig+0xab4>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b0a      	cmp	r3, #10
 800a78a:	d008      	beq.n	800a79e <UART_SetConfig+0xaae>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b0b      	cmp	r3, #11
 800a792:	d101      	bne.n	800a798 <UART_SetConfig+0xaa8>
 800a794:	2380      	movs	r3, #128	; 0x80
 800a796:	e022      	b.n	800a7de <UART_SetConfig+0xaee>
 800a798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a79c:	e01f      	b.n	800a7de <UART_SetConfig+0xaee>
 800a79e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a2:	e01c      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7a8:	e019      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ae:	e016      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7b4:	e013      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a7ba:	e010      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a7c0:	e00d      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c6:	e00a      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7c8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a7cc:	e007      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7d2:	e004      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7d8:	e001      	b.n	800a7de <UART_SetConfig+0xaee>
 800a7da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7e0:	e003      	b.n	800a7ea <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a7e8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f001 83e8 	beq.w	800bfc2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d305      	bcc.n	800a80e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d904      	bls.n	800a818 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a814:	f001 bbd5 	b.w	800bfc2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a818:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	f000 8154 	beq.w	800aaca <UART_SetConfig+0xdda>
 800a822:	2b08      	cmp	r3, #8
 800a824:	dc06      	bgt.n	800a834 <UART_SetConfig+0xb44>
 800a826:	2b02      	cmp	r3, #2
 800a828:	d00f      	beq.n	800a84a <UART_SetConfig+0xb5a>
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	f000 80ac 	beq.w	800a988 <UART_SetConfig+0xc98>
 800a830:	f000 bc30 	b.w	800b094 <UART_SetConfig+0x13a4>
 800a834:	2b20      	cmp	r3, #32
 800a836:	f000 832d 	beq.w	800ae94 <UART_SetConfig+0x11a4>
 800a83a:	2b40      	cmp	r3, #64	; 0x40
 800a83c:	f000 83a5 	beq.w	800af8a <UART_SetConfig+0x129a>
 800a840:	2b10      	cmp	r3, #16
 800a842:	f000 81e3 	beq.w	800ac0c <UART_SetConfig+0xf1c>
 800a846:	f000 bc25 	b.w	800b094 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a84a:	f7fd fcdd 	bl	8008208 <HAL_RCCEx_GetD3PCLK1Freq>
 800a84e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	4618      	mov	r0, r3
 800a854:	f04f 0100 	mov.w	r1, #0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d067      	beq.n	800a930 <UART_SetConfig+0xc40>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	2b01      	cmp	r3, #1
 800a866:	d05e      	beq.n	800a926 <UART_SetConfig+0xc36>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d055      	beq.n	800a91c <UART_SetConfig+0xc2c>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b03      	cmp	r3, #3
 800a876:	d04c      	beq.n	800a912 <UART_SetConfig+0xc22>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d043      	beq.n	800a908 <UART_SetConfig+0xc18>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	2b05      	cmp	r3, #5
 800a886:	d03a      	beq.n	800a8fe <UART_SetConfig+0xc0e>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b06      	cmp	r3, #6
 800a88e:	d031      	beq.n	800a8f4 <UART_SetConfig+0xc04>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	2b07      	cmp	r3, #7
 800a896:	d028      	beq.n	800a8ea <UART_SetConfig+0xbfa>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d01f      	beq.n	800a8e0 <UART_SetConfig+0xbf0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b09      	cmp	r3, #9
 800a8a6:	d016      	beq.n	800a8d6 <UART_SetConfig+0xbe6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b0a      	cmp	r3, #10
 800a8ae:	d00d      	beq.n	800a8cc <UART_SetConfig+0xbdc>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b0b      	cmp	r3, #11
 800a8b6:	d104      	bne.n	800a8c2 <UART_SetConfig+0xbd2>
 800a8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8bc:	f04f 0400 	mov.w	r4, #0
 800a8c0:	e03a      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8c2:	f04f 0301 	mov.w	r3, #1
 800a8c6:	f04f 0400 	mov.w	r4, #0
 800a8ca:	e035      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a8d0:	f04f 0400 	mov.w	r4, #0
 800a8d4:	e030      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a8da:	f04f 0400 	mov.w	r4, #0
 800a8de:	e02b      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8e0:	f04f 0320 	mov.w	r3, #32
 800a8e4:	f04f 0400 	mov.w	r4, #0
 800a8e8:	e026      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8ea:	f04f 0310 	mov.w	r3, #16
 800a8ee:	f04f 0400 	mov.w	r4, #0
 800a8f2:	e021      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8f4:	f04f 030c 	mov.w	r3, #12
 800a8f8:	f04f 0400 	mov.w	r4, #0
 800a8fc:	e01c      	b.n	800a938 <UART_SetConfig+0xc48>
 800a8fe:	f04f 030a 	mov.w	r3, #10
 800a902:	f04f 0400 	mov.w	r4, #0
 800a906:	e017      	b.n	800a938 <UART_SetConfig+0xc48>
 800a908:	f04f 0308 	mov.w	r3, #8
 800a90c:	f04f 0400 	mov.w	r4, #0
 800a910:	e012      	b.n	800a938 <UART_SetConfig+0xc48>
 800a912:	f04f 0306 	mov.w	r3, #6
 800a916:	f04f 0400 	mov.w	r4, #0
 800a91a:	e00d      	b.n	800a938 <UART_SetConfig+0xc48>
 800a91c:	f04f 0304 	mov.w	r3, #4
 800a920:	f04f 0400 	mov.w	r4, #0
 800a924:	e008      	b.n	800a938 <UART_SetConfig+0xc48>
 800a926:	f04f 0302 	mov.w	r3, #2
 800a92a:	f04f 0400 	mov.w	r4, #0
 800a92e:	e003      	b.n	800a938 <UART_SetConfig+0xc48>
 800a930:	f04f 0301 	mov.w	r3, #1
 800a934:	f04f 0400 	mov.w	r4, #0
 800a938:	461a      	mov	r2, r3
 800a93a:	4623      	mov	r3, r4
 800a93c:	f7f5 fccc 	bl	80002d8 <__aeabi_uldivmod>
 800a940:	4603      	mov	r3, r0
 800a942:	460c      	mov	r4, r1
 800a944:	4619      	mov	r1, r3
 800a946:	4622      	mov	r2, r4
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	f04f 0400 	mov.w	r4, #0
 800a950:	0214      	lsls	r4, r2, #8
 800a952:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a956:	020b      	lsls	r3, r1, #8
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6852      	ldr	r2, [r2, #4]
 800a95c:	0852      	lsrs	r2, r2, #1
 800a95e:	4611      	mov	r1, r2
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	eb13 0b01 	adds.w	fp, r3, r1
 800a968:	eb44 0c02 	adc.w	ip, r4, r2
 800a96c:	4658      	mov	r0, fp
 800a96e:	4661      	mov	r1, ip
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f04f 0400 	mov.w	r4, #0
 800a978:	461a      	mov	r2, r3
 800a97a:	4623      	mov	r3, r4
 800a97c:	f7f5 fcac 	bl	80002d8 <__aeabi_uldivmod>
 800a980:	4603      	mov	r3, r0
 800a982:	460c      	mov	r4, r1
 800a984:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a986:	e389      	b.n	800b09c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a988:	f107 0318 	add.w	r3, r7, #24
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd fc51 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4618      	mov	r0, r3
 800a996:	f04f 0100 	mov.w	r1, #0
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d067      	beq.n	800aa72 <UART_SetConfig+0xd82>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d05e      	beq.n	800aa68 <UART_SetConfig+0xd78>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d055      	beq.n	800aa5e <UART_SetConfig+0xd6e>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d04c      	beq.n	800aa54 <UART_SetConfig+0xd64>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d043      	beq.n	800aa4a <UART_SetConfig+0xd5a>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d03a      	beq.n	800aa40 <UART_SetConfig+0xd50>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2b06      	cmp	r3, #6
 800a9d0:	d031      	beq.n	800aa36 <UART_SetConfig+0xd46>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	d028      	beq.n	800aa2c <UART_SetConfig+0xd3c>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b08      	cmp	r3, #8
 800a9e0:	d01f      	beq.n	800aa22 <UART_SetConfig+0xd32>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d016      	beq.n	800aa18 <UART_SetConfig+0xd28>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b0a      	cmp	r3, #10
 800a9f0:	d00d      	beq.n	800aa0e <UART_SetConfig+0xd1e>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	2b0b      	cmp	r3, #11
 800a9f8:	d104      	bne.n	800aa04 <UART_SetConfig+0xd14>
 800a9fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	e03a      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa04:	f04f 0301 	mov.w	r3, #1
 800aa08:	f04f 0400 	mov.w	r4, #0
 800aa0c:	e035      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa0e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa12:	f04f 0400 	mov.w	r4, #0
 800aa16:	e030      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa18:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa1c:	f04f 0400 	mov.w	r4, #0
 800aa20:	e02b      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa22:	f04f 0320 	mov.w	r3, #32
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	e026      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa2c:	f04f 0310 	mov.w	r3, #16
 800aa30:	f04f 0400 	mov.w	r4, #0
 800aa34:	e021      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa36:	f04f 030c 	mov.w	r3, #12
 800aa3a:	f04f 0400 	mov.w	r4, #0
 800aa3e:	e01c      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa40:	f04f 030a 	mov.w	r3, #10
 800aa44:	f04f 0400 	mov.w	r4, #0
 800aa48:	e017      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa4a:	f04f 0308 	mov.w	r3, #8
 800aa4e:	f04f 0400 	mov.w	r4, #0
 800aa52:	e012      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa54:	f04f 0306 	mov.w	r3, #6
 800aa58:	f04f 0400 	mov.w	r4, #0
 800aa5c:	e00d      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa5e:	f04f 0304 	mov.w	r3, #4
 800aa62:	f04f 0400 	mov.w	r4, #0
 800aa66:	e008      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa68:	f04f 0302 	mov.w	r3, #2
 800aa6c:	f04f 0400 	mov.w	r4, #0
 800aa70:	e003      	b.n	800aa7a <UART_SetConfig+0xd8a>
 800aa72:	f04f 0301 	mov.w	r3, #1
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	f7f5 fc2b 	bl	80002d8 <__aeabi_uldivmod>
 800aa82:	4603      	mov	r3, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	4619      	mov	r1, r3
 800aa88:	4622      	mov	r2, r4
 800aa8a:	f04f 0300 	mov.w	r3, #0
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	0214      	lsls	r4, r2, #8
 800aa94:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aa98:	020b      	lsls	r3, r1, #8
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6852      	ldr	r2, [r2, #4]
 800aa9e:	0852      	lsrs	r2, r2, #1
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	f04f 0200 	mov.w	r2, #0
 800aaa6:	eb13 0b01 	adds.w	fp, r3, r1
 800aaaa:	eb44 0c02 	adc.w	ip, r4, r2
 800aaae:	4658      	mov	r0, fp
 800aab0:	4661      	mov	r1, ip
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	461a      	mov	r2, r3
 800aabc:	4623      	mov	r3, r4
 800aabe:	f7f5 fc0b 	bl	80002d8 <__aeabi_uldivmod>
 800aac2:	4603      	mov	r3, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aac8:	e2e8      	b.n	800b09c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaca:	f107 030c 	add.w	r3, r7, #12
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fd fcfc 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f04f 0100 	mov.w	r1, #0
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d067      	beq.n	800abb4 <UART_SetConfig+0xec4>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d05e      	beq.n	800abaa <UART_SetConfig+0xeba>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d055      	beq.n	800aba0 <UART_SetConfig+0xeb0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d04c      	beq.n	800ab96 <UART_SetConfig+0xea6>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	d043      	beq.n	800ab8c <UART_SetConfig+0xe9c>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	d03a      	beq.n	800ab82 <UART_SetConfig+0xe92>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b06      	cmp	r3, #6
 800ab12:	d031      	beq.n	800ab78 <UART_SetConfig+0xe88>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b07      	cmp	r3, #7
 800ab1a:	d028      	beq.n	800ab6e <UART_SetConfig+0xe7e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d01f      	beq.n	800ab64 <UART_SetConfig+0xe74>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b09      	cmp	r3, #9
 800ab2a:	d016      	beq.n	800ab5a <UART_SetConfig+0xe6a>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b0a      	cmp	r3, #10
 800ab32:	d00d      	beq.n	800ab50 <UART_SetConfig+0xe60>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b0b      	cmp	r3, #11
 800ab3a:	d104      	bne.n	800ab46 <UART_SetConfig+0xe56>
 800ab3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab40:	f04f 0400 	mov.w	r4, #0
 800ab44:	e03a      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab46:	f04f 0301 	mov.w	r3, #1
 800ab4a:	f04f 0400 	mov.w	r4, #0
 800ab4e:	e035      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab50:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab54:	f04f 0400 	mov.w	r4, #0
 800ab58:	e030      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ab5e:	f04f 0400 	mov.w	r4, #0
 800ab62:	e02b      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab64:	f04f 0320 	mov.w	r3, #32
 800ab68:	f04f 0400 	mov.w	r4, #0
 800ab6c:	e026      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab6e:	f04f 0310 	mov.w	r3, #16
 800ab72:	f04f 0400 	mov.w	r4, #0
 800ab76:	e021      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab78:	f04f 030c 	mov.w	r3, #12
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	e01c      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab82:	f04f 030a 	mov.w	r3, #10
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	e017      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab8c:	f04f 0308 	mov.w	r3, #8
 800ab90:	f04f 0400 	mov.w	r4, #0
 800ab94:	e012      	b.n	800abbc <UART_SetConfig+0xecc>
 800ab96:	f04f 0306 	mov.w	r3, #6
 800ab9a:	f04f 0400 	mov.w	r4, #0
 800ab9e:	e00d      	b.n	800abbc <UART_SetConfig+0xecc>
 800aba0:	f04f 0304 	mov.w	r3, #4
 800aba4:	f04f 0400 	mov.w	r4, #0
 800aba8:	e008      	b.n	800abbc <UART_SetConfig+0xecc>
 800abaa:	f04f 0302 	mov.w	r3, #2
 800abae:	f04f 0400 	mov.w	r4, #0
 800abb2:	e003      	b.n	800abbc <UART_SetConfig+0xecc>
 800abb4:	f04f 0301 	mov.w	r3, #1
 800abb8:	f04f 0400 	mov.w	r4, #0
 800abbc:	461a      	mov	r2, r3
 800abbe:	4623      	mov	r3, r4
 800abc0:	f7f5 fb8a 	bl	80002d8 <__aeabi_uldivmod>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	4619      	mov	r1, r3
 800abca:	4622      	mov	r2, r4
 800abcc:	f04f 0300 	mov.w	r3, #0
 800abd0:	f04f 0400 	mov.w	r4, #0
 800abd4:	0214      	lsls	r4, r2, #8
 800abd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800abda:	020b      	lsls	r3, r1, #8
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6852      	ldr	r2, [r2, #4]
 800abe0:	0852      	lsrs	r2, r2, #1
 800abe2:	4611      	mov	r1, r2
 800abe4:	f04f 0200 	mov.w	r2, #0
 800abe8:	eb13 0b01 	adds.w	fp, r3, r1
 800abec:	eb44 0c02 	adc.w	ip, r4, r2
 800abf0:	4658      	mov	r0, fp
 800abf2:	4661      	mov	r1, ip
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	461a      	mov	r2, r3
 800abfe:	4623      	mov	r3, r4
 800ac00:	f7f5 fb6a 	bl	80002d8 <__aeabi_uldivmod>
 800ac04:	4603      	mov	r3, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac0a:	e247      	b.n	800b09c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac0c:	4b96      	ldr	r3, [pc, #600]	; (800ae68 <UART_SetConfig+0x1178>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0320 	and.w	r3, r3, #32
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 80a3 	beq.w	800ad60 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac1a:	4b93      	ldr	r3, [pc, #588]	; (800ae68 <UART_SetConfig+0x1178>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	08db      	lsrs	r3, r3, #3
 800ac20:	f003 0303 	and.w	r3, r3, #3
 800ac24:	4a91      	ldr	r2, [pc, #580]	; (800ae6c <UART_SetConfig+0x117c>)
 800ac26:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f04f 0100 	mov.w	r1, #0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d067      	beq.n	800ad08 <UART_SetConfig+0x1018>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d05e      	beq.n	800acfe <UART_SetConfig+0x100e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d055      	beq.n	800acf4 <UART_SetConfig+0x1004>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d04c      	beq.n	800acea <UART_SetConfig+0xffa>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d043      	beq.n	800ace0 <UART_SetConfig+0xff0>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b05      	cmp	r3, #5
 800ac5e:	d03a      	beq.n	800acd6 <UART_SetConfig+0xfe6>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	d031      	beq.n	800accc <UART_SetConfig+0xfdc>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	2b07      	cmp	r3, #7
 800ac6e:	d028      	beq.n	800acc2 <UART_SetConfig+0xfd2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d01f      	beq.n	800acb8 <UART_SetConfig+0xfc8>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d016      	beq.n	800acae <UART_SetConfig+0xfbe>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	2b0a      	cmp	r3, #10
 800ac86:	d00d      	beq.n	800aca4 <UART_SetConfig+0xfb4>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b0b      	cmp	r3, #11
 800ac8e:	d104      	bne.n	800ac9a <UART_SetConfig+0xfaa>
 800ac90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac94:	f04f 0400 	mov.w	r4, #0
 800ac98:	e03a      	b.n	800ad10 <UART_SetConfig+0x1020>
 800ac9a:	f04f 0301 	mov.w	r3, #1
 800ac9e:	f04f 0400 	mov.w	r4, #0
 800aca2:	e035      	b.n	800ad10 <UART_SetConfig+0x1020>
 800aca4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aca8:	f04f 0400 	mov.w	r4, #0
 800acac:	e030      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acae:	f04f 0340 	mov.w	r3, #64	; 0x40
 800acb2:	f04f 0400 	mov.w	r4, #0
 800acb6:	e02b      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acb8:	f04f 0320 	mov.w	r3, #32
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	e026      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acc2:	f04f 0310 	mov.w	r3, #16
 800acc6:	f04f 0400 	mov.w	r4, #0
 800acca:	e021      	b.n	800ad10 <UART_SetConfig+0x1020>
 800accc:	f04f 030c 	mov.w	r3, #12
 800acd0:	f04f 0400 	mov.w	r4, #0
 800acd4:	e01c      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acd6:	f04f 030a 	mov.w	r3, #10
 800acda:	f04f 0400 	mov.w	r4, #0
 800acde:	e017      	b.n	800ad10 <UART_SetConfig+0x1020>
 800ace0:	f04f 0308 	mov.w	r3, #8
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	e012      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acea:	f04f 0306 	mov.w	r3, #6
 800acee:	f04f 0400 	mov.w	r4, #0
 800acf2:	e00d      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acf4:	f04f 0304 	mov.w	r3, #4
 800acf8:	f04f 0400 	mov.w	r4, #0
 800acfc:	e008      	b.n	800ad10 <UART_SetConfig+0x1020>
 800acfe:	f04f 0302 	mov.w	r3, #2
 800ad02:	f04f 0400 	mov.w	r4, #0
 800ad06:	e003      	b.n	800ad10 <UART_SetConfig+0x1020>
 800ad08:	f04f 0301 	mov.w	r3, #1
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	461a      	mov	r2, r3
 800ad12:	4623      	mov	r3, r4
 800ad14:	f7f5 fae0 	bl	80002d8 <__aeabi_uldivmod>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4622      	mov	r2, r4
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	f04f 0400 	mov.w	r4, #0
 800ad28:	0214      	lsls	r4, r2, #8
 800ad2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad2e:	020b      	lsls	r3, r1, #8
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	6852      	ldr	r2, [r2, #4]
 800ad34:	0852      	lsrs	r2, r2, #1
 800ad36:	4611      	mov	r1, r2
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	eb13 0b01 	adds.w	fp, r3, r1
 800ad40:	eb44 0c02 	adc.w	ip, r4, r2
 800ad44:	4658      	mov	r0, fp
 800ad46:	4661      	mov	r1, ip
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f04f 0400 	mov.w	r4, #0
 800ad50:	461a      	mov	r2, r3
 800ad52:	4623      	mov	r3, r4
 800ad54:	f7f5 fac0 	bl	80002d8 <__aeabi_uldivmod>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ad5e:	e19d      	b.n	800b09c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d05b      	beq.n	800ae20 <UART_SetConfig+0x1130>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d053      	beq.n	800ae18 <UART_SetConfig+0x1128>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d04b      	beq.n	800ae10 <UART_SetConfig+0x1120>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d043      	beq.n	800ae08 <UART_SetConfig+0x1118>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d03b      	beq.n	800ae00 <UART_SetConfig+0x1110>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b05      	cmp	r3, #5
 800ad8e:	d033      	beq.n	800adf8 <UART_SetConfig+0x1108>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	2b06      	cmp	r3, #6
 800ad96:	d02b      	beq.n	800adf0 <UART_SetConfig+0x1100>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	2b07      	cmp	r3, #7
 800ad9e:	d023      	beq.n	800ade8 <UART_SetConfig+0x10f8>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d01b      	beq.n	800ade0 <UART_SetConfig+0x10f0>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	2b09      	cmp	r3, #9
 800adae:	d013      	beq.n	800add8 <UART_SetConfig+0x10e8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	2b0a      	cmp	r3, #10
 800adb6:	d00b      	beq.n	800add0 <UART_SetConfig+0x10e0>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b0b      	cmp	r3, #11
 800adbe:	d103      	bne.n	800adc8 <UART_SetConfig+0x10d8>
 800adc0:	4b2a      	ldr	r3, [pc, #168]	; (800ae6c <UART_SetConfig+0x117c>)
 800adc2:	f04f 0400 	mov.w	r4, #0
 800adc6:	e02e      	b.n	800ae26 <UART_SetConfig+0x1136>
 800adc8:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <UART_SetConfig+0x1180>)
 800adca:	f04f 0403 	mov.w	r4, #3
 800adce:	e02a      	b.n	800ae26 <UART_SetConfig+0x1136>
 800add0:	4b28      	ldr	r3, [pc, #160]	; (800ae74 <UART_SetConfig+0x1184>)
 800add2:	f04f 0400 	mov.w	r4, #0
 800add6:	e026      	b.n	800ae26 <UART_SetConfig+0x1136>
 800add8:	4b27      	ldr	r3, [pc, #156]	; (800ae78 <UART_SetConfig+0x1188>)
 800adda:	f04f 0400 	mov.w	r4, #0
 800adde:	e022      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ade0:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <UART_SetConfig+0x118c>)
 800ade2:	f04f 0400 	mov.w	r4, #0
 800ade6:	e01e      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ade8:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <UART_SetConfig+0x1190>)
 800adea:	f04f 0400 	mov.w	r4, #0
 800adee:	e01a      	b.n	800ae26 <UART_SetConfig+0x1136>
 800adf0:	a419      	add	r4, pc, #100	; (adr r4, 800ae58 <UART_SetConfig+0x1168>)
 800adf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800adf6:	e016      	b.n	800ae26 <UART_SetConfig+0x1136>
 800adf8:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <UART_SetConfig+0x1194>)
 800adfa:	f04f 0400 	mov.w	r4, #0
 800adfe:	e012      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ae00:	4b21      	ldr	r3, [pc, #132]	; (800ae88 <UART_SetConfig+0x1198>)
 800ae02:	f04f 0400 	mov.w	r4, #0
 800ae06:	e00e      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ae08:	a415      	add	r4, pc, #84	; (adr r4, 800ae60 <UART_SetConfig+0x1170>)
 800ae0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae0e:	e00a      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ae10:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <UART_SetConfig+0x119c>)
 800ae12:	f04f 0400 	mov.w	r4, #0
 800ae16:	e006      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ae18:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <UART_SetConfig+0x11a0>)
 800ae1a:	f04f 0401 	mov.w	r4, #1
 800ae1e:	e002      	b.n	800ae26 <UART_SetConfig+0x1136>
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <UART_SetConfig+0x1180>)
 800ae22:	f04f 0403 	mov.w	r4, #3
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6852      	ldr	r2, [r2, #4]
 800ae2a:	0852      	lsrs	r2, r2, #1
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	f04f 0200 	mov.w	r2, #0
 800ae32:	eb13 0b01 	adds.w	fp, r3, r1
 800ae36:	eb44 0c02 	adc.w	ip, r4, r2
 800ae3a:	4658      	mov	r0, fp
 800ae3c:	4661      	mov	r1, ip
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f04f 0400 	mov.w	r4, #0
 800ae46:	461a      	mov	r2, r3
 800ae48:	4623      	mov	r3, r4
 800ae4a:	f7f5 fa45 	bl	80002d8 <__aeabi_uldivmod>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae54:	e122      	b.n	800b09c <UART_SetConfig+0x13ac>
 800ae56:	bf00      	nop
 800ae58:	51615500 	.word	0x51615500
 800ae5c:	00000000 	.word	0x00000000
 800ae60:	a2c2aa00 	.word	0xa2c2aa00
 800ae64:	00000000 	.word	0x00000000
 800ae68:	58024400 	.word	0x58024400
 800ae6c:	03d09000 	.word	0x03d09000
 800ae70:	d0900000 	.word	0xd0900000
 800ae74:	07a12000 	.word	0x07a12000
 800ae78:	0f424000 	.word	0x0f424000
 800ae7c:	1e848000 	.word	0x1e848000
 800ae80:	3d090000 	.word	0x3d090000
 800ae84:	61a80000 	.word	0x61a80000
 800ae88:	7a120000 	.word	0x7a120000
 800ae8c:	f4240000 	.word	0xf4240000
 800ae90:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d05b      	beq.n	800af54 <UART_SetConfig+0x1264>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d053      	beq.n	800af4c <UART_SetConfig+0x125c>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d04b      	beq.n	800af44 <UART_SetConfig+0x1254>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d043      	beq.n	800af3c <UART_SetConfig+0x124c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d03b      	beq.n	800af34 <UART_SetConfig+0x1244>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	2b05      	cmp	r3, #5
 800aec2:	d033      	beq.n	800af2c <UART_SetConfig+0x123c>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	2b06      	cmp	r3, #6
 800aeca:	d02b      	beq.n	800af24 <UART_SetConfig+0x1234>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b07      	cmp	r3, #7
 800aed2:	d023      	beq.n	800af1c <UART_SetConfig+0x122c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d01b      	beq.n	800af14 <UART_SetConfig+0x1224>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b09      	cmp	r3, #9
 800aee2:	d013      	beq.n	800af0c <UART_SetConfig+0x121c>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	2b0a      	cmp	r3, #10
 800aeea:	d00b      	beq.n	800af04 <UART_SetConfig+0x1214>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	2b0b      	cmp	r3, #11
 800aef2:	d103      	bne.n	800aefc <UART_SetConfig+0x120c>
 800aef4:	4bc0      	ldr	r3, [pc, #768]	; (800b1f8 <UART_SetConfig+0x1508>)
 800aef6:	f04f 0400 	mov.w	r4, #0
 800aefa:	e02e      	b.n	800af5a <UART_SetConfig+0x126a>
 800aefc:	4bbf      	ldr	r3, [pc, #764]	; (800b1fc <UART_SetConfig+0x150c>)
 800aefe:	f04f 0400 	mov.w	r4, #0
 800af02:	e02a      	b.n	800af5a <UART_SetConfig+0x126a>
 800af04:	4bbe      	ldr	r3, [pc, #760]	; (800b200 <UART_SetConfig+0x1510>)
 800af06:	f04f 0400 	mov.w	r4, #0
 800af0a:	e026      	b.n	800af5a <UART_SetConfig+0x126a>
 800af0c:	4bbd      	ldr	r3, [pc, #756]	; (800b204 <UART_SetConfig+0x1514>)
 800af0e:	f04f 0400 	mov.w	r4, #0
 800af12:	e022      	b.n	800af5a <UART_SetConfig+0x126a>
 800af14:	4bbc      	ldr	r3, [pc, #752]	; (800b208 <UART_SetConfig+0x1518>)
 800af16:	f04f 0400 	mov.w	r4, #0
 800af1a:	e01e      	b.n	800af5a <UART_SetConfig+0x126a>
 800af1c:	4bbb      	ldr	r3, [pc, #748]	; (800b20c <UART_SetConfig+0x151c>)
 800af1e:	f04f 0400 	mov.w	r4, #0
 800af22:	e01a      	b.n	800af5a <UART_SetConfig+0x126a>
 800af24:	a4b0      	add	r4, pc, #704	; (adr r4, 800b1e8 <UART_SetConfig+0x14f8>)
 800af26:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af2a:	e016      	b.n	800af5a <UART_SetConfig+0x126a>
 800af2c:	4bb8      	ldr	r3, [pc, #736]	; (800b210 <UART_SetConfig+0x1520>)
 800af2e:	f04f 0400 	mov.w	r4, #0
 800af32:	e012      	b.n	800af5a <UART_SetConfig+0x126a>
 800af34:	4bb7      	ldr	r3, [pc, #732]	; (800b214 <UART_SetConfig+0x1524>)
 800af36:	f04f 0400 	mov.w	r4, #0
 800af3a:	e00e      	b.n	800af5a <UART_SetConfig+0x126a>
 800af3c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b1f0 <UART_SetConfig+0x1500>)
 800af3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af42:	e00a      	b.n	800af5a <UART_SetConfig+0x126a>
 800af44:	4bb4      	ldr	r3, [pc, #720]	; (800b218 <UART_SetConfig+0x1528>)
 800af46:	f04f 0400 	mov.w	r4, #0
 800af4a:	e006      	b.n	800af5a <UART_SetConfig+0x126a>
 800af4c:	4bb3      	ldr	r3, [pc, #716]	; (800b21c <UART_SetConfig+0x152c>)
 800af4e:	f04f 0400 	mov.w	r4, #0
 800af52:	e002      	b.n	800af5a <UART_SetConfig+0x126a>
 800af54:	4ba9      	ldr	r3, [pc, #676]	; (800b1fc <UART_SetConfig+0x150c>)
 800af56:	f04f 0400 	mov.w	r4, #0
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	6852      	ldr	r2, [r2, #4]
 800af5e:	0852      	lsrs	r2, r2, #1
 800af60:	4611      	mov	r1, r2
 800af62:	f04f 0200 	mov.w	r2, #0
 800af66:	eb13 0b01 	adds.w	fp, r3, r1
 800af6a:	eb44 0c02 	adc.w	ip, r4, r2
 800af6e:	4658      	mov	r0, fp
 800af70:	4661      	mov	r1, ip
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f04f 0400 	mov.w	r4, #0
 800af7a:	461a      	mov	r2, r3
 800af7c:	4623      	mov	r3, r4
 800af7e:	f7f5 f9ab 	bl	80002d8 <__aeabi_uldivmod>
 800af82:	4603      	mov	r3, r0
 800af84:	460c      	mov	r4, r1
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af88:	e088      	b.n	800b09c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d064      	beq.n	800b05c <UART_SetConfig+0x136c>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	2b01      	cmp	r3, #1
 800af98:	d05b      	beq.n	800b052 <UART_SetConfig+0x1362>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d052      	beq.n	800b048 <UART_SetConfig+0x1358>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d04a      	beq.n	800b040 <UART_SetConfig+0x1350>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d041      	beq.n	800b036 <UART_SetConfig+0x1346>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d039      	beq.n	800b02e <UART_SetConfig+0x133e>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d031      	beq.n	800b026 <UART_SetConfig+0x1336>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	2b07      	cmp	r3, #7
 800afc8:	d028      	beq.n	800b01c <UART_SetConfig+0x132c>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	2b08      	cmp	r3, #8
 800afd0:	d01f      	beq.n	800b012 <UART_SetConfig+0x1322>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2b09      	cmp	r3, #9
 800afd8:	d016      	beq.n	800b008 <UART_SetConfig+0x1318>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	2b0a      	cmp	r3, #10
 800afe0:	d00d      	beq.n	800affe <UART_SetConfig+0x130e>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b0b      	cmp	r3, #11
 800afe8:	d104      	bne.n	800aff4 <UART_SetConfig+0x1304>
 800afea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afee:	f04f 0400 	mov.w	r4, #0
 800aff2:	e037      	b.n	800b064 <UART_SetConfig+0x1374>
 800aff4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aff8:	f04f 0400 	mov.w	r4, #0
 800affc:	e032      	b.n	800b064 <UART_SetConfig+0x1374>
 800affe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b002:	f04f 0400 	mov.w	r4, #0
 800b006:	e02d      	b.n	800b064 <UART_SetConfig+0x1374>
 800b008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b00c:	f04f 0400 	mov.w	r4, #0
 800b010:	e028      	b.n	800b064 <UART_SetConfig+0x1374>
 800b012:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b016:	f04f 0400 	mov.w	r4, #0
 800b01a:	e023      	b.n	800b064 <UART_SetConfig+0x1374>
 800b01c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b020:	f04f 0400 	mov.w	r4, #0
 800b024:	e01e      	b.n	800b064 <UART_SetConfig+0x1374>
 800b026:	4b7e      	ldr	r3, [pc, #504]	; (800b220 <UART_SetConfig+0x1530>)
 800b028:	f04f 0400 	mov.w	r4, #0
 800b02c:	e01a      	b.n	800b064 <UART_SetConfig+0x1374>
 800b02e:	4b7d      	ldr	r3, [pc, #500]	; (800b224 <UART_SetConfig+0x1534>)
 800b030:	f04f 0400 	mov.w	r4, #0
 800b034:	e016      	b.n	800b064 <UART_SetConfig+0x1374>
 800b036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b03a:	f04f 0400 	mov.w	r4, #0
 800b03e:	e011      	b.n	800b064 <UART_SetConfig+0x1374>
 800b040:	4b79      	ldr	r3, [pc, #484]	; (800b228 <UART_SetConfig+0x1538>)
 800b042:	f04f 0400 	mov.w	r4, #0
 800b046:	e00d      	b.n	800b064 <UART_SetConfig+0x1374>
 800b048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b04c:	f04f 0400 	mov.w	r4, #0
 800b050:	e008      	b.n	800b064 <UART_SetConfig+0x1374>
 800b052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b056:	f04f 0400 	mov.w	r4, #0
 800b05a:	e003      	b.n	800b064 <UART_SetConfig+0x1374>
 800b05c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b060:	f04f 0400 	mov.w	r4, #0
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	6852      	ldr	r2, [r2, #4]
 800b068:	0852      	lsrs	r2, r2, #1
 800b06a:	4611      	mov	r1, r2
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	eb13 0b01 	adds.w	fp, r3, r1
 800b074:	eb44 0c02 	adc.w	ip, r4, r2
 800b078:	4658      	mov	r0, fp
 800b07a:	4661      	mov	r1, ip
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f04f 0400 	mov.w	r4, #0
 800b084:	461a      	mov	r2, r3
 800b086:	4623      	mov	r3, r4
 800b088:	f7f5 f926 	bl	80002d8 <__aeabi_uldivmod>
 800b08c:	4603      	mov	r3, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b092:	e003      	b.n	800b09c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b09a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0a2:	d309      	bcc.n	800b0b8 <UART_SetConfig+0x13c8>
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0aa:	d205      	bcs.n	800b0b8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0b2:	60da      	str	r2, [r3, #12]
 800b0b4:	f000 bf85 	b.w	800bfc2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	f000 bf80 	b.w	800bfc2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ca:	f040 83da 	bne.w	800b882 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b0ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0d2:	2b40      	cmp	r3, #64	; 0x40
 800b0d4:	f200 83b3 	bhi.w	800b83e <UART_SetConfig+0x1b4e>
 800b0d8:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <UART_SetConfig+0x13f0>)
 800b0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0de:	bf00      	nop
 800b0e0:	0800b22d 	.word	0x0800b22d
 800b0e4:	0800b2e5 	.word	0x0800b2e5
 800b0e8:	0800b83f 	.word	0x0800b83f
 800b0ec:	0800b83f 	.word	0x0800b83f
 800b0f0:	0800b39d 	.word	0x0800b39d
 800b0f4:	0800b83f 	.word	0x0800b83f
 800b0f8:	0800b83f 	.word	0x0800b83f
 800b0fc:	0800b83f 	.word	0x0800b83f
 800b100:	0800b459 	.word	0x0800b459
 800b104:	0800b83f 	.word	0x0800b83f
 800b108:	0800b83f 	.word	0x0800b83f
 800b10c:	0800b83f 	.word	0x0800b83f
 800b110:	0800b83f 	.word	0x0800b83f
 800b114:	0800b83f 	.word	0x0800b83f
 800b118:	0800b83f 	.word	0x0800b83f
 800b11c:	0800b83f 	.word	0x0800b83f
 800b120:	0800b515 	.word	0x0800b515
 800b124:	0800b83f 	.word	0x0800b83f
 800b128:	0800b83f 	.word	0x0800b83f
 800b12c:	0800b83f 	.word	0x0800b83f
 800b130:	0800b83f 	.word	0x0800b83f
 800b134:	0800b83f 	.word	0x0800b83f
 800b138:	0800b83f 	.word	0x0800b83f
 800b13c:	0800b83f 	.word	0x0800b83f
 800b140:	0800b83f 	.word	0x0800b83f
 800b144:	0800b83f 	.word	0x0800b83f
 800b148:	0800b83f 	.word	0x0800b83f
 800b14c:	0800b83f 	.word	0x0800b83f
 800b150:	0800b83f 	.word	0x0800b83f
 800b154:	0800b83f 	.word	0x0800b83f
 800b158:	0800b83f 	.word	0x0800b83f
 800b15c:	0800b83f 	.word	0x0800b83f
 800b160:	0800b687 	.word	0x0800b687
 800b164:	0800b83f 	.word	0x0800b83f
 800b168:	0800b83f 	.word	0x0800b83f
 800b16c:	0800b83f 	.word	0x0800b83f
 800b170:	0800b83f 	.word	0x0800b83f
 800b174:	0800b83f 	.word	0x0800b83f
 800b178:	0800b83f 	.word	0x0800b83f
 800b17c:	0800b83f 	.word	0x0800b83f
 800b180:	0800b83f 	.word	0x0800b83f
 800b184:	0800b83f 	.word	0x0800b83f
 800b188:	0800b83f 	.word	0x0800b83f
 800b18c:	0800b83f 	.word	0x0800b83f
 800b190:	0800b83f 	.word	0x0800b83f
 800b194:	0800b83f 	.word	0x0800b83f
 800b198:	0800b83f 	.word	0x0800b83f
 800b19c:	0800b83f 	.word	0x0800b83f
 800b1a0:	0800b83f 	.word	0x0800b83f
 800b1a4:	0800b83f 	.word	0x0800b83f
 800b1a8:	0800b83f 	.word	0x0800b83f
 800b1ac:	0800b83f 	.word	0x0800b83f
 800b1b0:	0800b83f 	.word	0x0800b83f
 800b1b4:	0800b83f 	.word	0x0800b83f
 800b1b8:	0800b83f 	.word	0x0800b83f
 800b1bc:	0800b83f 	.word	0x0800b83f
 800b1c0:	0800b83f 	.word	0x0800b83f
 800b1c4:	0800b83f 	.word	0x0800b83f
 800b1c8:	0800b83f 	.word	0x0800b83f
 800b1cc:	0800b83f 	.word	0x0800b83f
 800b1d0:	0800b83f 	.word	0x0800b83f
 800b1d4:	0800b83f 	.word	0x0800b83f
 800b1d8:	0800b83f 	.word	0x0800b83f
 800b1dc:	0800b83f 	.word	0x0800b83f
 800b1e0:	0800b77d 	.word	0x0800b77d
 800b1e4:	f3af 8000 	nop.w
 800b1e8:	05161500 	.word	0x05161500
 800b1ec:	00000000 	.word	0x00000000
 800b1f0:	0a2c2a00 	.word	0x0a2c2a00
 800b1f4:	00000000 	.word	0x00000000
 800b1f8:	003d0900 	.word	0x003d0900
 800b1fc:	3d090000 	.word	0x3d090000
 800b200:	007a1200 	.word	0x007a1200
 800b204:	00f42400 	.word	0x00f42400
 800b208:	01e84800 	.word	0x01e84800
 800b20c:	03d09000 	.word	0x03d09000
 800b210:	061a8000 	.word	0x061a8000
 800b214:	07a12000 	.word	0x07a12000
 800b218:	0f424000 	.word	0x0f424000
 800b21c:	1e848000 	.word	0x1e848000
 800b220:	000aaa00 	.word	0x000aaa00
 800b224:	000ccc00 	.word	0x000ccc00
 800b228:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b22c:	f7fb fe6a 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800b230:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	d044      	beq.n	800b2c4 <UART_SetConfig+0x15d4>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d03e      	beq.n	800b2c0 <UART_SetConfig+0x15d0>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	2b02      	cmp	r3, #2
 800b248:	d038      	beq.n	800b2bc <UART_SetConfig+0x15cc>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d032      	beq.n	800b2b8 <UART_SetConfig+0x15c8>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b04      	cmp	r3, #4
 800b258:	d02c      	beq.n	800b2b4 <UART_SetConfig+0x15c4>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2b05      	cmp	r3, #5
 800b260:	d026      	beq.n	800b2b0 <UART_SetConfig+0x15c0>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b06      	cmp	r3, #6
 800b268:	d020      	beq.n	800b2ac <UART_SetConfig+0x15bc>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26e:	2b07      	cmp	r3, #7
 800b270:	d01a      	beq.n	800b2a8 <UART_SetConfig+0x15b8>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	2b08      	cmp	r3, #8
 800b278:	d014      	beq.n	800b2a4 <UART_SetConfig+0x15b4>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b09      	cmp	r3, #9
 800b280:	d00e      	beq.n	800b2a0 <UART_SetConfig+0x15b0>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b0a      	cmp	r3, #10
 800b288:	d008      	beq.n	800b29c <UART_SetConfig+0x15ac>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b0b      	cmp	r3, #11
 800b290:	d102      	bne.n	800b298 <UART_SetConfig+0x15a8>
 800b292:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b296:	e016      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b298:	2301      	movs	r3, #1
 800b29a:	e014      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b29c:	2380      	movs	r3, #128	; 0x80
 800b29e:	e012      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2a0:	2340      	movs	r3, #64	; 0x40
 800b2a2:	e010      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2a4:	2320      	movs	r3, #32
 800b2a6:	e00e      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2a8:	2310      	movs	r3, #16
 800b2aa:	e00c      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2ac:	230c      	movs	r3, #12
 800b2ae:	e00a      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2b0:	230a      	movs	r3, #10
 800b2b2:	e008      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	e006      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2b8:	2306      	movs	r3, #6
 800b2ba:	e004      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2bc:	2304      	movs	r3, #4
 800b2be:	e002      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e000      	b.n	800b2c6 <UART_SetConfig+0x15d6>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2cc:	005a      	lsls	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	441a      	add	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2e2:	e2b0      	b.n	800b846 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2e4:	f7fb fe24 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 800b2e8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d044      	beq.n	800b37c <UART_SetConfig+0x168c>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d03e      	beq.n	800b378 <UART_SetConfig+0x1688>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d038      	beq.n	800b374 <UART_SetConfig+0x1684>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	2b03      	cmp	r3, #3
 800b308:	d032      	beq.n	800b370 <UART_SetConfig+0x1680>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d02c      	beq.n	800b36c <UART_SetConfig+0x167c>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b05      	cmp	r3, #5
 800b318:	d026      	beq.n	800b368 <UART_SetConfig+0x1678>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	2b06      	cmp	r3, #6
 800b320:	d020      	beq.n	800b364 <UART_SetConfig+0x1674>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	2b07      	cmp	r3, #7
 800b328:	d01a      	beq.n	800b360 <UART_SetConfig+0x1670>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b08      	cmp	r3, #8
 800b330:	d014      	beq.n	800b35c <UART_SetConfig+0x166c>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	2b09      	cmp	r3, #9
 800b338:	d00e      	beq.n	800b358 <UART_SetConfig+0x1668>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	2b0a      	cmp	r3, #10
 800b340:	d008      	beq.n	800b354 <UART_SetConfig+0x1664>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b0b      	cmp	r3, #11
 800b348:	d102      	bne.n	800b350 <UART_SetConfig+0x1660>
 800b34a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b34e:	e016      	b.n	800b37e <UART_SetConfig+0x168e>
 800b350:	2301      	movs	r3, #1
 800b352:	e014      	b.n	800b37e <UART_SetConfig+0x168e>
 800b354:	2380      	movs	r3, #128	; 0x80
 800b356:	e012      	b.n	800b37e <UART_SetConfig+0x168e>
 800b358:	2340      	movs	r3, #64	; 0x40
 800b35a:	e010      	b.n	800b37e <UART_SetConfig+0x168e>
 800b35c:	2320      	movs	r3, #32
 800b35e:	e00e      	b.n	800b37e <UART_SetConfig+0x168e>
 800b360:	2310      	movs	r3, #16
 800b362:	e00c      	b.n	800b37e <UART_SetConfig+0x168e>
 800b364:	230c      	movs	r3, #12
 800b366:	e00a      	b.n	800b37e <UART_SetConfig+0x168e>
 800b368:	230a      	movs	r3, #10
 800b36a:	e008      	b.n	800b37e <UART_SetConfig+0x168e>
 800b36c:	2308      	movs	r3, #8
 800b36e:	e006      	b.n	800b37e <UART_SetConfig+0x168e>
 800b370:	2306      	movs	r3, #6
 800b372:	e004      	b.n	800b37e <UART_SetConfig+0x168e>
 800b374:	2304      	movs	r3, #4
 800b376:	e002      	b.n	800b37e <UART_SetConfig+0x168e>
 800b378:	2302      	movs	r3, #2
 800b37a:	e000      	b.n	800b37e <UART_SetConfig+0x168e>
 800b37c:	2301      	movs	r3, #1
 800b37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b380:	fbb2 f3f3 	udiv	r3, r2, r3
 800b384:	005a      	lsls	r2, r3, #1
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	085b      	lsrs	r3, r3, #1
 800b38c:	441a      	add	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	fbb2 f3f3 	udiv	r3, r2, r3
 800b396:	b29b      	uxth	r3, r3
 800b398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b39a:	e254      	b.n	800b846 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b39c:	f107 0318 	add.w	r3, r7, #24
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fc ff47 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3a6:	69fa      	ldr	r2, [r7, #28]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d044      	beq.n	800b43a <UART_SetConfig+0x174a>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d03e      	beq.n	800b436 <UART_SetConfig+0x1746>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d038      	beq.n	800b432 <UART_SetConfig+0x1742>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d032      	beq.n	800b42e <UART_SetConfig+0x173e>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d02c      	beq.n	800b42a <UART_SetConfig+0x173a>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	2b05      	cmp	r3, #5
 800b3d6:	d026      	beq.n	800b426 <UART_SetConfig+0x1736>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	2b06      	cmp	r3, #6
 800b3de:	d020      	beq.n	800b422 <UART_SetConfig+0x1732>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e4:	2b07      	cmp	r3, #7
 800b3e6:	d01a      	beq.n	800b41e <UART_SetConfig+0x172e>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d014      	beq.n	800b41a <UART_SetConfig+0x172a>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d00e      	beq.n	800b416 <UART_SetConfig+0x1726>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	2b0a      	cmp	r3, #10
 800b3fe:	d008      	beq.n	800b412 <UART_SetConfig+0x1722>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	2b0b      	cmp	r3, #11
 800b406:	d102      	bne.n	800b40e <UART_SetConfig+0x171e>
 800b408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b40c:	e016      	b.n	800b43c <UART_SetConfig+0x174c>
 800b40e:	2301      	movs	r3, #1
 800b410:	e014      	b.n	800b43c <UART_SetConfig+0x174c>
 800b412:	2380      	movs	r3, #128	; 0x80
 800b414:	e012      	b.n	800b43c <UART_SetConfig+0x174c>
 800b416:	2340      	movs	r3, #64	; 0x40
 800b418:	e010      	b.n	800b43c <UART_SetConfig+0x174c>
 800b41a:	2320      	movs	r3, #32
 800b41c:	e00e      	b.n	800b43c <UART_SetConfig+0x174c>
 800b41e:	2310      	movs	r3, #16
 800b420:	e00c      	b.n	800b43c <UART_SetConfig+0x174c>
 800b422:	230c      	movs	r3, #12
 800b424:	e00a      	b.n	800b43c <UART_SetConfig+0x174c>
 800b426:	230a      	movs	r3, #10
 800b428:	e008      	b.n	800b43c <UART_SetConfig+0x174c>
 800b42a:	2308      	movs	r3, #8
 800b42c:	e006      	b.n	800b43c <UART_SetConfig+0x174c>
 800b42e:	2306      	movs	r3, #6
 800b430:	e004      	b.n	800b43c <UART_SetConfig+0x174c>
 800b432:	2304      	movs	r3, #4
 800b434:	e002      	b.n	800b43c <UART_SetConfig+0x174c>
 800b436:	2302      	movs	r3, #2
 800b438:	e000      	b.n	800b43c <UART_SetConfig+0x174c>
 800b43a:	2301      	movs	r3, #1
 800b43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b440:	005a      	lsls	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	085b      	lsrs	r3, r3, #1
 800b448:	441a      	add	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b452:	b29b      	uxth	r3, r3
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b456:	e1f6      	b.n	800b846 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b458:	f107 030c 	add.w	r3, r7, #12
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fd f835 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d044      	beq.n	800b4f6 <UART_SetConfig+0x1806>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	2b01      	cmp	r3, #1
 800b472:	d03e      	beq.n	800b4f2 <UART_SetConfig+0x1802>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d038      	beq.n	800b4ee <UART_SetConfig+0x17fe>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	2b03      	cmp	r3, #3
 800b482:	d032      	beq.n	800b4ea <UART_SetConfig+0x17fa>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d02c      	beq.n	800b4e6 <UART_SetConfig+0x17f6>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2b05      	cmp	r3, #5
 800b492:	d026      	beq.n	800b4e2 <UART_SetConfig+0x17f2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b06      	cmp	r3, #6
 800b49a:	d020      	beq.n	800b4de <UART_SetConfig+0x17ee>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	2b07      	cmp	r3, #7
 800b4a2:	d01a      	beq.n	800b4da <UART_SetConfig+0x17ea>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	2b08      	cmp	r3, #8
 800b4aa:	d014      	beq.n	800b4d6 <UART_SetConfig+0x17e6>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d00e      	beq.n	800b4d2 <UART_SetConfig+0x17e2>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	2b0a      	cmp	r3, #10
 800b4ba:	d008      	beq.n	800b4ce <UART_SetConfig+0x17de>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	2b0b      	cmp	r3, #11
 800b4c2:	d102      	bne.n	800b4ca <UART_SetConfig+0x17da>
 800b4c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c8:	e016      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e014      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4ce:	2380      	movs	r3, #128	; 0x80
 800b4d0:	e012      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	e010      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4d6:	2320      	movs	r3, #32
 800b4d8:	e00e      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4da:	2310      	movs	r3, #16
 800b4dc:	e00c      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	e00a      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	e008      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	e006      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4ea:	2306      	movs	r3, #6
 800b4ec:	e004      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4ee:	2304      	movs	r3, #4
 800b4f0:	e002      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e000      	b.n	800b4f8 <UART_SetConfig+0x1808>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fc:	005a      	lsls	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	441a      	add	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50e:	b29b      	uxth	r3, r3
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b512:	e198      	b.n	800b846 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b514:	4b87      	ldr	r3, [pc, #540]	; (800b734 <UART_SetConfig+0x1a44>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d05e      	beq.n	800b5de <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b520:	4b84      	ldr	r3, [pc, #528]	; (800b734 <UART_SetConfig+0x1a44>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	08db      	lsrs	r3, r3, #3
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	4a83      	ldr	r2, [pc, #524]	; (800b738 <UART_SetConfig+0x1a48>)
 800b52c:	40da      	lsrs	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	2b00      	cmp	r3, #0
 800b534:	d044      	beq.n	800b5c0 <UART_SetConfig+0x18d0>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d03e      	beq.n	800b5bc <UART_SetConfig+0x18cc>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	2b02      	cmp	r3, #2
 800b544:	d038      	beq.n	800b5b8 <UART_SetConfig+0x18c8>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d032      	beq.n	800b5b4 <UART_SetConfig+0x18c4>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	2b04      	cmp	r3, #4
 800b554:	d02c      	beq.n	800b5b0 <UART_SetConfig+0x18c0>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d026      	beq.n	800b5ac <UART_SetConfig+0x18bc>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b562:	2b06      	cmp	r3, #6
 800b564:	d020      	beq.n	800b5a8 <UART_SetConfig+0x18b8>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56a:	2b07      	cmp	r3, #7
 800b56c:	d01a      	beq.n	800b5a4 <UART_SetConfig+0x18b4>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	2b08      	cmp	r3, #8
 800b574:	d014      	beq.n	800b5a0 <UART_SetConfig+0x18b0>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b09      	cmp	r3, #9
 800b57c:	d00e      	beq.n	800b59c <UART_SetConfig+0x18ac>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2b0a      	cmp	r3, #10
 800b584:	d008      	beq.n	800b598 <UART_SetConfig+0x18a8>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	2b0b      	cmp	r3, #11
 800b58c:	d102      	bne.n	800b594 <UART_SetConfig+0x18a4>
 800b58e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b592:	e016      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b594:	2301      	movs	r3, #1
 800b596:	e014      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b598:	2380      	movs	r3, #128	; 0x80
 800b59a:	e012      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b59c:	2340      	movs	r3, #64	; 0x40
 800b59e:	e010      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	e00e      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	e00c      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5a8:	230c      	movs	r3, #12
 800b5aa:	e00a      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5ac:	230a      	movs	r3, #10
 800b5ae:	e008      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5b0:	2308      	movs	r3, #8
 800b5b2:	e006      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5b4:	2306      	movs	r3, #6
 800b5b6:	e004      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5b8:	2304      	movs	r3, #4
 800b5ba:	e002      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5bc:	2302      	movs	r3, #2
 800b5be:	e000      	b.n	800b5c2 <UART_SetConfig+0x18d2>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c6:	005a      	lsls	r2, r3, #1
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	085b      	lsrs	r3, r3, #1
 800b5ce:	441a      	add	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b5dc:	e133      	b.n	800b846 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d043      	beq.n	800b66e <UART_SetConfig+0x197e>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d03d      	beq.n	800b66a <UART_SetConfig+0x197a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d037      	beq.n	800b666 <UART_SetConfig+0x1976>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d031      	beq.n	800b662 <UART_SetConfig+0x1972>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b602:	2b04      	cmp	r3, #4
 800b604:	d02b      	beq.n	800b65e <UART_SetConfig+0x196e>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	2b05      	cmp	r3, #5
 800b60c:	d025      	beq.n	800b65a <UART_SetConfig+0x196a>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	2b06      	cmp	r3, #6
 800b614:	d01f      	beq.n	800b656 <UART_SetConfig+0x1966>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	d019      	beq.n	800b652 <UART_SetConfig+0x1962>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	2b08      	cmp	r3, #8
 800b624:	d013      	beq.n	800b64e <UART_SetConfig+0x195e>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	2b09      	cmp	r3, #9
 800b62c:	d00d      	beq.n	800b64a <UART_SetConfig+0x195a>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	2b0a      	cmp	r3, #10
 800b634:	d007      	beq.n	800b646 <UART_SetConfig+0x1956>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	2b0b      	cmp	r3, #11
 800b63c:	d101      	bne.n	800b642 <UART_SetConfig+0x1952>
 800b63e:	4b3f      	ldr	r3, [pc, #252]	; (800b73c <UART_SetConfig+0x1a4c>)
 800b640:	e016      	b.n	800b670 <UART_SetConfig+0x1980>
 800b642:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <UART_SetConfig+0x1a50>)
 800b644:	e014      	b.n	800b670 <UART_SetConfig+0x1980>
 800b646:	4b3f      	ldr	r3, [pc, #252]	; (800b744 <UART_SetConfig+0x1a54>)
 800b648:	e012      	b.n	800b670 <UART_SetConfig+0x1980>
 800b64a:	4b3f      	ldr	r3, [pc, #252]	; (800b748 <UART_SetConfig+0x1a58>)
 800b64c:	e010      	b.n	800b670 <UART_SetConfig+0x1980>
 800b64e:	4b3f      	ldr	r3, [pc, #252]	; (800b74c <UART_SetConfig+0x1a5c>)
 800b650:	e00e      	b.n	800b670 <UART_SetConfig+0x1980>
 800b652:	4b3f      	ldr	r3, [pc, #252]	; (800b750 <UART_SetConfig+0x1a60>)
 800b654:	e00c      	b.n	800b670 <UART_SetConfig+0x1980>
 800b656:	4b3f      	ldr	r3, [pc, #252]	; (800b754 <UART_SetConfig+0x1a64>)
 800b658:	e00a      	b.n	800b670 <UART_SetConfig+0x1980>
 800b65a:	4b3f      	ldr	r3, [pc, #252]	; (800b758 <UART_SetConfig+0x1a68>)
 800b65c:	e008      	b.n	800b670 <UART_SetConfig+0x1980>
 800b65e:	4b3f      	ldr	r3, [pc, #252]	; (800b75c <UART_SetConfig+0x1a6c>)
 800b660:	e006      	b.n	800b670 <UART_SetConfig+0x1980>
 800b662:	4b3f      	ldr	r3, [pc, #252]	; (800b760 <UART_SetConfig+0x1a70>)
 800b664:	e004      	b.n	800b670 <UART_SetConfig+0x1980>
 800b666:	4b3f      	ldr	r3, [pc, #252]	; (800b764 <UART_SetConfig+0x1a74>)
 800b668:	e002      	b.n	800b670 <UART_SetConfig+0x1980>
 800b66a:	4b33      	ldr	r3, [pc, #204]	; (800b738 <UART_SetConfig+0x1a48>)
 800b66c:	e000      	b.n	800b670 <UART_SetConfig+0x1980>
 800b66e:	4b34      	ldr	r3, [pc, #208]	; (800b740 <UART_SetConfig+0x1a50>)
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6852      	ldr	r2, [r2, #4]
 800b674:	0852      	lsrs	r2, r2, #1
 800b676:	441a      	add	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b680:	b29b      	uxth	r3, r3
 800b682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b684:	e0df      	b.n	800b846 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d045      	beq.n	800b71a <UART_SetConfig+0x1a2a>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	2b01      	cmp	r3, #1
 800b694:	d03f      	beq.n	800b716 <UART_SetConfig+0x1a26>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d039      	beq.n	800b712 <UART_SetConfig+0x1a22>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d033      	beq.n	800b70e <UART_SetConfig+0x1a1e>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d02d      	beq.n	800b70a <UART_SetConfig+0x1a1a>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b2:	2b05      	cmp	r3, #5
 800b6b4:	d027      	beq.n	800b706 <UART_SetConfig+0x1a16>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ba:	2b06      	cmp	r3, #6
 800b6bc:	d021      	beq.n	800b702 <UART_SetConfig+0x1a12>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	2b07      	cmp	r3, #7
 800b6c4:	d01b      	beq.n	800b6fe <UART_SetConfig+0x1a0e>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d015      	beq.n	800b6fa <UART_SetConfig+0x1a0a>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	2b09      	cmp	r3, #9
 800b6d4:	d00f      	beq.n	800b6f6 <UART_SetConfig+0x1a06>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	2b0a      	cmp	r3, #10
 800b6dc:	d008      	beq.n	800b6f0 <UART_SetConfig+0x1a00>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	2b0b      	cmp	r3, #11
 800b6e4:	d102      	bne.n	800b6ec <UART_SetConfig+0x19fc>
 800b6e6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b6ea:	e017      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b6ec:	4b18      	ldr	r3, [pc, #96]	; (800b750 <UART_SetConfig+0x1a60>)
 800b6ee:	e015      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b6f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b6f4:	e012      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b6f6:	4b1c      	ldr	r3, [pc, #112]	; (800b768 <UART_SetConfig+0x1a78>)
 800b6f8:	e010      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b6fa:	4b1c      	ldr	r3, [pc, #112]	; (800b76c <UART_SetConfig+0x1a7c>)
 800b6fc:	e00e      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <UART_SetConfig+0x1a4c>)
 800b700:	e00c      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b702:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <UART_SetConfig+0x1a80>)
 800b704:	e00a      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b706:	4b1b      	ldr	r3, [pc, #108]	; (800b774 <UART_SetConfig+0x1a84>)
 800b708:	e008      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b70a:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <UART_SetConfig+0x1a54>)
 800b70c:	e006      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b70e:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <UART_SetConfig+0x1a88>)
 800b710:	e004      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <UART_SetConfig+0x1a58>)
 800b714:	e002      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <UART_SetConfig+0x1a5c>)
 800b718:	e000      	b.n	800b71c <UART_SetConfig+0x1a2c>
 800b71a:	4b0d      	ldr	r3, [pc, #52]	; (800b750 <UART_SetConfig+0x1a60>)
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6852      	ldr	r2, [r2, #4]
 800b720:	0852      	lsrs	r2, r2, #1
 800b722:	441a      	add	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	fbb2 f3f3 	udiv	r3, r2, r3
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b730:	e089      	b.n	800b846 <UART_SetConfig+0x1b56>
 800b732:	bf00      	nop
 800b734:	58024400 	.word	0x58024400
 800b738:	03d09000 	.word	0x03d09000
 800b73c:	0007a120 	.word	0x0007a120
 800b740:	07a12000 	.word	0x07a12000
 800b744:	000f4240 	.word	0x000f4240
 800b748:	001e8480 	.word	0x001e8480
 800b74c:	003d0900 	.word	0x003d0900
 800b750:	007a1200 	.word	0x007a1200
 800b754:	00a2c2aa 	.word	0x00a2c2aa
 800b758:	00c35000 	.word	0x00c35000
 800b75c:	00f42400 	.word	0x00f42400
 800b760:	01458554 	.word	0x01458554
 800b764:	01e84800 	.word	0x01e84800
 800b768:	0001e848 	.word	0x0001e848
 800b76c:	0003d090 	.word	0x0003d090
 800b770:	000a2c2a 	.word	0x000a2c2a
 800b774:	000c3500 	.word	0x000c3500
 800b778:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	2b00      	cmp	r3, #0
 800b782:	d04f      	beq.n	800b824 <UART_SetConfig+0x1b34>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d048      	beq.n	800b81e <UART_SetConfig+0x1b2e>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	2b02      	cmp	r3, #2
 800b792:	d041      	beq.n	800b818 <UART_SetConfig+0x1b28>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d03a      	beq.n	800b812 <UART_SetConfig+0x1b22>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	2b04      	cmp	r3, #4
 800b7a2:	d033      	beq.n	800b80c <UART_SetConfig+0x1b1c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	2b05      	cmp	r3, #5
 800b7aa:	d02c      	beq.n	800b806 <UART_SetConfig+0x1b16>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	2b06      	cmp	r3, #6
 800b7b2:	d025      	beq.n	800b800 <UART_SetConfig+0x1b10>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	2b07      	cmp	r3, #7
 800b7ba:	d01e      	beq.n	800b7fa <UART_SetConfig+0x1b0a>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d017      	beq.n	800b7f4 <UART_SetConfig+0x1b04>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	2b09      	cmp	r3, #9
 800b7ca:	d010      	beq.n	800b7ee <UART_SetConfig+0x1afe>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	2b0a      	cmp	r3, #10
 800b7d2:	d009      	beq.n	800b7e8 <UART_SetConfig+0x1af8>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	2b0b      	cmp	r3, #11
 800b7da:	d102      	bne.n	800b7e2 <UART_SetConfig+0x1af2>
 800b7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e0:	e022      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b7e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7e6:	e01f      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7ec:	e01c      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f2:	e019      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b7f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7f8:	e016      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b7fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7fe:	e013      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b800:	f241 5354 	movw	r3, #5460	; 0x1554
 800b804:	e010      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b806:	f641 1398 	movw	r3, #6552	; 0x1998
 800b80a:	e00d      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b80c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b810:	e00a      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b812:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b816:	e007      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b81c:	e004      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b81e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b822:	e001      	b.n	800b828 <UART_SetConfig+0x1b38>
 800b824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6852      	ldr	r2, [r2, #4]
 800b82c:	0852      	lsrs	r2, r2, #1
 800b82e:	441a      	add	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	fbb2 f3f3 	udiv	r3, r2, r3
 800b838:	b29b      	uxth	r3, r3
 800b83a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b83c:	e003      	b.n	800b846 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	2b0f      	cmp	r3, #15
 800b84a:	d916      	bls.n	800b87a <UART_SetConfig+0x1b8a>
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b852:	d212      	bcs.n	800b87a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b856:	b29b      	uxth	r3, r3
 800b858:	f023 030f 	bic.w	r3, r3, #15
 800b85c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	b29b      	uxth	r3, r3
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	b29a      	uxth	r2, r3
 800b86a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b86c:	4313      	orrs	r3, r2
 800b86e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b876:	60da      	str	r2, [r3, #12]
 800b878:	e3a3      	b.n	800bfc2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b880:	e39f      	b.n	800bfc2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b882:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	f200 8388 	bhi.w	800bf9c <UART_SetConfig+0x22ac>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <UART_SetConfig+0x1ba4>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b999 	.word	0x0800b999
 800b898:	0800ba4f 	.word	0x0800ba4f
 800b89c:	0800bf9d 	.word	0x0800bf9d
 800b8a0:	0800bf9d 	.word	0x0800bf9d
 800b8a4:	0800bb05 	.word	0x0800bb05
 800b8a8:	0800bf9d 	.word	0x0800bf9d
 800b8ac:	0800bf9d 	.word	0x0800bf9d
 800b8b0:	0800bf9d 	.word	0x0800bf9d
 800b8b4:	0800bbbf 	.word	0x0800bbbf
 800b8b8:	0800bf9d 	.word	0x0800bf9d
 800b8bc:	0800bf9d 	.word	0x0800bf9d
 800b8c0:	0800bf9d 	.word	0x0800bf9d
 800b8c4:	0800bf9d 	.word	0x0800bf9d
 800b8c8:	0800bf9d 	.word	0x0800bf9d
 800b8cc:	0800bf9d 	.word	0x0800bf9d
 800b8d0:	0800bf9d 	.word	0x0800bf9d
 800b8d4:	0800bc79 	.word	0x0800bc79
 800b8d8:	0800bf9d 	.word	0x0800bf9d
 800b8dc:	0800bf9d 	.word	0x0800bf9d
 800b8e0:	0800bf9d 	.word	0x0800bf9d
 800b8e4:	0800bf9d 	.word	0x0800bf9d
 800b8e8:	0800bf9d 	.word	0x0800bf9d
 800b8ec:	0800bf9d 	.word	0x0800bf9d
 800b8f0:	0800bf9d 	.word	0x0800bf9d
 800b8f4:	0800bf9d 	.word	0x0800bf9d
 800b8f8:	0800bf9d 	.word	0x0800bf9d
 800b8fc:	0800bf9d 	.word	0x0800bf9d
 800b900:	0800bf9d 	.word	0x0800bf9d
 800b904:	0800bf9d 	.word	0x0800bf9d
 800b908:	0800bf9d 	.word	0x0800bf9d
 800b90c:	0800bf9d 	.word	0x0800bf9d
 800b910:	0800bf9d 	.word	0x0800bf9d
 800b914:	0800bde9 	.word	0x0800bde9
 800b918:	0800bf9d 	.word	0x0800bf9d
 800b91c:	0800bf9d 	.word	0x0800bf9d
 800b920:	0800bf9d 	.word	0x0800bf9d
 800b924:	0800bf9d 	.word	0x0800bf9d
 800b928:	0800bf9d 	.word	0x0800bf9d
 800b92c:	0800bf9d 	.word	0x0800bf9d
 800b930:	0800bf9d 	.word	0x0800bf9d
 800b934:	0800bf9d 	.word	0x0800bf9d
 800b938:	0800bf9d 	.word	0x0800bf9d
 800b93c:	0800bf9d 	.word	0x0800bf9d
 800b940:	0800bf9d 	.word	0x0800bf9d
 800b944:	0800bf9d 	.word	0x0800bf9d
 800b948:	0800bf9d 	.word	0x0800bf9d
 800b94c:	0800bf9d 	.word	0x0800bf9d
 800b950:	0800bf9d 	.word	0x0800bf9d
 800b954:	0800bf9d 	.word	0x0800bf9d
 800b958:	0800bf9d 	.word	0x0800bf9d
 800b95c:	0800bf9d 	.word	0x0800bf9d
 800b960:	0800bf9d 	.word	0x0800bf9d
 800b964:	0800bf9d 	.word	0x0800bf9d
 800b968:	0800bf9d 	.word	0x0800bf9d
 800b96c:	0800bf9d 	.word	0x0800bf9d
 800b970:	0800bf9d 	.word	0x0800bf9d
 800b974:	0800bf9d 	.word	0x0800bf9d
 800b978:	0800bf9d 	.word	0x0800bf9d
 800b97c:	0800bf9d 	.word	0x0800bf9d
 800b980:	0800bf9d 	.word	0x0800bf9d
 800b984:	0800bf9d 	.word	0x0800bf9d
 800b988:	0800bf9d 	.word	0x0800bf9d
 800b98c:	0800bf9d 	.word	0x0800bf9d
 800b990:	0800bf9d 	.word	0x0800bf9d
 800b994:	0800bedd 	.word	0x0800bedd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b998:	f7fb fab4 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800b99c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d044      	beq.n	800ba30 <UART_SetConfig+0x1d40>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d03e      	beq.n	800ba2c <UART_SetConfig+0x1d3c>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d038      	beq.n	800ba28 <UART_SetConfig+0x1d38>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d032      	beq.n	800ba24 <UART_SetConfig+0x1d34>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2b04      	cmp	r3, #4
 800b9c4:	d02c      	beq.n	800ba20 <UART_SetConfig+0x1d30>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	d026      	beq.n	800ba1c <UART_SetConfig+0x1d2c>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d020      	beq.n	800ba18 <UART_SetConfig+0x1d28>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	2b07      	cmp	r3, #7
 800b9dc:	d01a      	beq.n	800ba14 <UART_SetConfig+0x1d24>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d014      	beq.n	800ba10 <UART_SetConfig+0x1d20>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	2b09      	cmp	r3, #9
 800b9ec:	d00e      	beq.n	800ba0c <UART_SetConfig+0x1d1c>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	2b0a      	cmp	r3, #10
 800b9f4:	d008      	beq.n	800ba08 <UART_SetConfig+0x1d18>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	2b0b      	cmp	r3, #11
 800b9fc:	d102      	bne.n	800ba04 <UART_SetConfig+0x1d14>
 800b9fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba02:	e016      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e014      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba08:	2380      	movs	r3, #128	; 0x80
 800ba0a:	e012      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba0c:	2340      	movs	r3, #64	; 0x40
 800ba0e:	e010      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba10:	2320      	movs	r3, #32
 800ba12:	e00e      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba14:	2310      	movs	r3, #16
 800ba16:	e00c      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba18:	230c      	movs	r3, #12
 800ba1a:	e00a      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba1c:	230a      	movs	r3, #10
 800ba1e:	e008      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba20:	2308      	movs	r3, #8
 800ba22:	e006      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba24:	2306      	movs	r3, #6
 800ba26:	e004      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	e002      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e000      	b.n	800ba32 <UART_SetConfig+0x1d42>
 800ba30:	2301      	movs	r3, #1
 800ba32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba34:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	085b      	lsrs	r3, r3, #1
 800ba3e:	441a      	add	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba4c:	e2aa      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba4e:	f7fb fa6f 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 800ba52:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d044      	beq.n	800bae6 <UART_SetConfig+0x1df6>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d03e      	beq.n	800bae2 <UART_SetConfig+0x1df2>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d038      	beq.n	800bade <UART_SetConfig+0x1dee>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d032      	beq.n	800bada <UART_SetConfig+0x1dea>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b04      	cmp	r3, #4
 800ba7a:	d02c      	beq.n	800bad6 <UART_SetConfig+0x1de6>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b05      	cmp	r3, #5
 800ba82:	d026      	beq.n	800bad2 <UART_SetConfig+0x1de2>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b06      	cmp	r3, #6
 800ba8a:	d020      	beq.n	800bace <UART_SetConfig+0x1dde>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b07      	cmp	r3, #7
 800ba92:	d01a      	beq.n	800baca <UART_SetConfig+0x1dda>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b08      	cmp	r3, #8
 800ba9a:	d014      	beq.n	800bac6 <UART_SetConfig+0x1dd6>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b09      	cmp	r3, #9
 800baa2:	d00e      	beq.n	800bac2 <UART_SetConfig+0x1dd2>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b0a      	cmp	r3, #10
 800baaa:	d008      	beq.n	800babe <UART_SetConfig+0x1dce>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	2b0b      	cmp	r3, #11
 800bab2:	d102      	bne.n	800baba <UART_SetConfig+0x1dca>
 800bab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bab8:	e016      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800baba:	2301      	movs	r3, #1
 800babc:	e014      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800babe:	2380      	movs	r3, #128	; 0x80
 800bac0:	e012      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bac2:	2340      	movs	r3, #64	; 0x40
 800bac4:	e010      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bac6:	2320      	movs	r3, #32
 800bac8:	e00e      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800baca:	2310      	movs	r3, #16
 800bacc:	e00c      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bace:	230c      	movs	r3, #12
 800bad0:	e00a      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bad2:	230a      	movs	r3, #10
 800bad4:	e008      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bad6:	2308      	movs	r3, #8
 800bad8:	e006      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bada:	2306      	movs	r3, #6
 800badc:	e004      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bade:	2304      	movs	r3, #4
 800bae0:	e002      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bae2:	2302      	movs	r3, #2
 800bae4:	e000      	b.n	800bae8 <UART_SetConfig+0x1df8>
 800bae6:	2301      	movs	r3, #1
 800bae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baea:	fbb2 f2f3 	udiv	r2, r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	441a      	add	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb02:	e24f      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb04:	f107 0318 	add.w	r3, r7, #24
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fc fb93 	bl	8008234 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d044      	beq.n	800bba2 <UART_SetConfig+0x1eb2>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d03e      	beq.n	800bb9e <UART_SetConfig+0x1eae>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d038      	beq.n	800bb9a <UART_SetConfig+0x1eaa>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d032      	beq.n	800bb96 <UART_SetConfig+0x1ea6>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	2b04      	cmp	r3, #4
 800bb36:	d02c      	beq.n	800bb92 <UART_SetConfig+0x1ea2>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	2b05      	cmp	r3, #5
 800bb3e:	d026      	beq.n	800bb8e <UART_SetConfig+0x1e9e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	2b06      	cmp	r3, #6
 800bb46:	d020      	beq.n	800bb8a <UART_SetConfig+0x1e9a>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	2b07      	cmp	r3, #7
 800bb4e:	d01a      	beq.n	800bb86 <UART_SetConfig+0x1e96>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb54:	2b08      	cmp	r3, #8
 800bb56:	d014      	beq.n	800bb82 <UART_SetConfig+0x1e92>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b09      	cmp	r3, #9
 800bb5e:	d00e      	beq.n	800bb7e <UART_SetConfig+0x1e8e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	2b0a      	cmp	r3, #10
 800bb66:	d008      	beq.n	800bb7a <UART_SetConfig+0x1e8a>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b0b      	cmp	r3, #11
 800bb6e:	d102      	bne.n	800bb76 <UART_SetConfig+0x1e86>
 800bb70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb74:	e016      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e014      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb7a:	2380      	movs	r3, #128	; 0x80
 800bb7c:	e012      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb7e:	2340      	movs	r3, #64	; 0x40
 800bb80:	e010      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb82:	2320      	movs	r3, #32
 800bb84:	e00e      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb86:	2310      	movs	r3, #16
 800bb88:	e00c      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	e00a      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb8e:	230a      	movs	r3, #10
 800bb90:	e008      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb92:	2308      	movs	r3, #8
 800bb94:	e006      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb96:	2306      	movs	r3, #6
 800bb98:	e004      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	e002      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bb9e:	2302      	movs	r3, #2
 800bba0:	e000      	b.n	800bba4 <UART_SetConfig+0x1eb4>
 800bba2:	2301      	movs	r3, #1
 800bba4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	085b      	lsrs	r3, r3, #1
 800bbae:	441a      	add	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbbc:	e1f2      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbbe:	f107 030c 	add.w	r3, r7, #12
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fc fc82 	bl	80084cc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d044      	beq.n	800bc5c <UART_SetConfig+0x1f6c>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d03e      	beq.n	800bc58 <UART_SetConfig+0x1f68>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d038      	beq.n	800bc54 <UART_SetConfig+0x1f64>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d032      	beq.n	800bc50 <UART_SetConfig+0x1f60>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d02c      	beq.n	800bc4c <UART_SetConfig+0x1f5c>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	d026      	beq.n	800bc48 <UART_SetConfig+0x1f58>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	2b06      	cmp	r3, #6
 800bc00:	d020      	beq.n	800bc44 <UART_SetConfig+0x1f54>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	2b07      	cmp	r3, #7
 800bc08:	d01a      	beq.n	800bc40 <UART_SetConfig+0x1f50>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0e:	2b08      	cmp	r3, #8
 800bc10:	d014      	beq.n	800bc3c <UART_SetConfig+0x1f4c>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc16:	2b09      	cmp	r3, #9
 800bc18:	d00e      	beq.n	800bc38 <UART_SetConfig+0x1f48>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	2b0a      	cmp	r3, #10
 800bc20:	d008      	beq.n	800bc34 <UART_SetConfig+0x1f44>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	2b0b      	cmp	r3, #11
 800bc28:	d102      	bne.n	800bc30 <UART_SetConfig+0x1f40>
 800bc2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc2e:	e016      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e014      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc34:	2380      	movs	r3, #128	; 0x80
 800bc36:	e012      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc38:	2340      	movs	r3, #64	; 0x40
 800bc3a:	e010      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc3c:	2320      	movs	r3, #32
 800bc3e:	e00e      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc40:	2310      	movs	r3, #16
 800bc42:	e00c      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc44:	230c      	movs	r3, #12
 800bc46:	e00a      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc48:	230a      	movs	r3, #10
 800bc4a:	e008      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc4c:	2308      	movs	r3, #8
 800bc4e:	e006      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc50:	2306      	movs	r3, #6
 800bc52:	e004      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc54:	2304      	movs	r3, #4
 800bc56:	e002      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e000      	b.n	800bc5e <UART_SetConfig+0x1f6e>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	085b      	lsrs	r3, r3, #1
 800bc68:	441a      	add	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc76:	e195      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc78:	4b87      	ldr	r3, [pc, #540]	; (800be98 <UART_SetConfig+0x21a8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 0320 	and.w	r3, r3, #32
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d05d      	beq.n	800bd40 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc84:	4b84      	ldr	r3, [pc, #528]	; (800be98 <UART_SetConfig+0x21a8>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	08db      	lsrs	r3, r3, #3
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	4a83      	ldr	r2, [pc, #524]	; (800be9c <UART_SetConfig+0x21ac>)
 800bc90:	40da      	lsrs	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d044      	beq.n	800bd24 <UART_SetConfig+0x2034>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d03e      	beq.n	800bd20 <UART_SetConfig+0x2030>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d038      	beq.n	800bd1c <UART_SetConfig+0x202c>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d032      	beq.n	800bd18 <UART_SetConfig+0x2028>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d02c      	beq.n	800bd14 <UART_SetConfig+0x2024>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b05      	cmp	r3, #5
 800bcc0:	d026      	beq.n	800bd10 <UART_SetConfig+0x2020>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	2b06      	cmp	r3, #6
 800bcc8:	d020      	beq.n	800bd0c <UART_SetConfig+0x201c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	2b07      	cmp	r3, #7
 800bcd0:	d01a      	beq.n	800bd08 <UART_SetConfig+0x2018>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d014      	beq.n	800bd04 <UART_SetConfig+0x2014>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b09      	cmp	r3, #9
 800bce0:	d00e      	beq.n	800bd00 <UART_SetConfig+0x2010>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b0a      	cmp	r3, #10
 800bce8:	d008      	beq.n	800bcfc <UART_SetConfig+0x200c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b0b      	cmp	r3, #11
 800bcf0:	d102      	bne.n	800bcf8 <UART_SetConfig+0x2008>
 800bcf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf6:	e016      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e014      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	e012      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd00:	2340      	movs	r3, #64	; 0x40
 800bd02:	e010      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd04:	2320      	movs	r3, #32
 800bd06:	e00e      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd08:	2310      	movs	r3, #16
 800bd0a:	e00c      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd0c:	230c      	movs	r3, #12
 800bd0e:	e00a      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd10:	230a      	movs	r3, #10
 800bd12:	e008      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd14:	2308      	movs	r3, #8
 800bd16:	e006      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd18:	2306      	movs	r3, #6
 800bd1a:	e004      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd1c:	2304      	movs	r3, #4
 800bd1e:	e002      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e000      	b.n	800bd26 <UART_SetConfig+0x2036>
 800bd24:	2301      	movs	r3, #1
 800bd26:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	085b      	lsrs	r3, r3, #1
 800bd30:	441a      	add	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bd3e:	e131      	b.n	800bfa4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d043      	beq.n	800bdd0 <UART_SetConfig+0x20e0>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d03d      	beq.n	800bdcc <UART_SetConfig+0x20dc>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d037      	beq.n	800bdc8 <UART_SetConfig+0x20d8>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d031      	beq.n	800bdc4 <UART_SetConfig+0x20d4>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	d02b      	beq.n	800bdc0 <UART_SetConfig+0x20d0>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	d025      	beq.n	800bdbc <UART_SetConfig+0x20cc>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b06      	cmp	r3, #6
 800bd76:	d01f      	beq.n	800bdb8 <UART_SetConfig+0x20c8>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	2b07      	cmp	r3, #7
 800bd7e:	d019      	beq.n	800bdb4 <UART_SetConfig+0x20c4>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	2b08      	cmp	r3, #8
 800bd86:	d013      	beq.n	800bdb0 <UART_SetConfig+0x20c0>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	d00d      	beq.n	800bdac <UART_SetConfig+0x20bc>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2b0a      	cmp	r3, #10
 800bd96:	d007      	beq.n	800bda8 <UART_SetConfig+0x20b8>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b0b      	cmp	r3, #11
 800bd9e:	d101      	bne.n	800bda4 <UART_SetConfig+0x20b4>
 800bda0:	4b3f      	ldr	r3, [pc, #252]	; (800bea0 <UART_SetConfig+0x21b0>)
 800bda2:	e016      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bda4:	4b3d      	ldr	r3, [pc, #244]	; (800be9c <UART_SetConfig+0x21ac>)
 800bda6:	e014      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bda8:	4b3e      	ldr	r3, [pc, #248]	; (800bea4 <UART_SetConfig+0x21b4>)
 800bdaa:	e012      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdac:	4b3e      	ldr	r3, [pc, #248]	; (800bea8 <UART_SetConfig+0x21b8>)
 800bdae:	e010      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdb0:	4b3e      	ldr	r3, [pc, #248]	; (800beac <UART_SetConfig+0x21bc>)
 800bdb2:	e00e      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdb4:	4b3e      	ldr	r3, [pc, #248]	; (800beb0 <UART_SetConfig+0x21c0>)
 800bdb6:	e00c      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdb8:	4b3e      	ldr	r3, [pc, #248]	; (800beb4 <UART_SetConfig+0x21c4>)
 800bdba:	e00a      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdbc:	4b3e      	ldr	r3, [pc, #248]	; (800beb8 <UART_SetConfig+0x21c8>)
 800bdbe:	e008      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdc0:	4b3e      	ldr	r3, [pc, #248]	; (800bebc <UART_SetConfig+0x21cc>)
 800bdc2:	e006      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdc4:	4b3e      	ldr	r3, [pc, #248]	; (800bec0 <UART_SetConfig+0x21d0>)
 800bdc6:	e004      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdc8:	4b3e      	ldr	r3, [pc, #248]	; (800bec4 <UART_SetConfig+0x21d4>)
 800bdca:	e002      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdcc:	4b3e      	ldr	r3, [pc, #248]	; (800bec8 <UART_SetConfig+0x21d8>)
 800bdce:	e000      	b.n	800bdd2 <UART_SetConfig+0x20e2>
 800bdd0:	4b32      	ldr	r3, [pc, #200]	; (800be9c <UART_SetConfig+0x21ac>)
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	6852      	ldr	r2, [r2, #4]
 800bdd6:	0852      	lsrs	r2, r2, #1
 800bdd8:	441a      	add	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bde6:	e0dd      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d046      	beq.n	800be7e <UART_SetConfig+0x218e>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d040      	beq.n	800be7a <UART_SetConfig+0x218a>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d03a      	beq.n	800be76 <UART_SetConfig+0x2186>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b03      	cmp	r3, #3
 800be06:	d034      	beq.n	800be72 <UART_SetConfig+0x2182>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d02e      	beq.n	800be6e <UART_SetConfig+0x217e>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b05      	cmp	r3, #5
 800be16:	d028      	beq.n	800be6a <UART_SetConfig+0x217a>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	2b06      	cmp	r3, #6
 800be1e:	d022      	beq.n	800be66 <UART_SetConfig+0x2176>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	2b07      	cmp	r3, #7
 800be26:	d01c      	beq.n	800be62 <UART_SetConfig+0x2172>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d016      	beq.n	800be5e <UART_SetConfig+0x216e>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b09      	cmp	r3, #9
 800be36:	d00f      	beq.n	800be58 <UART_SetConfig+0x2168>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	2b0a      	cmp	r3, #10
 800be3e:	d008      	beq.n	800be52 <UART_SetConfig+0x2162>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	2b0b      	cmp	r3, #11
 800be46:	d102      	bne.n	800be4e <UART_SetConfig+0x215e>
 800be48:	f643 5309 	movw	r3, #15625	; 0x3d09
 800be4c:	e018      	b.n	800be80 <UART_SetConfig+0x2190>
 800be4e:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <UART_SetConfig+0x21c0>)
 800be50:	e016      	b.n	800be80 <UART_SetConfig+0x2190>
 800be52:	f647 2312 	movw	r3, #31250	; 0x7a12
 800be56:	e013      	b.n	800be80 <UART_SetConfig+0x2190>
 800be58:	f24f 4324 	movw	r3, #62500	; 0xf424
 800be5c:	e010      	b.n	800be80 <UART_SetConfig+0x2190>
 800be5e:	4b1b      	ldr	r3, [pc, #108]	; (800becc <UART_SetConfig+0x21dc>)
 800be60:	e00e      	b.n	800be80 <UART_SetConfig+0x2190>
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <UART_SetConfig+0x21b0>)
 800be64:	e00c      	b.n	800be80 <UART_SetConfig+0x2190>
 800be66:	4b1a      	ldr	r3, [pc, #104]	; (800bed0 <UART_SetConfig+0x21e0>)
 800be68:	e00a      	b.n	800be80 <UART_SetConfig+0x2190>
 800be6a:	4b1a      	ldr	r3, [pc, #104]	; (800bed4 <UART_SetConfig+0x21e4>)
 800be6c:	e008      	b.n	800be80 <UART_SetConfig+0x2190>
 800be6e:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <UART_SetConfig+0x21b4>)
 800be70:	e006      	b.n	800be80 <UART_SetConfig+0x2190>
 800be72:	4b19      	ldr	r3, [pc, #100]	; (800bed8 <UART_SetConfig+0x21e8>)
 800be74:	e004      	b.n	800be80 <UART_SetConfig+0x2190>
 800be76:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <UART_SetConfig+0x21b8>)
 800be78:	e002      	b.n	800be80 <UART_SetConfig+0x2190>
 800be7a:	4b0c      	ldr	r3, [pc, #48]	; (800beac <UART_SetConfig+0x21bc>)
 800be7c:	e000      	b.n	800be80 <UART_SetConfig+0x2190>
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <UART_SetConfig+0x21c0>)
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6852      	ldr	r2, [r2, #4]
 800be84:	0852      	lsrs	r2, r2, #1
 800be86:	441a      	add	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be90:	b29b      	uxth	r3, r3
 800be92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be94:	e086      	b.n	800bfa4 <UART_SetConfig+0x22b4>
 800be96:	bf00      	nop
 800be98:	58024400 	.word	0x58024400
 800be9c:	03d09000 	.word	0x03d09000
 800bea0:	0003d090 	.word	0x0003d090
 800bea4:	0007a120 	.word	0x0007a120
 800bea8:	000f4240 	.word	0x000f4240
 800beac:	001e8480 	.word	0x001e8480
 800beb0:	003d0900 	.word	0x003d0900
 800beb4:	00516155 	.word	0x00516155
 800beb8:	0061a800 	.word	0x0061a800
 800bebc:	007a1200 	.word	0x007a1200
 800bec0:	00a2c2aa 	.word	0x00a2c2aa
 800bec4:	00f42400 	.word	0x00f42400
 800bec8:	01e84800 	.word	0x01e84800
 800becc:	0001e848 	.word	0x0001e848
 800bed0:	00051615 	.word	0x00051615
 800bed4:	00061a80 	.word	0x00061a80
 800bed8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d04e      	beq.n	800bf82 <UART_SetConfig+0x2292>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d047      	beq.n	800bf7c <UART_SetConfig+0x228c>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d040      	beq.n	800bf76 <UART_SetConfig+0x2286>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d039      	beq.n	800bf70 <UART_SetConfig+0x2280>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d032      	beq.n	800bf6a <UART_SetConfig+0x227a>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf08:	2b05      	cmp	r3, #5
 800bf0a:	d02b      	beq.n	800bf64 <UART_SetConfig+0x2274>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf10:	2b06      	cmp	r3, #6
 800bf12:	d024      	beq.n	800bf5e <UART_SetConfig+0x226e>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	2b07      	cmp	r3, #7
 800bf1a:	d01d      	beq.n	800bf58 <UART_SetConfig+0x2268>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d016      	beq.n	800bf52 <UART_SetConfig+0x2262>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	2b09      	cmp	r3, #9
 800bf2a:	d00f      	beq.n	800bf4c <UART_SetConfig+0x225c>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2b0a      	cmp	r3, #10
 800bf32:	d008      	beq.n	800bf46 <UART_SetConfig+0x2256>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	2b0b      	cmp	r3, #11
 800bf3a:	d101      	bne.n	800bf40 <UART_SetConfig+0x2250>
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	e022      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf44:	e01f      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf4a:	e01c      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf50:	e019      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf56:	e016      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf5c:	e013      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bf62:	e010      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf64:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bf68:	e00d      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf6e:	e00a      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf70:	f241 5355 	movw	r3, #5461	; 0x1555
 800bf74:	e007      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf7a:	e004      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf80:	e001      	b.n	800bf86 <UART_SetConfig+0x2296>
 800bf82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	6852      	ldr	r2, [r2, #4]
 800bf8a:	0852      	lsrs	r2, r2, #1
 800bf8c:	441a      	add	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf9a:	e003      	b.n	800bfa4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bfa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa6:	2b0f      	cmp	r3, #15
 800bfa8:	d908      	bls.n	800bfbc <UART_SetConfig+0x22cc>
 800bfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb0:	d204      	bcs.n	800bfbc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfb8:	60da      	str	r2, [r3, #12]
 800bfba:	e002      	b.n	800bfc2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bfde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3740      	adds	r7, #64	; 0x40
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bfec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00a      	beq.n	800c016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c03c:	f003 0304 	and.w	r3, r3, #4
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00a      	beq.n	800c05a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05e:	f003 0308 	and.w	r3, r3, #8
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	430a      	orrs	r2, r1
 800c07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c080:	f003 0310 	and.w	r3, r3, #16
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00a      	beq.n	800c09e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01a      	beq.n	800c102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0ea:	d10a      	bne.n	800c102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	430a      	orrs	r2, r1
 800c100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00a      	beq.n	800c124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	430a      	orrs	r2, r1
 800c122:	605a      	str	r2, [r3, #4]
  }
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af02      	add	r7, sp, #8
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c140:	f7f6 f8ea 	bl	8002318 <HAL_GetTick>
 800c144:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0308 	and.w	r3, r3, #8
 800c150:	2b08      	cmp	r3, #8
 800c152:	d10e      	bne.n	800c172 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f82c 	bl	800c1c0 <UART_WaitOnFlagUntilTimeout>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e022      	b.n	800c1b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d10e      	bne.n	800c19e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f816 	bl	800c1c0 <UART_WaitOnFlagUntilTimeout>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e00c      	b.n	800c1b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	603b      	str	r3, [r7, #0]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1d0:	e062      	b.n	800c298 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d8:	d05e      	beq.n	800c298 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1da:	f7f6 f89d 	bl	8002318 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d302      	bcc.n	800c1f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11d      	bne.n	800c22c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c1fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f022 0201 	bic.w	r2, r2, #1
 800c20e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2220      	movs	r2, #32
 800c214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2220      	movs	r2, #32
 800c21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e045      	b.n	800c2b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0304 	and.w	r3, r3, #4
 800c236:	2b00      	cmp	r3, #0
 800c238:	d02e      	beq.n	800c298 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c248:	d126      	bne.n	800c298 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c252:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c262:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0201 	bic.w	r2, r2, #1
 800c272:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2220      	movs	r2, #32
 800c280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2220      	movs	r2, #32
 800c288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e00f      	b.n	800c2b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69da      	ldr	r2, [r3, #28]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	bf0c      	ite	eq
 800c2a8:	2301      	moveq	r3, #1
 800c2aa:	2300      	movne	r3, #0
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d08d      	beq.n	800c1d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c2d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c2e6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c312:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6899      	ldr	r1, [r3, #8]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b08      	ldr	r3, [pc, #32]	; (800c340 <UART_EndRxTransfer+0x44>)
 800c320:	400b      	ands	r3, r1
 800c322:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2220      	movs	r2, #32
 800c328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c332:	bf00      	nop
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	effffffe 	.word	0xeffffffe

0800c344 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c350:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	69db      	ldr	r3, [r3, #28]
 800c356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35a:	d01f      	beq.n	800c39c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c372:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c392:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2220      	movs	r2, #32
 800c398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7f4 fb23 	bl	80009e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3a2:	bf00      	nop
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7fd fc83 	bl	8009cc4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b086      	sub	sp, #24
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ee:	2b80      	cmp	r3, #128	; 0x80
 800c3f0:	d109      	bne.n	800c406 <UART_DMAError+0x40>
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b21      	cmp	r3, #33	; 0x21
 800c3f6:	d106      	bne.n	800c406 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c400:	6978      	ldr	r0, [r7, #20]
 800c402:	f7ff ff5d 	bl	800c2c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d109      	bne.n	800c428 <UART_DMAError+0x62>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b22      	cmp	r3, #34	; 0x22
 800c418:	d106      	bne.n	800c428 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c422:	6978      	ldr	r0, [r7, #20]
 800c424:	f7ff ff6a 	bl	800c2fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c42e:	f043 0210 	orr.w	r2, r3, #16
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c438:	6978      	ldr	r0, [r7, #20]
 800c43a:	f7fd fc4d 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c43e:	bf00      	nop
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7fd fc37 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c480:	2b21      	cmp	r3, #33	; 0x21
 800c482:	d12a      	bne.n	800c4da <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d110      	bne.n	800c4b2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c49e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c4b0:	e013      	b.n	800c4da <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4f4:	2b21      	cmp	r3, #33	; 0x21
 800c4f6:	d12f      	bne.n	800c558 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d110      	bne.n	800c526 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c512:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c522:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c524:	e018      	b.n	800c558 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c53a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c540:	1c9a      	adds	r2, r3, #2
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	3b01      	subs	r3, #1
 800c550:	b29a      	uxth	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c558:	bf00      	nop
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c572:	2b21      	cmp	r3, #33	; 0x21
 800c574:	d13d      	bne.n	800c5f2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c57c:	81fb      	strh	r3, [r7, #14]
 800c57e:	e035      	b.n	800c5ec <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c586:	b29b      	uxth	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d111      	bne.n	800c5b0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c59a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5aa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c5ac:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c5ae:	e020      	b.n	800c5f2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d013      	beq.n	800c5e6 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c5e6:	89fb      	ldrh	r3, [r7, #14]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	81fb      	strh	r3, [r7, #14]
 800c5ec:	89fb      	ldrh	r3, [r7, #14]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1c6      	bne.n	800c580 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b085      	sub	sp, #20
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c60c:	2b21      	cmp	r3, #33	; 0x21
 800c60e:	d142      	bne.n	800c696 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c616:	81fb      	strh	r3, [r7, #14]
 800c618:	e03a      	b.n	800c690 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c620:	b29b      	uxth	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d111      	bne.n	800c64a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c634:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c644:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c646:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c648:	e025      	b.n	800c696 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c654:	2b00      	cmp	r3, #0
 800c656:	d018      	beq.n	800c68a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c65c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c66c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c672:	1c9a      	adds	r2, r3, #2
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c67e:	b29b      	uxth	r3, r3
 800c680:	3b01      	subs	r3, #1
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c68a:	89fb      	ldrh	r3, [r7, #14]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	81fb      	strh	r3, [r7, #14]
 800c690:	89fb      	ldrh	r3, [r7, #14]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1c1      	bne.n	800c61a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c696:	bf00      	nop
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6b8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7f4 f94b 	bl	8000964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ce:	bf00      	nop
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ec:	2b22      	cmp	r3, #34	; 0x22
 800c6ee:	d13b      	bne.n	800c768 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6f8:	89bb      	ldrh	r3, [r7, #12]
 800c6fa:	b2d9      	uxtb	r1, r3
 800c6fc:	89fb      	ldrh	r3, [r7, #14]
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c704:	400a      	ands	r2, r1
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	3b01      	subs	r3, #1
 800c71e:	b29a      	uxth	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d122      	bne.n	800c778 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c740:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f022 0201 	bic.w	r2, r2, #1
 800c750:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7f4 f941 	bl	80009e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c766:	e007      	b.n	800c778 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	699a      	ldr	r2, [r3, #24]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f042 0208 	orr.w	r2, r2, #8
 800c776:	619a      	str	r2, [r3, #24]
}
 800c778:	bf00      	nop
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c78e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c796:	2b22      	cmp	r3, #34	; 0x22
 800c798:	d13b      	bne.n	800c812 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c7a8:	89ba      	ldrh	r2, [r7, #12]
 800c7aa:	89fb      	ldrh	r3, [r7, #14]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b8:	1c9a      	adds	r2, r3, #2
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d122      	bne.n	800c822 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c7ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689a      	ldr	r2, [r3, #8]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0201 	bic.w	r2, r2, #1
 800c7fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2220      	movs	r2, #32
 800c800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7f4 f8ec 	bl	80009e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c810:	e007      	b.n	800c822 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f042 0208 	orr.w	r2, r2, #8
 800c820:	619a      	str	r2, [r3, #24]
}
 800c822:	bf00      	nop
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
	...

0800c82c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c83a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c842:	2b22      	cmp	r3, #34	; 0x22
 800c844:	d166      	bne.n	800c914 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c84c:	81fb      	strh	r3, [r7, #14]
 800c84e:	e03d      	b.n	800c8cc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c856:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c858:	893b      	ldrh	r3, [r7, #8]
 800c85a:	b2d9      	uxtb	r1, r3
 800c85c:	89bb      	ldrh	r3, [r7, #12]
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c864:	400a      	ands	r2, r1
 800c866:	b2d2      	uxtb	r2, r2
 800c868:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d119      	bne.n	800c8c6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8a0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6899      	ldr	r1, [r3, #8]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	4b1f      	ldr	r3, [pc, #124]	; (800c92c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c8ae:	400b      	ands	r3, r1
 800c8b0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7f4 f891 	bl	80009e8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c8c6:	89fb      	ldrh	r3, [r7, #14]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	81fb      	strh	r3, [r7, #14]
 800c8cc:	89fb      	ldrh	r3, [r7, #14]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1be      	bne.n	800c850 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8da:	897b      	ldrh	r3, [r7, #10]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d021      	beq.n	800c924 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8e6:	897a      	ldrh	r2, [r7, #10]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d21b      	bcs.n	800c924 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8fa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a0c      	ldr	r2, [pc, #48]	; (800c930 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c900:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f042 0220 	orr.w	r2, r2, #32
 800c910:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c912:	e007      	b.n	800c924 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0208 	orr.w	r2, r2, #8
 800c922:	619a      	str	r2, [r3, #24]
}
 800c924:	bf00      	nop
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	effffffe 	.word	0xeffffffe
 800c930:	0800c6d7 	.word	0x0800c6d7

0800c934 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c942:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c94a:	2b22      	cmp	r3, #34	; 0x22
 800c94c:	d166      	bne.n	800ca1c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c954:	82fb      	strh	r3, [r7, #22]
 800c956:	e03d      	b.n	800c9d4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c964:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c966:	8a3a      	ldrh	r2, [r7, #16]
 800c968:	8abb      	ldrh	r3, [r7, #20]
 800c96a:	4013      	ands	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c976:	1c9a      	adds	r2, r3, #2
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c982:	b29b      	uxth	r3, r3
 800c984:	3b01      	subs	r3, #1
 800c986:	b29a      	uxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c994:	b29b      	uxth	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d119      	bne.n	800c9ce <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6899      	ldr	r1, [r3, #8]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	4b1f      	ldr	r3, [pc, #124]	; (800ca34 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c9b6:	400b      	ands	r3, r1
 800c9b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f4 f80d 	bl	80009e8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c9ce:	8afb      	ldrh	r3, [r7, #22]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	82fb      	strh	r3, [r7, #22]
 800c9d4:	8afb      	ldrh	r3, [r7, #22]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1be      	bne.n	800c958 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9e0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9e2:	8a7b      	ldrh	r3, [r7, #18]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d021      	beq.n	800ca2c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9ee:	8a7a      	ldrh	r2, [r7, #18]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d21b      	bcs.n	800ca2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	689a      	ldr	r2, [r3, #8]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ca02:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a0c      	ldr	r2, [pc, #48]	; (800ca38 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800ca08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f042 0220 	orr.w	r2, r2, #32
 800ca18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca1a:	e007      	b.n	800ca2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	699a      	ldr	r2, [r3, #24]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f042 0208 	orr.w	r2, r2, #8
 800ca2a:	619a      	str	r2, [r3, #24]
}
 800ca2c:	bf00      	nop
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	effffffe 	.word	0xeffffffe
 800ca38:	0800c781 	.word	0x0800c781

0800ca3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca6c:	bf00      	nop
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d101      	bne.n	800ca8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	e027      	b.n	800cade <HAL_UARTEx_DisableFifoMode+0x66>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2224      	movs	r2, #36	; 0x24
 800ca9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f022 0201 	bic.w	r2, r2, #1
 800cab4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cabc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2220      	movs	r2, #32
 800cad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d101      	bne.n	800cb02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cafe:	2302      	movs	r3, #2
 800cb00:	e02d      	b.n	800cb5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2224      	movs	r2, #36	; 0x24
 800cb0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f022 0201 	bic.w	r2, r2, #1
 800cb28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f850 	bl	800cbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2220      	movs	r2, #32
 800cb50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d101      	bne.n	800cb7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e02d      	b.n	800cbda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2224      	movs	r2, #36	; 0x24
 800cb8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f022 0201 	bic.w	r2, r2, #1
 800cba4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	683a      	ldr	r2, [r7, #0]
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f812 	bl	800cbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2220      	movs	r2, #32
 800cbcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b089      	sub	sp, #36	; 0x24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cbec:	4a2f      	ldr	r2, [pc, #188]	; (800ccac <UARTEx_SetNbDataToProcess+0xc8>)
 800cbee:	f107 0314 	add.w	r3, r7, #20
 800cbf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbf6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cbfa:	4a2d      	ldr	r2, [pc, #180]	; (800ccb0 <UARTEx_SetNbDataToProcess+0xcc>)
 800cbfc:	f107 030c 	add.w	r3, r7, #12
 800cc00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc04:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d108      	bne.n	800cc22 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc20:	e03d      	b.n	800cc9e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc22:	2308      	movs	r3, #8
 800cc24:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc26:	2308      	movs	r3, #8
 800cc28:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	0e5b      	lsrs	r3, r3, #25
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	0f5b      	lsrs	r3, r3, #29
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cc4a:	7fbb      	ldrb	r3, [r7, #30]
 800cc4c:	7f3a      	ldrb	r2, [r7, #28]
 800cc4e:	f107 0120 	add.w	r1, r7, #32
 800cc52:	440a      	add	r2, r1
 800cc54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cc58:	fb02 f303 	mul.w	r3, r2, r3
 800cc5c:	7f3a      	ldrb	r2, [r7, #28]
 800cc5e:	f107 0120 	add.w	r1, r7, #32
 800cc62:	440a      	add	r2, r1
 800cc64:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cc68:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cc74:	7ffb      	ldrb	r3, [r7, #31]
 800cc76:	7f7a      	ldrb	r2, [r7, #29]
 800cc78:	f107 0120 	add.w	r1, r7, #32
 800cc7c:	440a      	add	r2, r1
 800cc7e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	7f7a      	ldrb	r2, [r7, #29]
 800cc88:	f107 0120 	add.w	r1, r7, #32
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cc92:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc9e:	bf00      	nop
 800cca0:	3724      	adds	r7, #36	; 0x24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	0800cd24 	.word	0x0800cd24
 800ccb0:	0800cd2c 	.word	0x0800cd2c

0800ccb4 <__libc_init_array>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	4e0d      	ldr	r6, [pc, #52]	; (800ccec <__libc_init_array+0x38>)
 800ccb8:	4c0d      	ldr	r4, [pc, #52]	; (800ccf0 <__libc_init_array+0x3c>)
 800ccba:	1ba4      	subs	r4, r4, r6
 800ccbc:	10a4      	asrs	r4, r4, #2
 800ccbe:	2500      	movs	r5, #0
 800ccc0:	42a5      	cmp	r5, r4
 800ccc2:	d109      	bne.n	800ccd8 <__libc_init_array+0x24>
 800ccc4:	4e0b      	ldr	r6, [pc, #44]	; (800ccf4 <__libc_init_array+0x40>)
 800ccc6:	4c0c      	ldr	r4, [pc, #48]	; (800ccf8 <__libc_init_array+0x44>)
 800ccc8:	f000 f820 	bl	800cd0c <_init>
 800cccc:	1ba4      	subs	r4, r4, r6
 800ccce:	10a4      	asrs	r4, r4, #2
 800ccd0:	2500      	movs	r5, #0
 800ccd2:	42a5      	cmp	r5, r4
 800ccd4:	d105      	bne.n	800cce2 <__libc_init_array+0x2e>
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}
 800ccd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ccdc:	4798      	blx	r3
 800ccde:	3501      	adds	r5, #1
 800cce0:	e7ee      	b.n	800ccc0 <__libc_init_array+0xc>
 800cce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cce6:	4798      	blx	r3
 800cce8:	3501      	adds	r5, #1
 800ccea:	e7f2      	b.n	800ccd2 <__libc_init_array+0x1e>
 800ccec:	0800cd54 	.word	0x0800cd54
 800ccf0:	0800cd54 	.word	0x0800cd54
 800ccf4:	0800cd54 	.word	0x0800cd54
 800ccf8:	0800cd58 	.word	0x0800cd58

0800ccfc <memset>:
 800ccfc:	4402      	add	r2, r0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d100      	bne.n	800cd06 <memset+0xa>
 800cd04:	4770      	bx	lr
 800cd06:	f803 1b01 	strb.w	r1, [r3], #1
 800cd0a:	e7f9      	b.n	800cd00 <memset+0x4>

0800cd0c <_init>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	bf00      	nop
 800cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd12:	bc08      	pop	{r3}
 800cd14:	469e      	mov	lr, r3
 800cd16:	4770      	bx	lr

0800cd18 <_fini>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr
