
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcf4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800df90  0800df90  0001df90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1d8  0800e1d8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1d8  0800e1d8  0001e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1e0  0800e1e0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1e4  0800e1e4  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  24000000  0800e1e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  240000b8  0800e2a0  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000bcc  0800e2a0  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec01  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c75  00000000  00000000  0003ece7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c0  00000000  00000000  00041960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00042e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383bd  00000000  00000000  000441f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001113e  00000000  00000000  0007c5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001732d9  00000000  00000000  0008d6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002009c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  00200a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b8 	.word	0x240000b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800df74 	.word	0x0800df74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000bc 	.word	0x240000bc
 80002d4:	0800df74 	.word	0x0800df74

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000040 	.word	0x24000040
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f009 f94c 	bl	8009928 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 fa1f 	bl	8009ad8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f009 fa1a 	bl	8009ad8 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	24000b28 	.word	0x24000b28
 80006b0:	24000a40 	.word	0x24000a40
 80006b4:	24000acc 	.word	0x24000acc
 80006b8:	24000254 	.word	0x24000254
 80006bc:	24000720 	.word	0x24000720
 80006c0:	24000920 	.word	0x24000920

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000920 	.word	0x24000920
 800072c:	240002f2 	.word	0x240002f2
 8000730:	24000254 	.word	0x24000254
 8000734:	24000a08 	.word	0x24000a08
 8000738:	24000a40 	.word	0x24000a40
 800073c:	240007f0 	.word	0x240007f0
 8000740:	24000120 	.word	0x24000120
 8000744:	240001ac 	.word	0x240001ac

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 ffae 	bl	80096f4 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f009 f8c0 	bl	8009928 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000920 	.word	0x24000920
 80007c8:	240000e1 	.word	0x240000e1
 80007cc:	24000254 	.word	0x24000254
 80007d0:	24000a08 	.word	0x24000a08
 80007d4:	24000a40 	.word	0x24000a40
 80007d8:	24000b28 	.word	0x24000b28
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000bb0 	.word	0x24000bb0
 80007e4:	24000120 	.word	0x24000120
 80007e8:	24000a10 	.word	0x24000a10

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f009 f810 	bl	8009820 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000920 	.word	0x24000920

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 fffd 	bl	8009820 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000920 	.word	0x24000920

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002f2 	.word	0x240002f2

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 ffdd 	bl	8009820 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000a40 	.word	0x24000a40

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	240007f0 	.word	0x240007f0

0800089c <peripheralADC_Init>:
uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f002 f997 	bl	8002bd8 <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000b48 	.word	0x24000b48
 80008b4:	2400081c 	.word	0x2400081c

080008b8 <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bfb8      	it	lt
 80008c6:	425b      	neglt	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <controlMotor1+0x48>)
 80008cc:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db07      	blt.n	80008e4 <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <controlMotor1+0x48>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <controlMotor1+0x48>)
 80008e0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80008e2:	e006      	b.n	80008f2 <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <controlMotor1+0x48>)
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <controlMotor1+0x48>)
 80008f0:	721a      	strb	r2, [r3, #8]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2400000c 	.word	0x2400000c

08000904 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <controlMotor2+0x48>)
 8000918:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db07      	blt.n	8000930 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <controlMotor2+0x48>)
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <controlMotor2+0x48>)
 800092c:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 800092e:	e006      	b.n	800093e <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <controlMotor2+0x48>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <controlMotor2+0x48>)
 800093c:	721a      	strb	r2, [r3, #8]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	2400000c 	.word	0x2400000c

08000950 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <controlMotor3+0x48>)
 8000964:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db07      	blt.n	800097c <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <controlMotor3+0x48>)
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <controlMotor3+0x48>)
 8000978:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 800097a:	e006      	b.n	800098a <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <controlMotor3+0x48>)
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <controlMotor3+0x48>)
 8000988:	721a      	strb	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400000c 	.word	0x2400000c

0800099c <controlMotor4>:
void controlMotor4(int _speed)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <controlMotor4+0x48>)
 80009b0:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db07      	blt.n	80009c8 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <controlMotor4+0x48>)
 80009ba:	7a1b      	ldrb	r3, [r3, #8]
 80009bc:	f023 0308 	bic.w	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <controlMotor4+0x48>)
 80009c4:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 80009c6:	e006      	b.n	80009d6 <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <controlMotor4+0x48>)
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <controlMotor4+0x48>)
 80009d4:	721a      	strb	r2, [r3, #8]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400000c 	.word	0x2400000c

080009e8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 80009e8:	b490      	push	{r4, r7}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	yawError = _yawSetpoint - _yawValue;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <PIDyaw+0x120>)
 8000a02:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <PIDyaw+0x120>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <PIDyaw+0x124>)
 8000a14:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <PIDyaw+0x120>)
 8000a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <PIDyaw+0x128>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <PIDyaw+0x12c>)
 8000a32:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <PIDyaw+0x120>)
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <PIDyaw+0x130>)
 8000a46:	ed93 7b00 	vldr	d7, [r3]
 8000a4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <PIDyaw+0x130>)
 8000a50:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <PIDyaw+0x134>)
 8000a56:	ed93 6b00 	vldr	d6, [r3]
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <PIDyaw+0x124>)
 8000a5c:	ed93 7b00 	vldr	d7, [r3]
 8000a60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <PIDyaw+0x138>)
 8000a66:	ed93 5b00 	vldr	d5, [r3]
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <PIDyaw+0x12c>)
 8000a6c:	ed93 7b00 	vldr	d7, [r3]
 8000a70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <PIDyaw+0x13c>)
 8000a7a:	ed93 5b00 	vldr	d5, [r3]
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <PIDyaw+0x130>)
 8000a80:	ed93 7b00 	vldr	d7, [r3]
 8000a84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <PIDyaw+0x140>)
 8000a8e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <PIDyaw+0x140>)
 8000a94:	ed93 7b00 	vldr	d7, [r3]
 8000a98:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000af8 <PIDyaw+0x110>
 8000a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa4:	dd05      	ble.n	8000ab2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <PIDyaw+0x140>)
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	4c1f      	ldr	r4, [pc, #124]	; (8000b2c <PIDyaw+0x144>)
 8000aae:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <PIDyaw+0x140>)
 8000ab4:	ed93 7b00 	vldr	d7, [r3]
 8000ab8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000b00 <PIDyaw+0x118>
 8000abc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d505      	bpl.n	8000ad2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <PIDyaw+0x140>)
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	4c18      	ldr	r4, [pc, #96]	; (8000b30 <PIDyaw+0x148>)
 8000ace:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <PIDyaw+0x120>)
 8000ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <PIDyaw+0x128>)
 8000ada:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <PIDyaw+0x140>)
 8000ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ae2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ae6:	eeb0 0b47 	vmov.f64	d0, d7
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc90      	pop	{r4, r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	f3af 8000 	nop.w
 8000af8:	00000000 	.word	0x00000000
 8000afc:	405e0000 	.word	0x405e0000
 8000b00:	00000000 	.word	0x00000000
 8000b04:	c05e0000 	.word	0xc05e0000
 8000b08:	240007c8 	.word	0x240007c8
 8000b0c:	240007e8 	.word	0x240007e8
 8000b10:	24000250 	.word	0x24000250
 8000b14:	24000108 	.word	0x24000108
 8000b18:	240007c0 	.word	0x240007c0
 8000b1c:	24000020 	.word	0x24000020
 8000b20:	240000d8 	.word	0x240000d8
 8000b24:	24000028 	.word	0x24000028
 8000b28:	24000a38 	.word	0x24000a38
 8000b2c:	405e0000 	.word	0x405e0000
 8000b30:	c05e0000 	.word	0xc05e0000
 8000b34:	00000000 	.word	0x00000000

08000b38 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000b38:	b490      	push	{r4, r7}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	roRError = -_roRSetpoint + _roRValue;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <PIDroR+0x120>)
 8000b52:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000b54:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <PIDroR+0x120>)
 8000b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <PIDroR+0x124>)
 8000b64:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <PIDroR+0x120>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <PIDroR+0x128>)
 8000b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <PIDroR+0x12c>)
 8000b82:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <PIDroR+0x120>)
 8000b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <PIDroR+0x130>)
 8000b96:	ed93 7b00 	vldr	d7, [r3]
 8000b9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <PIDroR+0x130>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <PIDroR+0x134>)
 8000ba6:	ed93 6b00 	vldr	d6, [r3]
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <PIDroR+0x124>)
 8000bac:	ed93 7b00 	vldr	d7, [r3]
 8000bb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <PIDroR+0x138>)
 8000bb6:	ed93 5b00 	vldr	d5, [r3]
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <PIDroR+0x12c>)
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bc4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <PIDroR+0x13c>)
 8000bca:	ed93 5b00 	vldr	d5, [r3]
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <PIDroR+0x130>)
 8000bd0:	ed93 7b00 	vldr	d7, [r3]
 8000bd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <PIDroR+0x140>)
 8000bde:	ed83 7b00 	vstr	d7, [r3]
	if(roRPID > MAX_ROR_PID)
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <PIDroR+0x140>)
 8000be4:	ed93 7b00 	vldr	d7, [r3]
 8000be8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000c48 <PIDroR+0x110>
 8000bec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf4:	dd05      	ble.n	8000c02 <PIDroR+0xca>
	{
		roRPID = MAX_ROR_PID;
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <PIDroR+0x140>)
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	4c1f      	ldr	r4, [pc, #124]	; (8000c7c <PIDroR+0x144>)
 8000bfe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(roRPID < MIN_ROR_PID)
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <PIDroR+0x140>)
 8000c04:	ed93 7b00 	vldr	d7, [r3]
 8000c08:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000c50 <PIDroR+0x118>
 8000c0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d505      	bpl.n	8000c22 <PIDroR+0xea>
	{
		roRPID = MIN_ROR_PID;
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <PIDroR+0x140>)
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	4c18      	ldr	r4, [pc, #96]	; (8000c80 <PIDroR+0x148>)
 8000c1e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	roRPreError = roRError;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <PIDroR+0x120>)
 8000c24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <PIDroR+0x128>)
 8000c2a:	801a      	strh	r2, [r3, #0]
	return roRPID;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <PIDroR+0x140>)
 8000c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c32:	ec44 3b17 	vmov	d7, r3, r4
}
 8000c36:	eeb0 0b47 	vmov.f64	d0, d7
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc90      	pop	{r4, r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40590000 	.word	0x40590000
 8000c50:	00000000 	.word	0x00000000
 8000c54:	c0590000 	.word	0xc0590000
 8000c58:	24000bb4 	.word	0x24000bb4
 8000c5c:	24000918 	.word	0x24000918
 8000c60:	24000100 	.word	0x24000100
 8000c64:	24000ba8 	.word	0x24000ba8
 8000c68:	24000730 	.word	0x24000730
 8000c6c:	24000030 	.word	0x24000030
 8000c70:	24000b10 	.word	0x24000b10
 8000c74:	240009f0 	.word	0x240009f0
 8000c78:	240002f8 	.word	0x240002f8
 8000c7c:	40590000 	.word	0x40590000
 8000c80:	c0590000 	.word	0xc0590000
 8000c84:	00000000 	.word	0x00000000

08000c88 <PIDpit>:
	roLPreError = roLError;
	return roLPID;
}

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8000c88:	b490      	push	{r4, r7}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	pitError = -_pitSetpoint + _pitValue;
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <PIDpit+0x108>)
 8000ca2:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <PIDpit+0x108>)
 8000ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cac:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <PIDpit+0x10c>)
 8000cae:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <PIDpit+0x108>)
 8000cb4:	ed93 6b00 	vldr	d6, [r3]
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <PIDpit+0x110>)
 8000cba:	ed93 7b00 	vldr	d7, [r3]
 8000cbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <PIDpit+0x114>)
 8000cc4:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 8000cc8:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <PIDpit+0x108>)
 8000cca:	ed93 6b00 	vldr	d6, [r3]
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <PIDpit+0x118>)
 8000cd0:	ed93 7b00 	vldr	d7, [r3]
 8000cd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <PIDpit+0x118>)
 8000cda:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <PIDpit+0x11c>)
 8000ce0:	ed93 6b00 	vldr	d6, [r3]
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <PIDpit+0x10c>)
 8000ce6:	ed93 7b00 	vldr	d7, [r3]
 8000cea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <PIDpit+0x120>)
 8000cf0:	ed93 5b00 	vldr	d5, [r3]
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <PIDpit+0x114>)
 8000cf6:	ed93 7b00 	vldr	d7, [r3]
 8000cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <PIDpit+0x124>)
 8000d04:	ed93 5b00 	vldr	d5, [r3]
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <PIDpit+0x118>)
 8000d0a:	ed93 7b00 	vldr	d7, [r3]
 8000d0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <PIDpit+0x128>)
 8000d18:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <PIDpit+0x128>)
 8000d1e:	ed93 7b00 	vldr	d7, [r3]
 8000d22:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000d80 <PIDpit+0xf8>
 8000d26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	dd05      	ble.n	8000d3c <PIDpit+0xb4>
	{
		pitPID = MAX_PIT_PID;
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PIDpit+0x128>)
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	4c1f      	ldr	r4, [pc, #124]	; (8000db4 <PIDpit+0x12c>)
 8000d38:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(pitPID < MIN_PIT_PID)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <PIDpit+0x128>)
 8000d3e:	ed93 7b00 	vldr	d7, [r3]
 8000d42:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000d88 <PIDpit+0x100>
 8000d46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d505      	bpl.n	8000d5c <PIDpit+0xd4>
	{
		pitPID = MIN_PIT_PID;
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <PIDpit+0x128>)
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	4c18      	ldr	r4, [pc, #96]	; (8000db8 <PIDpit+0x130>)
 8000d58:	e9c2 3400 	strd	r3, r4, [r2]
	}
	pitPreError = pitError;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <PIDpit+0x108>)
 8000d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <PIDpit+0x110>)
 8000d64:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <PIDpit+0x128>)
 8000d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d6e:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d72:	eeb0 0b47 	vmov.f64	d0, d7
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc90      	pop	{r4, r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40590000 	.word	0x40590000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	c0590000 	.word	0xc0590000
 8000d90:	24000308 	.word	0x24000308
 8000d94:	24000900 	.word	0x24000900
 8000d98:	240000f0 	.word	0x240000f0
 8000d9c:	240001b0 	.word	0x240001b0
 8000da0:	24000800 	.word	0x24000800
 8000da4:	24000038 	.word	0x24000038
 8000da8:	24000310 	.word	0x24000310
 8000dac:	24000b38 	.word	0x24000b38
 8000db0:	240009e0 	.word	0x240009e0
 8000db4:	40590000 	.word	0x40590000
 8000db8:	c0590000 	.word	0xc0590000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <roR_pit_yaw_mixSpeed>:
	controlMotor4(_motor4Speed);
	spinalCordTrans();
}

void roR_pit_yaw_mixSpeed(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08d      	sub	sp, #52	; 0x34
 8000dc4:	af00      	add	r7, sp, #0
	double _roR_pit_speed = sqrt(roRPID*roRPID + pitPID*pitPID);
 8000dc6:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <roR_pit_yaw_mixSpeed+0x218>)
 8000dc8:	ed93 6b00 	vldr	d6, [r3]
 8000dcc:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <roR_pit_yaw_mixSpeed+0x218>)
 8000dce:	ed93 7b00 	vldr	d7, [r3]
 8000dd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000dd6:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <roR_pit_yaw_mixSpeed+0x21c>)
 8000dd8:	ed93 5b00 	vldr	d5, [r3]
 8000ddc:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <roR_pit_yaw_mixSpeed+0x21c>)
 8000dde:	ed93 7b00 	vldr	d7, [r3]
 8000de2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000de6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dea:	eeb0 0b47 	vmov.f64	d0, d7
 8000dee:	f00c f8e3 	bl	800cfb8 <sqrt>
 8000df2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roR_pit_dir = atan2(-roRPID, pitPID);
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <roR_pit_yaw_mixSpeed+0x218>)
 8000df8:	ed93 7b00 	vldr	d7, [r3]
 8000dfc:	eeb1 7b47 	vneg.f64	d7, d7
 8000e00:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <roR_pit_yaw_mixSpeed+0x21c>)
 8000e02:	ed93 6b00 	vldr	d6, [r3]
 8000e06:	eeb0 1b46 	vmov.f64	d1, d6
 8000e0a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e0e:	f00c f8cf 	bl	800cfb0 <atan2>
 8000e12:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 - _roR_pit_dir) + 0.0);
 8000e16:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000fc0 <roR_pit_yaw_mixSpeed+0x200>
 8000e1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e22:	eeb0 0b47 	vmov.f64	d0, d7
 8000e26:	f00c f887 	bl	800cf38 <cos>
 8000e2a:	eeb0 6b40 	vmov.f64	d6, d0
 8000e2e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e36:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000fc8 <roR_pit_yaw_mixSpeed+0x208>
 8000e3a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e3e:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <roR_pit_yaw_mixSpeed+0x220>)
 8000e40:	ed93 7b00 	vldr	d7, [r3]
 8000e44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e48:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 + _roR_pit_dir) - 0.0);
 8000e4c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e50:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8000fc0 <roR_pit_yaw_mixSpeed+0x200>
 8000e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e58:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5c:	f00c f86c 	bl	800cf38 <cos>
 8000e60:	eeb0 6b40 	vmov.f64	d6, d0
 8000e64:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e6c:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <roR_pit_yaw_mixSpeed+0x220>)
 8000e6e:	ed93 7b00 	vldr	d7, [r3]
 8000e72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e76:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +  _roR_pit_speed *cos(    M_PI/4.0 + _roR_pit_dir) + 0.0;
 8000e7a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e7e:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8000fd0 <roR_pit_yaw_mixSpeed+0x210>
 8000e82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e86:	eeb0 0b47 	vmov.f64	d0, d7
 8000e8a:	f00c f855 	bl	800cf38 <cos>
 8000e8e:	eeb0 6b40 	vmov.f64	d6, d0
 8000e92:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <roR_pit_yaw_mixSpeed+0x220>)
 8000e9c:	ed93 7b00 	vldr	d7, [r3]
 8000ea0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ea4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8000fc8 <roR_pit_yaw_mixSpeed+0x208>
 8000ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000eac:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +  _roR_pit_speed *cos(    M_PI/4.0 - _roR_pit_dir) - 0.0;
 8000eb0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000fd0 <roR_pit_yaw_mixSpeed+0x210>
 8000eb4:	ed97 7b08 	vldr	d7, [r7, #32]
 8000eb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ebc:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec0:	f00c f83a 	bl	800cf38 <cos>
 8000ec4:	eeb0 6b40 	vmov.f64	d6, d0
 8000ec8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ecc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <roR_pit_yaw_mixSpeed+0x220>)
 8000ed2:	ed93 7b00 	vldr	d7, [r3]
 8000ed6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eda:	ed87 7b00 	vstr	d7, [r7]

	a = 1.0 - _motor1Speed;
 8000ede:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ee2:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ee6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <roR_pit_yaw_mixSpeed+0x224>)
 8000eec:	ed83 7b00 	vstr	d7, [r3]
	b = 1.0 - _motor3Speed;
 8000ef0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ef8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <roR_pit_yaw_mixSpeed+0x228>)
 8000efe:	ed83 7b00 	vstr	d7, [r3]
	absSpeed = _roR_pit_speed;
 8000f02:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <roR_pit_yaw_mixSpeed+0x22c>)
 8000f04:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000f08:	e9c2 3400 	strd	r3, r4, [r2]
	dir = _roR_pit_dir;
 8000f0c:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <roR_pit_yaw_mixSpeed+0x230>)
 8000f0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f12:	e9c2 3400 	strd	r3, r4, [r2]
	cos_ = cos(3*M_PI/4 - _roR_pit_dir);
 8000f16:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000fc0 <roR_pit_yaw_mixSpeed+0x200>
 8000f1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000f1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f22:	eeb0 0b47 	vmov.f64	d0, d7
 8000f26:	f00c f807 	bl	800cf38 <cos>
 8000f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <roR_pit_yaw_mixSpeed+0x234>)
 8000f30:	ed83 7b00 	vstr	d7, [r3]
	motor1_debug = absSpeed*cos_;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <roR_pit_yaw_mixSpeed+0x22c>)
 8000f36:	ed93 6b00 	vldr	d6, [r3]
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <roR_pit_yaw_mixSpeed+0x234>)
 8000f3c:	ed93 7b00 	vldr	d7, [r3]
 8000f40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <roR_pit_yaw_mixSpeed+0x238>)
 8000f46:	ed83 7b00 	vstr	d7, [r3]
	motor1Speed_ = _motor1Speed;
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <roR_pit_yaw_mixSpeed+0x23c>)
 8000f4c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f50:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <roR_pit_yaw_mixSpeed+0x240>)
 8000f56:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f5a:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <roR_pit_yaw_mixSpeed+0x244>)
 8000f60:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f64:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <roR_pit_yaw_mixSpeed+0x248>)
 8000f6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f6e:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 8000f72:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f76:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f7a:	ee17 0a90 	vmov	r0, s15
 8000f7e:	f7ff fc9b 	bl	80008b8 <controlMotor1>
	controlMotor2(_motor2Speed);
 8000f82:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f8a:	ee17 0a90 	vmov	r0, s15
 8000f8e:	f7ff fcb9 	bl	8000904 <controlMotor2>
	controlMotor3(_motor3Speed);
 8000f92:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f9a:	ee17 0a90 	vmov	r0, s15
 8000f9e:	f7ff fcd7 	bl	8000950 <controlMotor3>
	controlMotor4(_motor4Speed);
 8000fa2:	ed97 7b00 	vldr	d7, [r7]
 8000fa6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000faa:	ee17 0a90 	vmov	r0, s15
 8000fae:	f7ff fcf5 	bl	800099c <controlMotor4>
	spinalCordTrans();
 8000fb2:	f7ff fc51 	bl	8000858 <spinalCordTrans>
}
 8000fb6:	bf00      	nop
 8000fb8:	3734      	adds	r7, #52	; 0x34
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	7f3321d2 	.word	0x7f3321d2
 8000fc4:	4002d97c 	.word	0x4002d97c
	...
 8000fd0:	54442d18 	.word	0x54442d18
 8000fd4:	3fe921fb 	.word	0x3fe921fb
 8000fd8:	240002f8 	.word	0x240002f8
 8000fdc:	240009e0 	.word	0x240009e0
 8000fe0:	24000a38 	.word	0x24000a38
 8000fe4:	24000b40 	.word	0x24000b40
 8000fe8:	240000f8 	.word	0x240000f8
 8000fec:	24000a18 	.word	0x24000a18
 8000ff0:	24000a28 	.word	0x24000a28
 8000ff4:	24000af8 	.word	0x24000af8
 8000ff8:	24000300 	.word	0x24000300
 8000ffc:	240000e8 	.word	0x240000e8
 8001000:	24000b20 	.word	0x24000b20
 8001004:	240009e8 	.word	0x240009e8
 8001008:	240007d0 	.word	0x240007d0

0800100c <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8001010:	2003      	movs	r0, #3
 8001012:	f7ff fc51 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8001016:	f06f 0002 	mvn.w	r0, #2
 800101a:	f7ff fc73 	bl	8000904 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 800101e:	2003      	movs	r0, #3
 8001020:	f7ff fc96 	bl	8000950 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8001024:	f06f 0002 	mvn.w	r0, #2
 8001028:	f7ff fcb8 	bl	800099c <controlMotor4>
	spinalCordTrans();
 800102c:	f7ff fc14 	bl	8000858 <spinalCordTrans>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <roR_Pit_Yaw_GoTo>:
	PIDpit(pitchDistance, posPit);
	roL_pit_yaw_mixSpeed();
}

void roR_Pit_Yaw_GoTo(uint32_t posRoR, uint32_t posPit, uint32_t posYaw)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <roR_Pit_Yaw_GoTo+0x4c>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f7ff fccb 	bl	80009e8 <PIDyaw>
	PIDroR(rigtDistance, posRoR);
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <roR_Pit_Yaw_GoTo+0x50>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff fd6b 	bl	8000b38 <PIDroR>
	PIDpit(pitchDistance, posPit);
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <roR_Pit_Yaw_GoTo+0x54>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f7ff fe0b 	bl	8000c88 <PIDpit>
	roR_pit_yaw_mixSpeed();
 8001072:	f7ff fea5 	bl	8000dc0 <roR_pit_yaw_mixSpeed>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240007e0 	.word	0x240007e0
 8001084:	24000808 	.word	0x24000808
 8001088:	24000b36 	.word	0x24000b36

0800108c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <positionControl_Init+0x18>)
 8001092:	f008 f82d 	bl	80090f0 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <positionControl_Init+0x1c>)
 800109c:	f005 f97e 	bl	800639c <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000b50 	.word	0x24000b50
 80010a8:	58021000 	.word	0x58021000

080010ac <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d16e      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d16a      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11e      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4837      	ldr	r0, [pc, #220]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010d8:	f005 f960 	bl	800639c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80010dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e0:	4834      	ldr	r0, [pc, #208]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010e2:	f005 f974 	bl	80063ce <HAL_GPIO_TogglePin>
				trackingLeg++;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010ee:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010f8:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2bc7      	cmp	r3, #199	; 0xc7
 8001100:	dd05      	ble.n	800110e <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11f      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800111e:	f005 f93d 	bl	800639c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	4823      	ldr	r0, [pc, #140]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001128:	f005 f951 	bl	80063ce <HAL_GPIO_TogglePin>
				trackingLeg++;
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001134:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800113e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001148:	db05      	blt.n	8001156 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d11f      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001166:	f005 f919 	bl	800639c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 800116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001170:	f005 f92d 	bl	80063ce <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800117c:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001186:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001190:	db05      	blt.n	800119e <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000b50 	.word	0x24000b50
 80011ac:	240009b8 	.word	0x240009b8
 80011b0:	24000af0 	.word	0x24000af0
 80011b4:	58020c00 	.word	0x58020c00
 80011b8:	240009b0 	.word	0x240009b0
 80011bc:	24000a0c 	.word	0x24000a0c

080011c0 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e01f      	b.n	8001210 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <SendByteSPI+0x60>)
 80011e6:	f005 f8d9 	bl	800639c <HAL_GPIO_WritePin>
 80011ea:	e004      	b.n	80011f6 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 80011ec:	2200      	movs	r2, #0
 80011ee:	2104      	movs	r1, #4
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <SendByteSPI+0x60>)
 80011f2:	f005 f8d3 	bl	800639c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <SendByteSPI+0x64>)
 80011fc:	f005 f8ce 	bl	800639c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8001200:	2201      	movs	r2, #1
 8001202:	2101      	movs	r1, #1
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <SendByteSPI+0x64>)
 8001206:	f005 f8c9 	bl	800639c <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b07      	cmp	r3, #7
 8001214:	dddc      	ble.n	80011d0 <SendByteSPI+0x10>

	}
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	58021800 	.word	0x58021800
 8001224:	58020400 	.word	0x58020400

08001228 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001232:	2201      	movs	r2, #1
 8001234:	2101      	movs	r1, #1
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <ST7920_SendCmd+0x4c>)
 8001238:	f005 f8b0 	bl	800639c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 800123c:	20f8      	movs	r0, #248	; 0xf8
 800123e:	f7ff ffbf 	bl	80011c0 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f023 030f 	bic.w	r3, r3, #15
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffb8 	bl	80011c0 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffb2 	bl	80011c0 <SendByteSPI>
	delayUs(50);
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f7ff f9db 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <ST7920_SendCmd+0x4c>)
 8001268:	f005 f898 	bl	800639c <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58021800 	.word	0x58021800

08001278 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 800127c:	2200      	movs	r2, #0
 800127e:	2108      	movs	r1, #8
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <ST7920_Init+0x7c>)
 8001282:	f005 f88b 	bl	800639c <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8001286:	200a      	movs	r0, #10
 8001288:	f001 f8e6 	bl	8002458 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <ST7920_Init+0x7c>)
 8001292:	f005 f883 	bl	800639c <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8001296:	2032      	movs	r0, #50	; 0x32
 8001298:	f001 f8de 	bl	8002458 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 800129c:	2030      	movs	r0, #48	; 0x30
 800129e:	f7ff ffc3 	bl	8001228 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 80012a2:	206e      	movs	r0, #110	; 0x6e
 80012a4:	f7ff f9b8 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 80012a8:	2030      	movs	r0, #48	; 0x30
 80012aa:	f7ff ffbd 	bl	8001228 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f7ff f9b2 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80012b4:	2008      	movs	r0, #8
 80012b6:	f7ff ffb7 	bl	8001228 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 80012ba:	206e      	movs	r0, #110	; 0x6e
 80012bc:	f7ff f9ac 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff ffb1 	bl	8001228 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80012c6:	200c      	movs	r0, #12
 80012c8:	f001 f8c6 	bl	8002458 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 80012cc:	2006      	movs	r0, #6
 80012ce:	f7ff ffab 	bl	8001228 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80012d2:	2001      	movs	r0, #1
 80012d4:	f001 f8c0 	bl	8002458 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 80012d8:	200c      	movs	r0, #12
 80012da:	f7ff ffa5 	bl	8001228 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80012de:	2001      	movs	r0, #1
 80012e0:	f001 f8ba 	bl	8002458 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff ff9f 	bl	8001228 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80012ea:	2001      	movs	r0, #1
 80012ec:	f001 f8b4 	bl	8002458 <HAL_Delay>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	58021800 	.word	0x58021800

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 f819 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f857 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 fb37 	bl	8001978 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 faf5 	bl	80018f8 <MX_DMA_Init>
  MX_ADC3_Init();
 800130e:	f000 f907 	bl	8001520 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001312:	f000 fa0d 	bl	8001730 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001316:	f000 fa57 	bl	80017c8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800131a:	f000 f985 	bl	8001628 <MX_TIM7_Init>
  MX_UART7_Init();
 800131e:	f000 f9bb 	bl	8001698 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8001322:	f000 fa9d 	bl	8001860 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8001326:	f7ff f957 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 800132a:	f7ff f99b 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 800132e:	f7ff fab5 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8001332:	f7ff feab 	bl	800108c <positionControl_Init>
  ST7920_Init();
 8001336:	f7ff ff9f 	bl	8001278 <ST7920_Init>

  tracking = 1000;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <main+0xb0>)
 800133c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001340:	601a      	str	r2, [r3, #0]
  brake();
 8001342:	f7ff fe63 	bl	800100c <brake>
  compassReset();
 8001346:	f7ff fa51 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <main+0xb4>)
 8001350:	f005 f824 	bl	800639c <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 8001354:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001358:	f001 f87e 	bl	8002458 <HAL_Delay>
//	  PIDyaw(compassData, 0);
//	  PIDroL(0,100);
//	  PIDpit(0,50);
//	  roL_pit_yaw_mixSpeed();

	  uint32_t startTime = HAL_GetTick();
 800135c:	f001 f870 	bl	8002440 <HAL_GetTick>
 8001360:	6078      	str	r0, [r7, #4]
	  while(HAL_GetTick() - startTime <3000)
 8001362:	e005      	b.n	8001370 <main+0x78>
	  {
		  roR_Pit_Yaw_GoTo(0, 0, 900);
 8001364:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001368:	2100      	movs	r1, #0
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe62 	bl	8001034 <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick() - startTime <3000)
 8001370:	f001 f866 	bl	8002440 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800137e:	4293      	cmp	r3, r2
 8001380:	d9f0      	bls.n	8001364 <main+0x6c>
	  }
	  startTime = HAL_GetTick();
 8001382:	f001 f85d 	bl	8002440 <HAL_GetTick>
 8001386:	6078      	str	r0, [r7, #4]
	  while(HAL_GetTick() - startTime <3000)
 8001388:	e004      	b.n	8001394 <main+0x9c>
	  {
		  roR_Pit_Yaw_GoTo(0, 0, -900);
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <main+0xb8>)
 800138c:	2100      	movs	r1, #0
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe50 	bl	8001034 <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick() - startTime <3000)
 8001394:	f001 f854 	bl	8002440 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d9f1      	bls.n	800138a <main+0x92>
  {
 80013a6:	e7d9      	b.n	800135c <main+0x64>
 80013a8:	240009d8 	.word	0x240009d8
 80013ac:	58020400 	.word	0x58020400
 80013b0:	fffffc7c 	.word	0xfffffc7c

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0cc      	sub	sp, #304	; 0x130
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013be:	224c      	movs	r2, #76	; 0x4c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b fdb0 	bl	800cf28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013cc:	2220      	movs	r2, #32
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00b fda9 	bl	800cf28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	23bc      	movs	r3, #188	; 0xbc
 80013de:	461a      	mov	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f00b fda1 	bl	800cf28 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f005 f80c 	bl	8006404 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <SystemClock_Config+0x164>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <SystemClock_Config+0x164>)
 80013f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b46      	ldr	r3, [pc, #280]	; (8001518 <SystemClock_Config+0x164>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <SystemClock_Config+0x168>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <SystemClock_Config+0x168>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <SystemClock_Config+0x168>)
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001426:	bf00      	nop
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <SystemClock_Config+0x164>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001434:	d1f8      	bne.n	8001428 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800143c:	2301      	movs	r3, #1
 800143e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800145a:	233c      	movs	r3, #60	; 0x3c
 800145c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001472:	230c      	movs	r3, #12
 8001474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fff5 	bl	8006478 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001494:	f000 fb9c 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	233f      	movs	r3, #63	; 0x3f
 800149a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2303      	movs	r3, #3
 80014a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014aa:	2308      	movs	r3, #8
 80014ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ce:	2104      	movs	r1, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fba9 	bl	8006c28 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80014dc:	f000 fb78 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2203      	movs	r2, #3
 80014e6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 ff17 	bl	8007330 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001508:	f000 fb62 	bl	8001bd0 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	58024800 	.word	0x58024800
 800151c:	58000400 	.word	0x58000400

08001520 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_ADC3_Init+0xf4>)
 800153a:	4a37      	ldr	r2, [pc, #220]	; (8001618 <MX_ADC3_Init+0xf8>)
 800153c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001540:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001544:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001548:	2208      	movs	r2, #8
 800154a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_ADC3_Init+0xf4>)
 800154e:	2201      	movs	r2, #1
 8001550:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001554:	2204      	movs	r2, #4
 8001556:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_ADC3_Init+0xf4>)
 800155a:	2200      	movs	r2, #0
 800155c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001560:	2201      	movs	r2, #1
 8001562:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001566:	2203      	movs	r2, #3
 8001568:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <MX_ADC3_Init+0xf4>)
 800156c:	2200      	movs	r2, #0
 800156e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_ADC3_Init+0xf4>)
 800157e:	2203      	movs	r2, #3
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001584:	2200      	movs	r2, #0
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_ADC3_Init+0xf4>)
 800158a:	2200      	movs	r2, #0
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <MX_ADC3_Init+0xf4>)
 8001598:	f001 f97e 	bl	8002898 <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80015a2:	f000 fb15 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_ADC3_Init+0xfc>)
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80015ae:	2306      	movs	r3, #6
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b8:	2304      	movs	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_ADC3_Init+0xf4>)
 80015c6:	f001 fbe9 	bl	8002d9c <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80015d0:	f000 fafe 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_ADC3_Init+0x100>)
 80015d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d8:	230c      	movs	r3, #12
 80015da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_ADC3_Init+0xf4>)
 80015e2:	f001 fbdb 	bl	8002d9c <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80015ec:	f000 faf0 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_ADC3_Init+0x104>)
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015f4:	2312      	movs	r3, #18
 80015f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC3_Init+0xf4>)
 80015fe:	f001 fbcd 	bl	8002d9c <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001608:	f000 fae2 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400081c 	.word	0x2400081c
 8001618:	58026000 	.word	0x58026000
 800161c:	04300002 	.word	0x04300002
 8001620:	2a000400 	.word	0x2a000400
 8001624:	2e300800 	.word	0x2e300800

08001628 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM7_Init+0x68>)
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <MX_TIM7_Init+0x6c>)
 800163c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_TIM7_Init+0x68>)
 8001640:	f640 125f 	movw	r2, #2399	; 0x95f
 8001644:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_TIM7_Init+0x68>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_TIM7_Init+0x68>)
 800164e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001652:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_TIM7_Init+0x68>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM7_Init+0x68>)
 800165c:	f007 fd1c 	bl	8009098 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001666:	f000 fab3 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM7_Init+0x68>)
 8001678:	f007 ff46 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001682:	f000 faa5 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24000b50 	.word	0x24000b50
 8001694:	40001400 	.word	0x40001400

08001698 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_UART7_Init+0x90>)
 800169e:	4a23      	ldr	r2, [pc, #140]	; (800172c <MX_UART7_Init+0x94>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_UART7_Init+0x90>)
 80016a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_UART7_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_UART7_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_UART7_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_UART7_Init+0x90>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_UART7_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_UART7_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_UART7_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_UART7_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_UART7_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <MX_UART7_Init+0x90>)
 80016e2:	f007 ffb7 	bl	8009654 <HAL_UART_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80016ec:	f000 fa70 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f0:	2100      	movs	r1, #0
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_UART7_Init+0x90>)
 80016f4:	f00b fb09 	bl	800cd0a <HAL_UARTEx_SetTxFifoThreshold>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80016fe:	f000 fa67 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001702:	2100      	movs	r1, #0
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <MX_UART7_Init+0x90>)
 8001706:	f00b fb3e 	bl	800cd86 <HAL_UARTEx_SetRxFifoThreshold>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001710:	f000 fa5e 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_UART7_Init+0x90>)
 8001716:	f00b fabf 	bl	800cc98 <HAL_UARTEx_DisableFifoMode>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001720:	f000 fa56 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	24000120 	.word	0x24000120
 800172c:	40007800 	.word	0x40007800

08001730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <MX_USART1_UART_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800177a:	f007 ff6b 	bl	8009654 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 fa24 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800178c:	f00b fabd 	bl	800cd0a <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001796:	f000 fa1b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800179e:	f00b faf2 	bl	800cd86 <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f000 fa12 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f00b fa73 	bl	800cc98 <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f000 fa0a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24000920 	.word	0x24000920
 80017c4:	40011000 	.word	0x40011000

080017c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <MX_USART3_UART_Init+0x94>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017d4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_USART3_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001812:	f007 ff1f 	bl	8009654 <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800181c:	f000 f9d8 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001824:	f00b fa71 	bl	800cd0a <HAL_UARTEx_SetTxFifoThreshold>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800182e:	f000 f9cf 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001836:	f00b faa6 	bl	800cd86 <HAL_UARTEx_SetRxFifoThreshold>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001840:	f000 f9c6 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_USART3_UART_Init+0x90>)
 8001846:	f00b fa27 	bl	800cc98 <HAL_UARTEx_DisableFifoMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001850:	f000 f9be 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24000254 	.word	0x24000254
 800185c:	40004800 	.word	0x40004800

08001860 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <MX_USART6_UART_Init+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 800186c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001870:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 80018aa:	f007 fed3 	bl	8009654 <HAL_UART_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80018b4:	f000 f98c 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 80018bc:	f00b fa25 	bl	800cd0a <HAL_UARTEx_SetTxFifoThreshold>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80018c6:	f000 f983 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 80018ce:	f00b fa5a 	bl	800cd86 <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80018d8:	f000 f97a 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_USART6_UART_Init+0x90>)
 80018de:	f00b f9db 	bl	800cc98 <HAL_UARTEx_DisableFifoMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80018e8:	f000 f972 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	24000a40 	.word	0x24000a40
 80018f4:	40011400 	.word	0x40011400

080018f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_DMA_Init+0x7c>)
 8001900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <MX_DMA_Init+0x7c>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_DMA_Init+0x7c>)
 8001910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_DMA_Init+0x7c>)
 800191e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <MX_DMA_Init+0x7c>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_DMA_Init+0x7c>)
 800192e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	200d      	movs	r0, #13
 8001940:	f002 f82b 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001944:	200d      	movs	r0, #13
 8001946:	f002 f842 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	200e      	movs	r0, #14
 8001950:	f002 f823 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001954:	200e      	movs	r0, #14
 8001956:	f002 f83a 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	203a      	movs	r0, #58	; 0x3a
 8001960:	f002 f81b 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001964:	203a      	movs	r0, #58	; 0x3a
 8001966:	f002 f832 	bl	80039ce <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	58024400 	.word	0x58024400

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a87      	ldr	r2, [pc, #540]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	4a80      	ldr	r2, [pc, #512]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019bc:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	4a71      	ldr	r2, [pc, #452]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	4a69      	ldr	r2, [pc, #420]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a24:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a34:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <MX_GPIO_Init+0x23c>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f240 7104 	movw	r1, #1796	; 0x704
 8001a66:	4854      	ldr	r0, [pc, #336]	; (8001bb8 <MX_GPIO_Init+0x240>)
 8001a68:	f004 fc98 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4852      	ldr	r0, [pc, #328]	; (8001bbc <MX_GPIO_Init+0x244>)
 8001a72:	f004 fc93 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001a76:	2200      	movs	r2, #0
 8001a78:	f242 0167 	movw	r1, #8295	; 0x2067
 8001a7c:	4850      	ldr	r0, [pc, #320]	; (8001bc0 <MX_GPIO_Init+0x248>)
 8001a7e:	f004 fc8d 	bl	800639c <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001a82:	2200      	movs	r2, #0
 8001a84:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001a88:	484e      	ldr	r0, [pc, #312]	; (8001bc4 <MX_GPIO_Init+0x24c>)
 8001a8a:	f004 fc87 	bl	800639c <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2182      	movs	r1, #130	; 0x82
 8001a92:	484d      	ldr	r0, [pc, #308]	; (8001bc8 <MX_GPIO_Init+0x250>)
 8001a94:	f004 fc82 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8001a9e:	484b      	ldr	r0, [pc, #300]	; (8001bcc <MX_GPIO_Init+0x254>)
 8001aa0:	f004 fc7c 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001aa4:	f240 7304 	movw	r3, #1796	; 0x704
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <MX_GPIO_Init+0x240>)
 8001abe:	f004 fabd 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4838      	ldr	r0, [pc, #224]	; (8001bbc <MX_GPIO_Init+0x244>)
 8001ada:	f004 faaf 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001ade:	f242 0367 	movw	r3, #8295	; 0x2067
 8001ae2:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4832      	ldr	r0, [pc, #200]	; (8001bc0 <MX_GPIO_Init+0x248>)
 8001af8:	f004 faa0 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001afc:	230d      	movs	r3, #13
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <MX_GPIO_Init+0x24c>)
 8001b14:	f004 fa92 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <MX_GPIO_Init+0x250>)
 8001b30:	f004 fa84 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8001b34:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <MX_GPIO_Init+0x254>)
 8001b4e:	f004 fa75 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_GPIO_Init+0x254>)
 8001b6c:	f004 fa66 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001b70:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001b74:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <MX_GPIO_Init+0x24c>)
 8001b8a:	f004 fa57 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <MX_GPIO_Init+0x250>)
 8001ba6:	f004 fa49 	bl	800603c <HAL_GPIO_Init>

}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	; 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58020000 	.word	0x58020000
 8001bbc:	58020800 	.word	0x58020800
 8001bc0:	58020400 	.word	0x58020400
 8001bc4:	58021800 	.word	0x58021800
 8001bc8:	58021000 	.word	0x58021000
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_MspInit+0x30>)
 8001be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bec:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_MspInit+0x30>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_MspInit+0x30>)
 8001bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	58024400 	.word	0x58024400

08001c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <HAL_ADC_MspInit+0xec>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d15f      	bne.n	8001cf6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_ADC_MspInit+0xf0>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8001c72:	2303      	movs	r3, #3
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4820      	ldr	r0, [pc, #128]	; (8001d08 <HAL_ADC_MspInit+0xf4>)
 8001c86:	f004 f9d9 	bl	800603c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001c8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001c8e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c92:	f000 fc0f 	bl	80024b4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ADC_MspInit+0xfc>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001c9e:	2273      	movs	r2, #115	; 0x73
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001cda:	480c      	ldr	r0, [pc, #48]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cdc:	f001 fe92 	bl	8003a04 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001ce6:	f7ff ff73 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_ADC_MspInit+0xf8>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58026000 	.word	0x58026000
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58020800 	.word	0x58020800
 8001d0c:	24000748 	.word	0x24000748
 8001d10:	40020040 	.word	0x40020040

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_TIM_Base_MspInit+0x48>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d116      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_TIM_Base_MspInit+0x4c>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_TIM_Base_MspInit+0x4c>)
 8001d2e:	f043 0320 	orr.w	r3, r3, #32
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_TIM_Base_MspInit+0x4c>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2037      	movs	r0, #55	; 0x37
 8001d4a:	f001 fe26 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d4e:	2037      	movs	r0, #55	; 0x37
 8001d50:	f001 fe3d 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40001400 	.word	0x40001400
 8001d60:	58024400 	.word	0x58024400

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b090      	sub	sp, #64	; 0x40
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4aa3      	ldr	r2, [pc, #652]	; (8002010 <HAL_UART_MspInit+0x2ac>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d136      	bne.n	8001df4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d86:	4ba3      	ldr	r3, [pc, #652]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8c:	4aa1      	ldr	r2, [pc, #644]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d96:	4b9f      	ldr	r3, [pc, #636]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da4:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	4a9a      	ldr	r2, [pc, #616]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db4:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	488e      	ldr	r0, [pc, #568]	; (8002018 <HAL_UART_MspInit+0x2b4>)
 8001dde:	f004 f92d 	bl	800603c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2104      	movs	r1, #4
 8001de6:	2052      	movs	r0, #82	; 0x52
 8001de8:	f001 fdd7 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001dec:	2052      	movs	r0, #82	; 0x52
 8001dee:	f001 fdee 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001df2:	e108      	b.n	8002006 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a88      	ldr	r2, [pc, #544]	; (800201c <HAL_UART_MspInit+0x2b8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d165      	bne.n	8001eca <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfe:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e04:	4a83      	ldr	r2, [pc, #524]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e0e:	4b81      	ldr	r3, [pc, #516]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a7c      	ldr	r2, [pc, #496]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001e3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e54:	4619      	mov	r1, r3
 8001e56:	4872      	ldr	r0, [pc, #456]	; (8002020 <HAL_UART_MspInit+0x2bc>)
 8001e58:	f004 f8f0 	bl	800603c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001e5c:	4b71      	ldr	r3, [pc, #452]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e5e:	4a72      	ldr	r2, [pc, #456]	; (8002028 <HAL_UART_MspInit+0x2c4>)
 8001e60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e64:	2229      	movs	r2, #41	; 0x29
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e68:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b6b      	ldr	r3, [pc, #428]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e9c:	4861      	ldr	r0, [pc, #388]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001e9e:	f001 fdb1 	bl	8003a04 <HAL_DMA_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001ea8:	f7ff fe92 	bl	8001bd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001eb0:	679a      	str	r2, [r3, #120]	; 0x78
 8001eb2:	4a5c      	ldr	r2, [pc, #368]	; (8002024 <HAL_UART_MspInit+0x2c0>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2101      	movs	r1, #1
 8001ebc:	2025      	movs	r0, #37	; 0x25
 8001ebe:	f001 fd6c 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec2:	2025      	movs	r0, #37	; 0x25
 8001ec4:	f001 fd83 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 8001ec8:	e09d      	b.n	8002006 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_UART_MspInit+0x2c8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d15d      	bne.n	8001f90 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eda:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f22:	2307      	movs	r3, #7
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	483c      	ldr	r0, [pc, #240]	; (8002020 <HAL_UART_MspInit+0x2bc>)
 8001f2e:	f004 f885 	bl	800603c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f34:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <HAL_UART_MspInit+0x2d0>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f3a:	222d      	movs	r2, #45	; 0x2d
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f64:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f72:	482f      	ldr	r0, [pc, #188]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f74:	f001 fd46 	bl	8003a04 <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001f7e:	f7ff fe27 	bl	8001bd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f86:	679a      	str	r2, [r3, #120]	; 0x78
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_UART_MspInit+0x2cc>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f8e:	e03a      	b.n	8002006 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_UART_MspInit+0x2d4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d135      	bne.n	8002006 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_UART_MspInit+0x2b0>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4812      	ldr	r0, [pc, #72]	; (800203c <HAL_UART_MspInit+0x2d8>)
 8001ff2:	f004 f823 	bl	800603c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	2047      	movs	r0, #71	; 0x47
 8001ffc:	f001 fccd 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002000:	2047      	movs	r0, #71	; 0x47
 8002002:	f001 fce4 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3740      	adds	r7, #64	; 0x40
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40007800 	.word	0x40007800
 8002014:	58024400 	.word	0x58024400
 8002018:	58021400 	.word	0x58021400
 800201c:	40011000 	.word	0x40011000
 8002020:	58020400 	.word	0x58020400
 8002024:	24000884 	.word	0x24000884
 8002028:	40020058 	.word	0x40020058
 800202c:	40004800 	.word	0x40004800
 8002030:	240001c4 	.word	0x240001c4
 8002034:	40020440 	.word	0x40020440
 8002038:	40011400 	.word	0x40011400
 800203c:	58020800 	.word	0x58020800

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <SysTick_Handler+0x2c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <SysTick_Handler+0x2c>)
 800209e:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SysTick_Handler+0x2c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d904      	bls.n	80020b2 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Handler+0x2c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 80020ae:	f7fe fbb3 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b2:	f000 f9b1 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24000910 	.word	0x24000910

080020c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA1_Stream2_IRQHandler+0x10>)
 80020c6:	f002 fca7 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24000748 	.word	0x24000748

080020d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <DMA1_Stream3_IRQHandler+0x24>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b21a      	sxth	r2, r3
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <DMA1_Stream3_IRQHandler+0x24>)
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <DMA1_Stream3_IRQHandler+0x28>)
 80020ec:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <DMA1_Stream3_IRQHandler+0x2c>)
 80020f0:	f002 fc92 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	24000720 	.word	0x24000720
 80020fc:	240007e0 	.word	0x240007e0
 8002100:	24000884 	.word	0x24000884

08002104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USART1_IRQHandler+0x10>)
 800210a:	f007 fd6d 	bl	8009be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	24000920 	.word	0x24000920

08002118 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM7_IRQHandler+0x10>)
 800211e:	f007 f811 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	24000b50 	.word	0x24000b50

0800212c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d135      	bne.n	80021a4 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <DMA2_Stream2_IRQHandler+0xac>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	b2d1      	uxtb	r1, r2
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <DMA2_Stream2_IRQHandler+0xac>)
 8002142:	7011      	strb	r1, [r2, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <DMA2_Stream2_IRQHandler+0xb0>)
 8002148:	7819      	ldrb	r1, [r3, #0]
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 800214c:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <DMA2_Stream2_IRQHandler+0xac>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d926      	bls.n	80021a4 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <DMA2_Stream2_IRQHandler+0xac>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <DMA2_Stream2_IRQHandler+0xb8>)
 8002176:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 8002182:	78db      	ldrb	r3, [r3, #3]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <DMA2_Stream2_IRQHandler+0xbc>)
 800218c:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 8002190:	791b      	ldrb	r3, [r3, #4]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <DMA2_Stream2_IRQHandler+0xb4>)
 8002198:	795b      	ldrb	r3, [r3, #5]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <DMA2_Stream2_IRQHandler+0xc0>)
 80021a2:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <DMA2_Stream2_IRQHandler+0xb0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2baa      	cmp	r3, #170	; 0xaa
 80021aa:	d106      	bne.n	80021ba <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e006      	b.n	80021c8 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d002      	beq.n	80021c8 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <DMA2_Stream2_IRQHandler+0xa8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <DMA2_Stream2_IRQHandler+0xc4>)
 80021ca:	f002 fc25 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	240000d4 	.word	0x240000d4
 80021d8:	24000814 	.word	0x24000814
 80021dc:	24000acc 	.word	0x24000acc
 80021e0:	24000718 	.word	0x24000718
 80021e4:	240009bc 	.word	0x240009bc
 80021e8:	240009c0 	.word	0x240009c0
 80021ec:	24000b08 	.word	0x24000b08
 80021f0:	240001c4 	.word	0x240001c4

080021f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <USART6_IRQHandler+0x10>)
 80021fa:	f007 fcf5 	bl	8009be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	24000a40 	.word	0x24000a40

08002208 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <UART7_IRQHandler+0x10>)
 800220e:	f007 fceb 	bl	8009be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24000120 	.word	0x24000120

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <SystemInit+0xac>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <SystemInit+0xac>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <SystemInit+0xb0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <SystemInit+0xb0>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <SystemInit+0xb0>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <SystemInit+0xb0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4921      	ldr	r1, [pc, #132]	; (80022cc <SystemInit+0xb0>)
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <SystemInit+0xb4>)
 800224a:	4013      	ands	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <SystemInit+0xb0>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <SystemInit+0xb0>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <SystemInit+0xb0>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <SystemInit+0xb0>)
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <SystemInit+0xb0>)
 8002268:	2200      	movs	r2, #0
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <SystemInit+0xb0>)
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <SystemInit+0xb0>)
 8002274:	2200      	movs	r2, #0
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <SystemInit+0xb0>)
 800227a:	2200      	movs	r2, #0
 800227c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <SystemInit+0xb0>)
 8002280:	2200      	movs	r2, #0
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <SystemInit+0xb0>)
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <SystemInit+0xb0>)
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <SystemInit+0xb0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <SystemInit+0xb0>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <SystemInit+0xb0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <SystemInit+0xb8>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <SystemInit+0xbc>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ae:	d202      	bcs.n	80022b6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <SystemInit+0xc0>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SystemInit+0xac>)
 80022b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	58024400 	.word	0x58024400
 80022d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80022d4:	5c001000 	.word	0x5c001000
 80022d8:	ffff0000 	.word	0xffff0000
 80022dc:	51008108 	.word	0x51008108

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022e6:	e003      	b.n	80022f0 <LoopCopyDataInit>

080022e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ee:	3104      	adds	r1, #4

080022f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022f0:	480b      	ldr	r0, [pc, #44]	; (8002320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022f8:	d3f6      	bcc.n	80022e8 <CopyDataInit>
  ldr  r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022fc:	e002      	b.n	8002304 <LoopFillZerobss>

080022fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002300:	f842 3b04 	str.w	r3, [r2], #4

08002304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002308:	d3f9      	bcc.n	80022fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800230a:	f7ff ff87 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f00a fde7 	bl	800cee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fff1 	bl	80012f8 <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800231c:	0800e1e8 	.word	0x0800e1e8
  ldr  r0, =_sdata
 8002320:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002324:	240000b8 	.word	0x240000b8
  ldr  r2, =_sbss
 8002328:	240000b8 	.word	0x240000b8
  ldr  r3, = _ebss
 800232c:	24000bcc 	.word	0x24000bcc

08002330 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC3_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233a:	2003      	movs	r0, #3
 800233c:	f001 fb22 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002340:	f004 fe28 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8002344:	4601      	mov	r1, r0
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_Init+0x68>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_Init+0x6c>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa21 f303 	lsr.w	r3, r1, r3
 800235c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_Init+0x68>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_Init+0x6c>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_Init+0x70>)
 8002376:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_Init+0x74>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237e:	2000      	movs	r0, #0
 8002380:	f000 f814 	bl	80023ac <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e002      	b.n	8002394 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800238e:	f7ff fc27 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	58024400 	.word	0x58024400
 80023a0:	0800dfa0 	.word	0x0800dfa0
 80023a4:	24000044 	.word	0x24000044
 80023a8:	24000040 	.word	0x24000040

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_InitTick+0x60>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e021      	b.n	8002404 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_InitTick+0x64>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_InitTick+0x60>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fb07 	bl	80039ea <HAL_SYSTICK_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00e      	b.n	8002404 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d80a      	bhi.n	8002402 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f001 fad1 	bl	800399a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_InitTick+0x68>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2400004c 	.word	0x2400004c
 8002410:	24000040 	.word	0x24000040
 8002414:	24000048 	.word	0x24000048

08002418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x20>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x24>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_IncTick+0x24>)
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	2400004c 	.word	0x2400004c
 800243c:	24000bc8 	.word	0x24000bc8

08002440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_GetTick+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	24000bc8 	.word	0x24000bc8

08002458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff ffee 	bl	8002440 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d005      	beq.n	800247e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_Delay+0x40>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247e:	bf00      	nop
 8002480:	f7ff ffde 	bl	8002440 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8f7      	bhi.n	8002480 <HAL_Delay+0x28>
  {
  }
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2400004c 	.word	0x2400004c

0800249c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetREVID+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	5c001000 	.word	0x5c001000

080024b4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	58000400 	.word	0x58000400

080024e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002548:	b490      	push	{r4, r7}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	430b      	orrs	r3, r1
 8002574:	4313      	orrs	r3, r2
 8002576:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bc90      	pop	{r4, r7}
 8002580:	4770      	bx	lr

08002582 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	611a      	str	r2, [r3, #16]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025b4:	b490      	push	{r4, r7}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3360      	adds	r3, #96	; 0x60
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	6023      	str	r3, [r4, #0]
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc90      	pop	{r4, r7}
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800260a:	b490      	push	{r4, r7}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3330      	adds	r3, #48	; 0x30
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	4413      	add	r3, r2
 8002628:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	211f      	movs	r1, #31
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	f003 011f 	and.w	r1, r3, #31
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bc90      	pop	{r4, r7}
 800265a:	4770      	bx	lr

0800265c <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60da      	str	r2, [r3, #12]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002682:	b490      	push	{r4, r7}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3314      	adds	r3, #20
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0d1b      	lsrs	r3, r3, #20
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2107      	movs	r1, #7
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	401a      	ands	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc90      	pop	{r4, r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0318 	and.w	r3, r3, #24
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026f8:	40d9      	lsrs	r1, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	400b      	ands	r3, r1
 80026fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	000fffff 	.word	0x000fffff

0800271c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 031f 	and.w	r3, r3, #31
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002746:	4013      	ands	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6093      	str	r3, [r2, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	5fffffc0 	.word	0x5fffffc0

0800275c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002770:	d101      	bne.n	8002776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002792:	4013      	ands	r3, r2
 8002794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	6fffffc0 	.word	0x6fffffc0

080027ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d101      	bne.n	80027c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <LL_ADC_Enable+0x24>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	7fffffc0 	.word	0x7fffffc0

080027fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <LL_ADC_IsEnabled+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_IsEnabled+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <LL_ADC_REG_StartConversion+0x24>)
 8002832:	4013      	ands	r3, r2
 8002834:	f043 0204 	orr.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	7fffffc0 	.word	0x7fffffc0

0800284c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d101      	bne.n	8002864 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d101      	bne.n	800288a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e18e      	b.n	8002bd0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff f9a7 	bl	8001c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff3f 	bl	800275c <LL_ADC_IsDeepPowerDownEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff25 	bl	8002738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff5a 	bl	80027ac <LL_ADC_IsInternalRegulatorEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff3e 	bl	8002784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002908:	4b9a      	ldr	r3, [pc, #616]	; (8002b74 <HAL_ADC_Init+0x2dc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	4a9a      	ldr	r2, [pc, #616]	; (8002b78 <HAL_ADC_Init+0x2e0>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002918:	e002      	b.n	8002920 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3b01      	subs	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f9      	bne.n	800291a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff3e 	bl	80027ac <LL_ADC_IsInternalRegulatorEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff78 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 800295c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8129 	bne.w	8002bbe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 8125 	bne.w	8002bbe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800297c:	f043 0202 	orr.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff37 	bl	80027fc <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d136      	bne.n	8002a02 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a78      	ldr	r2, [pc, #480]	; (8002b7c <HAL_ADC_Init+0x2e4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_ADC_Init+0x110>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a77      	ldr	r2, [pc, #476]	; (8002b80 <HAL_ADC_Init+0x2e8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10e      	bne.n	80029c6 <HAL_ADC_Init+0x12e>
 80029a8:	4874      	ldr	r0, [pc, #464]	; (8002b7c <HAL_ADC_Init+0x2e4>)
 80029aa:	f7ff ff27 	bl	80027fc <LL_ADC_IsEnabled>
 80029ae:	4604      	mov	r4, r0
 80029b0:	4873      	ldr	r0, [pc, #460]	; (8002b80 <HAL_ADC_Init+0x2e8>)
 80029b2:	f7ff ff23 	bl	80027fc <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4323      	orrs	r3, r4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e008      	b.n	80029d8 <HAL_ADC_Init+0x140>
 80029c6:	486f      	ldr	r0, [pc, #444]	; (8002b84 <HAL_ADC_Init+0x2ec>)
 80029c8:	f7ff ff18 	bl	80027fc <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a66      	ldr	r2, [pc, #408]	; (8002b7c <HAL_ADC_Init+0x2e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_ADC_Init+0x158>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_ADC_Init+0x2e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_Init+0x15c>
 80029f0:	4a65      	ldr	r2, [pc, #404]	; (8002b88 <HAL_ADC_Init+0x2f0>)
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_Init+0x15e>
 80029f4:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_ADC_Init+0x2f4>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff fd6f 	bl	80024e0 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a02:	f7ff fd4b 	bl	800249c <HAL_GetREVID>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d914      	bls.n	8002a3a <HAL_ADC_Init+0x1a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d110      	bne.n	8002a3a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7d5b      	ldrb	r3, [r3, #21]
 8002a1c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a22:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a28:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7f1b      	ldrb	r3, [r3, #28]
 8002a2e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a30:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a32:	f043 030c 	orr.w	r3, r3, #12
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e00d      	b.n	8002a56 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7d5b      	ldrb	r3, [r3, #21]
 8002a3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f1b      	ldrb	r3, [r3, #28]
 8002a50:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7f1b      	ldrb	r3, [r3, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	045b      	lsls	r3, r3, #17
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <HAL_ADC_Init+0x2f8>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fed3 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002aa6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fee0 	bl	8002872 <LL_ADC_INJ_IsConversionOngoing>
 8002ab2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d14a      	bne.n	8002b50 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d147      	bne.n	8002b50 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7d1b      	ldrb	r3, [r3, #20]
 8002ac4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_ADC_Init+0x2fc>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d11b      	bne.n	8002b24 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_ADC_Init+0x300>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b00:	3a01      	subs	r2, #1
 8002b02:	0411      	lsls	r1, r2, #16
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b08:	4311      	orrs	r1, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b14:	430a      	orrs	r2, r1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	e007      	b.n	8002b34 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fd52 	bl	80035f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d121      	bne.n	8002b9c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f023 010f 	bic.w	r1, r3, #15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b70:	e01c      	b.n	8002bac <HAL_ADC_Init+0x314>
 8002b72:	bf00      	nop
 8002b74:	24000040 	.word	0x24000040
 8002b78:	053e2d63 	.word	0x053e2d63
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40022100 	.word	0x40022100
 8002b84:	58026000 	.word	0x58026000
 8002b88:	40022300 	.word	0x40022300
 8002b8c:	58026300 	.word	0x58026300
 8002b90:	fff0c003 	.word	0xfff0c003
 8002b94:	ffffbffc 	.word	0xffffbffc
 8002b98:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020f 	bic.w	r2, r2, #15
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f023 0303 	bic.w	r3, r3, #3
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
 8002bbc:	e007      	b.n	8002bce <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0210 	orr.w	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3724      	adds	r7, #36	; 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_ADC_Start_DMA+0x168>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0x20>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_ADC_Start_DMA+0x16c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_Start_DMA+0x24>
 8002bf8:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_ADC_Start_DMA+0x170>)
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_Start_DMA+0x26>
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_ADC_Start_DMA+0x174>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fd8c 	bl	800271c <LL_ADC_GetMultimode>
 8002c04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe1e 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 808c 	bne.w	8002d30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start_DMA+0x4e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e087      	b.n	8002d36 <HAL_ADC_Start_DMA+0x15e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d002      	beq.n	8002c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d170      	bne.n	8002d22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fbbf 	bl	80033c4 <ADC_Enable>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d163      	bne.n	8002d18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_ADC_Start_DMA+0x178>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a37      	ldr	r2, [pc, #220]	; (8002d44 <HAL_ADC_Start_DMA+0x16c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d002      	beq.n	8002c70 <HAL_ADC_Start_DMA+0x98>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e000      	b.n	8002c72 <HAL_ADC_Start_DMA+0x9a>
 8002c70:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_ADC_Start_DMA+0x168>)
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d002      	beq.n	8002c80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	f023 0206 	bic.w	r2, r3, #6
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	4a28      	ldr	r2, [pc, #160]	; (8002d54 <HAL_ADC_Start_DMA+0x17c>)
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_ADC_Start_DMA+0x180>)
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <HAL_ADC_Start_DMA+0x184>)
 8002cc2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	221c      	movs	r2, #28
 8002cca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0210 	orr.w	r2, r2, #16
 8002ce2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7ff fcb4 	bl	800265c <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3340      	adds	r3, #64	; 0x40
 8002cfe:	4619      	mov	r1, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f001 f9da 	bl	80040bc <HAL_DMA_Start_IT>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fd87 	bl	8002824 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d16:	e00d      	b.n	8002d34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002d20:	e008      	b.n	8002d34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d2e:	e001      	b.n	8002d34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
 8002d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022100 	.word	0x40022100
 8002d48:	40022300 	.word	0x40022300
 8002d4c:	58026300 	.word	0x58026300
 8002d50:	fffff0fe 	.word	0xfffff0fe
 8002d54:	080034cd 	.word	0x080034cd
 8002d58:	080035a5 	.word	0x080035a5
 8002d5c:	080035c1 	.word	0x080035c1

08002d60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b099      	sub	sp, #100	; 0x64
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a99      	ldr	r2, [pc, #612]	; (800301c <HAL_ADC_ConfigChannel+0x280>)
 8002db6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x2a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e2e6      	b.n	8003394 <HAL_ADC_ConfigChannel+0x5f8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fd3a 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 82cb 	bne.w	8003376 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x62>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2201      	movs	r2, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	e00f      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x82>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2201      	movs	r2, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	69d1      	ldr	r1, [r2, #28]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f7ff fbe6 	bl	800260a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fd02 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002e48:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fd0f 	bl	8002872 <LL_ADC_INJ_IsConversionOngoing>
 8002e54:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80b3 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 80af 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7ff fc05 	bl	8002682 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e78:	4b69      	ldr	r3, [pc, #420]	; (8003020 <HAL_ADC_ConfigChannel+0x284>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e84:	d10b      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x102>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	e01d      	b.n	8002eda <HAL_ADC_ConfigChannel+0x13e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x128>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	e00a      	b.n	8002eda <HAL_ADC_ConfigChannel+0x13e>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d027      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6919      	ldr	r1, [r3, #16]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	f7ff fb29 	bl	8002548 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6919      	ldr	r1, [r3, #16]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	7e5b      	ldrb	r3, [r3, #25]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x170>
 8002f06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f0a:	e000      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x172>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7ff fb50 	bl	80025b4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7e1b      	ldrb	r3, [r3, #24]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x18e>
 8002f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x190>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f7ff fb28 	bl	8002582 <LL_ADC_SetDataRightShift>
 8002f32:	e047      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f7a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f9e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	069b      	lsls	r3, r3, #26
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fc2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc17 	bl	80027fc <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 81d9 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f7ff fb76 	bl	80026d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <HAL_ADC_ConfigChannel+0x280>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	f040 8101 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10f      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x288>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2b09      	cmp	r3, #9
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e016      	b.n	800304a <HAL_ADC_ConfigChannel+0x2ae>
 800301c:	47ff0000 	.word	0x47ff0000
 8003020:	5c001000 	.word	0x5c001000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b09      	cmp	r3, #9
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304a:	2b00      	cmp	r3, #0
 800304c:	d064      	beq.n	8003118 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <HAL_ADC_ConfigChannel+0x2ce>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	069b      	lsls	r3, r3, #26
 8003064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003068:	e00e      	b.n	8003088 <HAL_ADC_ConfigChannel+0x2ec>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x30c>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	e010      	b.n	80030ca <HAL_ADC_ConfigChannel+0x32e>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	ea42 0103 	orr.w	r1, r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x354>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	3301      	adds	r3, #1
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	e011      	b.n	8003114 <HAL_ADC_ConfigChannel+0x378>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003114:	430b      	orrs	r3, r1
 8003116:	e069      	b.n	80031ec <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x398>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	3301      	adds	r3, #1
 800312c:	069b      	lsls	r3, r3, #26
 800312e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003132:	e00e      	b.n	8003152 <HAL_ADC_ConfigChannel+0x3b6>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	61fb      	str	r3, [r7, #28]
  return result;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	069b      	lsls	r3, r3, #26
 800314e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x3d6>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	3301      	adds	r3, #1
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	e010      	b.n	8003194 <HAL_ADC_ConfigChannel+0x3f8>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	617b      	str	r3, [r7, #20]
  return result;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	ea42 0103 	orr.w	r1, r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x424>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	3301      	adds	r3, #1
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	051b      	lsls	r3, r3, #20
 80031ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031be:	e014      	b.n	80031ea <HAL_ADC_ConfigChannel+0x44e>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	60fb      	str	r3, [r7, #12]
  return result;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	3b1e      	subs	r3, #30
 80031e4:	051b      	lsls	r3, r3, #20
 80031e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ea:	430b      	orrs	r3, r1
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	6892      	ldr	r2, [r2, #8]
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7ff fa46 	bl	8002682 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f280 80c4 	bge.w	8003388 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x478>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a64      	ldr	r2, [pc, #400]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x47c>
 8003214:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_ADC_ConfigChannel+0x608>)
 8003216:	e000      	b.n	800321a <HAL_ADC_ConfigChannel+0x47e>
 8003218:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_ADC_ConfigChannel+0x60c>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f986 	bl	800252c <LL_ADC_GetCommonPathInternalCh>
 8003220:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5d      	ldr	r2, [pc, #372]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x49a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5b      	ldr	r2, [pc, #364]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10e      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x4b8>
 8003236:	4859      	ldr	r0, [pc, #356]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 8003238:	f7ff fae0 	bl	80027fc <LL_ADC_IsEnabled>
 800323c:	4604      	mov	r4, r0
 800323e:	4858      	ldr	r0, [pc, #352]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003240:	f7ff fadc 	bl	80027fc <LL_ADC_IsEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	4323      	orrs	r3, r4
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_ADC_ConfigChannel+0x4ca>
 8003254:	4855      	ldr	r0, [pc, #340]	; (80033ac <HAL_ADC_ConfigChannel+0x610>)
 8003256:	f7ff fad1 	bl	80027fc <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07b      	beq.n	8003362 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a50      	ldr	r2, [pc, #320]	; (80033b0 <HAL_ADC_ConfigChannel+0x614>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d12e      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x536>
 8003274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d129      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4a      	ldr	r2, [pc, #296]	; (80033ac <HAL_ADC_ConfigChannel+0x610>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d17f      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a43      	ldr	r2, [pc, #268]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_ADC_ConfigChannel+0x500>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a42      	ldr	r2, [pc, #264]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x504>
 800329c:	4a41      	ldr	r2, [pc, #260]	; (80033a4 <HAL_ADC_ConfigChannel+0x608>)
 800329e:	e000      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x506>
 80032a0:	4a41      	ldr	r2, [pc, #260]	; (80033a8 <HAL_ADC_ConfigChannel+0x60c>)
 80032a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff f92b 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_ADC_ConfigChannel+0x618>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_ADC_ConfigChannel+0x61c>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80032c2:	e002      	b.n	80032ca <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d0:	e05a      	b.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a39      	ldr	r2, [pc, #228]	; (80033bc <HAL_ADC_ConfigChannel+0x620>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d11e      	bne.n	800331a <HAL_ADC_ConfigChannel+0x57e>
 80032dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a30      	ldr	r2, [pc, #192]	; (80033ac <HAL_ADC_ConfigChannel+0x610>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d14b      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a29      	ldr	r2, [pc, #164]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x568>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x56c>
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_ADC_ConfigChannel+0x608>)
 8003306:	e000      	b.n	800330a <HAL_ADC_ConfigChannel+0x56e>
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_ADC_ConfigChannel+0x60c>)
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7ff f8f7 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003318:	e036      	b.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <HAL_ADC_ConfigChannel+0x624>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d131      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12c      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <HAL_ADC_ConfigChannel+0x610>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d127      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_ADC_ConfigChannel+0x600>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_ADC_ConfigChannel+0x5b0>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_ADC_ConfigChannel+0x604>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x5b4>
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_ADC_ConfigChannel+0x608>)
 800334e:	e000      	b.n	8003352 <HAL_ADC_ConfigChannel+0x5b6>
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <HAL_ADC_ConfigChannel+0x60c>)
 8003352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f7ff f8d3 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
 8003360:	e012      	b.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003374:	e008      	b.n	8003388 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003394:	4618      	mov	r0, r3
 8003396:	3764      	adds	r7, #100	; 0x64
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022100 	.word	0x40022100
 80033a4:	40022300 	.word	0x40022300
 80033a8:	58026300 	.word	0x58026300
 80033ac:	58026000 	.word	0x58026000
 80033b0:	cb840000 	.word	0xcb840000
 80033b4:	24000040 	.word	0x24000040
 80033b8:	053e2d63 	.word	0x053e2d63
 80033bc:	c7520000 	.word	0xc7520000
 80033c0:	cfb80000 	.word	0xcfb80000

080033c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fa13 	bl	80027fc <LL_ADC_IsEnabled>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d167      	bne.n	80034ac <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <ADC_Enable+0xf4>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f043 0210 	orr.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e053      	b.n	80034ae <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f9e2 	bl	80027d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003410:	f7ff f816 	bl	8002440 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a28      	ldr	r2, [pc, #160]	; (80034bc <ADC_Enable+0xf8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <ADC_Enable+0x66>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <ADC_Enable+0xfc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <ADC_Enable+0x6a>
 800342a:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <ADC_Enable+0x100>)
 800342c:	e000      	b.n	8003430 <ADC_Enable+0x6c>
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <ADC_Enable+0x104>)
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f973 	bl	800271c <LL_ADC_GetMultimode>
 8003436:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a20      	ldr	r2, [pc, #128]	; (80034c0 <ADC_Enable+0xfc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d002      	beq.n	8003448 <ADC_Enable+0x84>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e000      	b.n	800344a <ADC_Enable+0x86>
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <ADC_Enable+0xf8>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4293      	cmp	r3, r2
 8003450:	d025      	beq.n	800349e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d129      	bne.n	80034ac <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003458:	e021      	b.n	800349e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f9cc 	bl	80027fc <LL_ADC_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f9b0 	bl	80027d4 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003474:	f7fe ffe4 	bl	8002440 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d90d      	bls.n	800349e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	f043 0210 	orr.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e007      	b.n	80034ae <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d1d6      	bne.n	800345a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	8000003f 	.word	0x8000003f
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40022100 	.word	0x40022100
 80034c4:	40022300 	.word	0x40022300
 80034c8:	58026300 	.word	0x58026300

080034cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d14b      	bne.n	800357e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d021      	beq.n	8003544 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f86d 	bl	80025e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d032      	beq.n	8003576 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d12b      	bne.n	8003576 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11f      	bne.n	8003576 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
 8003542:	e018      	b.n	8003576 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d111      	bne.n	8003576 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff fbf2 	bl	8002d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800357c:	e00e      	b.n	800359c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fbfc 	bl	8002d88 <HAL_ADC_ErrorCallback>
}
 8003590:	e004      	b.n	800359c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fbde 	bl	8002d74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff fbce 	bl	8002d88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a70      	ldr	r2, [pc, #448]	; (80037c4 <ADC_ConfigureBoostMode+0x1d0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <ADC_ConfigureBoostMode+0x1c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <ADC_ConfigureBoostMode+0x1d4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d109      	bne.n	8003624 <ADC_ConfigureBoostMode+0x30>
 8003610:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <ADC_ConfigureBoostMode+0x1d8>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e008      	b.n	8003636 <ADC_ConfigureBoostMode+0x42>
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <ADC_ConfigureBoostMode+0x1dc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01a      	beq.n	8003670 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800363a:	f003 fe1d 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 800363e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003648:	d006      	beq.n	8003658 <ADC_ConfigureBoostMode+0x64>
 800364a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800364e:	d00b      	beq.n	8003668 <ADC_ConfigureBoostMode+0x74>
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d000      	beq.n	8003658 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003656:	e05d      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	60fb      	str	r3, [r7, #12]
        break;
 8003666:	e055      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	60fb      	str	r3, [r7, #12]
        break;
 800366e:	e051      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003670:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003674:	f004 fd3a 	bl	80080ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003678:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003682:	d02a      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
 8003684:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003688:	d813      	bhi.n	80036b2 <ADC_ConfigureBoostMode+0xbe>
 800368a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800368e:	d024      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
 8003690:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003694:	d806      	bhi.n	80036a4 <ADC_ConfigureBoostMode+0xb0>
 8003696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800369a:	d01e      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
 800369c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036a0:	d01b      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80036a2:	e037      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a8:	d017      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
 80036aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036ae:	d014      	beq.n	80036da <ADC_ConfigureBoostMode+0xe6>
        break;
 80036b0:	e030      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036b6:	d021      	beq.n	80036fc <ADC_ConfigureBoostMode+0x108>
 80036b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036bc:	d806      	bhi.n	80036cc <ADC_ConfigureBoostMode+0xd8>
 80036be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036c2:	d013      	beq.n	80036ec <ADC_ConfigureBoostMode+0xf8>
 80036c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c8:	d014      	beq.n	80036f4 <ADC_ConfigureBoostMode+0x100>
        break;
 80036ca:	e023      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80036d0:	d018      	beq.n	8003704 <ADC_ConfigureBoostMode+0x110>
 80036d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036d6:	d019      	beq.n	800370c <ADC_ConfigureBoostMode+0x118>
        break;
 80036d8:	e01c      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0c9b      	lsrs	r3, r3, #18
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	60fb      	str	r3, [r7, #12]
        break;
 80036ea:	e013      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
      break;
 80036f2:	e00f      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	e00b      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	60fb      	str	r3, [r7, #12]
        break;
 8003702:	e007      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	09db      	lsrs	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
        break;
 800370a:	e003      	b.n	8003714 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	60fb      	str	r3, [r7, #12]
        break;
 8003712:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003714:	f7fe fec2 	bl	800249c <HAL_GetREVID>
 8003718:	4602      	mov	r2, r0
 800371a:	f241 0303 	movw	r3, #4099	; 0x1003
 800371e:	429a      	cmp	r2, r3
 8003720:	d815      	bhi.n	800374e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <ADC_ConfigureBoostMode+0x1e0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d908      	bls.n	800373c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800373a:	e03e      	b.n	80037ba <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	e035      	b.n	80037ba <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <ADC_ConfigureBoostMode+0x1e4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d808      	bhi.n	800376e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	e025      	b.n	80037ba <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <ADC_ConfigureBoostMode+0x1e8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d80a      	bhi.n	800378c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	e016      	b.n	80037ba <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <ADC_ConfigureBoostMode+0x1ec>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d80a      	bhi.n	80037aa <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	e007      	b.n	80037ba <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80037b8:	609a      	str	r2, [r3, #8]
}
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022100 	.word	0x40022100
 80037cc:	40022300 	.word	0x40022300
 80037d0:	58026300 	.word	0x58026300
 80037d4:	01312d00 	.word	0x01312d00
 80037d8:	005f5e10 	.word	0x005f5e10
 80037dc:	00bebc20 	.word	0x00bebc20
 80037e0:	017d7840 	.word	0x017d7840

080037e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <__NVIC_SetPriorityGrouping+0x40>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 800380e:	4313      	orrs	r3, r2
 8003810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <__NVIC_SetPriorityGrouping+0x40>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00
 8003828:	05fa0000 	.word	0x05fa0000

0800382c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <__NVIC_GetPriorityGrouping+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0307 	and.w	r3, r3, #7
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0b      	blt.n	8003872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	4907      	ldr	r1, [pc, #28]	; (8003880 <__NVIC_EnableIRQ+0x38>)
 8003862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2001      	movs	r0, #1
 800386a:	fa00 f202 	lsl.w	r2, r0, r2
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	; (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003950:	d301      	bcc.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <SysTick_Config+0x40>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	210f      	movs	r1, #15
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f7ff ff8e 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <SysTick_Config+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <SysTick_Config+0x40>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff29 	bl	80037e4 <__NVIC_SetPriorityGrouping>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a8:	f7ff ff40 	bl	800382c <__NVIC_GetPriorityGrouping>
 80039ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff90 	bl	80038d8 <NVIC_EncodePriority>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff5f 	bl	8003884 <__NVIC_SetPriority>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff33 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ffa4 	bl	8003940 <SysTick_Config>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7fe fd18 	bl	8002440 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e316      	b.n	800404a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a66      	ldr	r2, [pc, #408]	; (8003bbc <HAL_DMA_Init+0x1b8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d04a      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a65      	ldr	r2, [pc, #404]	; (8003bc0 <HAL_DMA_Init+0x1bc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d045      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a63      	ldr	r2, [pc, #396]	; (8003bc4 <HAL_DMA_Init+0x1c0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d040      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a62      	ldr	r2, [pc, #392]	; (8003bc8 <HAL_DMA_Init+0x1c4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d03b      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_DMA_Init+0x1c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d036      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5f      	ldr	r2, [pc, #380]	; (8003bd0 <HAL_DMA_Init+0x1cc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d031      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_DMA_Init+0x1d0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02c      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <HAL_DMA_Init+0x1d4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d027      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5a      	ldr	r2, [pc, #360]	; (8003bdc <HAL_DMA_Init+0x1d8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a59      	ldr	r2, [pc, #356]	; (8003be0 <HAL_DMA_Init+0x1dc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d01d      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a57      	ldr	r2, [pc, #348]	; (8003be4 <HAL_DMA_Init+0x1e0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a56      	ldr	r2, [pc, #344]	; (8003be8 <HAL_DMA_Init+0x1e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a54      	ldr	r2, [pc, #336]	; (8003bec <HAL_DMA_Init+0x1e8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a53      	ldr	r2, [pc, #332]	; (8003bf0 <HAL_DMA_Init+0x1ec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a51      	ldr	r2, [pc, #324]	; (8003bf4 <HAL_DMA_Init+0x1f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_DMA_Init+0xb8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_DMA_Init+0x1f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <HAL_DMA_Init+0xbc>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_DMA_Init+0xbe>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 813b 	beq.w	8003d3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a37      	ldr	r2, [pc, #220]	; (8003bbc <HAL_DMA_Init+0x1b8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <HAL_DMA_Init+0x1bc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <HAL_DMA_Init+0x1c0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	; (8003bc8 <HAL_DMA_Init+0x1c4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_DMA_Init+0x1c8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	; (8003bd0 <HAL_DMA_Init+0x1cc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_DMA_Init+0x1d0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_DMA_Init+0x1d4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_Init+0x1d8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_DMA_Init+0x1dc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_Init+0x1e0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <HAL_DMA_Init+0x1e4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_DMA_Init+0x1e8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_DMA_Init+0x1ec>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_DMA_Init+0x1f0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_Init+0x174>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_DMA_Init+0x1f4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <HAL_DMA_Init+0x186>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_DMA_Init+0x196>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b9a:	e02f      	b.n	8003bfc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9c:	f7fe fc50 	bl	8002440 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d928      	bls.n	8003bfc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e246      	b.n	800404a <HAL_DMA_Init+0x646>
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1c8      	bne.n	8003b9c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4b83      	ldr	r3, [pc, #524]	; (8003e24 <HAL_DMA_Init+0x420>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d107      	bne.n	8003c60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c60:	4b71      	ldr	r3, [pc, #452]	; (8003e28 <HAL_DMA_Init+0x424>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b71      	ldr	r3, [pc, #452]	; (8003e2c <HAL_DMA_Init+0x428>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6c:	d328      	bcc.n	8003cc0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b28      	cmp	r3, #40	; 0x28
 8003c74:	d903      	bls.n	8003c7e <HAL_DMA_Init+0x27a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c7c:	d917      	bls.n	8003cae <HAL_DMA_Init+0x2aa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b3e      	cmp	r3, #62	; 0x3e
 8003c84:	d903      	bls.n	8003c8e <HAL_DMA_Init+0x28a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b42      	cmp	r3, #66	; 0x42
 8003c8c:	d90f      	bls.n	8003cae <HAL_DMA_Init+0x2aa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b46      	cmp	r3, #70	; 0x46
 8003c94:	d903      	bls.n	8003c9e <HAL_DMA_Init+0x29a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b48      	cmp	r3, #72	; 0x48
 8003c9c:	d907      	bls.n	8003cae <HAL_DMA_Init+0x2aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ca4:	d905      	bls.n	8003cb2 <HAL_DMA_Init+0x2ae>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b52      	cmp	r3, #82	; 0x52
 8003cac:	d801      	bhi.n	8003cb2 <HAL_DMA_Init+0x2ae>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_DMA_Init+0x2b0>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d117      	bne.n	8003d1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f002 f813 	bl	8005d28 <DMA_CheckFifoParam>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e197      	b.n	800404a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 ff4e 	bl	8005bc4 <DMA_CalcBaseAndBitshift>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	223f      	movs	r2, #63	; 0x3f
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e0cd      	b.n	8003eda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	; (8003e30 <HAL_DMA_Init+0x42c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a39      	ldr	r2, [pc, #228]	; (8003e34 <HAL_DMA_Init+0x430>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <HAL_DMA_Init+0x434>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a36      	ldr	r2, [pc, #216]	; (8003e3c <HAL_DMA_Init+0x438>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a35      	ldr	r2, [pc, #212]	; (8003e40 <HAL_DMA_Init+0x43c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a33      	ldr	r2, [pc, #204]	; (8003e44 <HAL_DMA_Init+0x440>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a32      	ldr	r2, [pc, #200]	; (8003e48 <HAL_DMA_Init+0x444>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_Init+0x38a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a30      	ldr	r2, [pc, #192]	; (8003e4c <HAL_DMA_Init+0x448>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_Init+0x38e>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_DMA_Init+0x390>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8097 	beq.w	8003ec8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <HAL_DMA_Init+0x42c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d021      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <HAL_DMA_Init+0x430>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01c      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_DMA_Init+0x434>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d017      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_DMA_Init+0x438>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d012      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_DMA_Init+0x43c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00d      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_DMA_Init+0x440>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d008      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_DMA_Init+0x444>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA_Init+0x3e4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_DMA_Init+0x448>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_DMA_Init+0x44c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d020      	beq.n	8003e54 <HAL_DMA_Init+0x450>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d102      	bne.n	8003e20 <HAL_DMA_Init+0x41c>
 8003e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e1e:	e01a      	b.n	8003e56 <HAL_DMA_Init+0x452>
 8003e20:	2300      	movs	r3, #0
 8003e22:	e018      	b.n	8003e56 <HAL_DMA_Init+0x452>
 8003e24:	fe10803f 	.word	0xfe10803f
 8003e28:	5c001000 	.word	0x5c001000
 8003e2c:	ffff0000 	.word	0xffff0000
 8003e30:	58025408 	.word	0x58025408
 8003e34:	5802541c 	.word	0x5802541c
 8003e38:	58025430 	.word	0x58025430
 8003e3c:	58025444 	.word	0x58025444
 8003e40:	58025458 	.word	0x58025458
 8003e44:	5802546c 	.word	0x5802546c
 8003e48:	58025480 	.word	0x58025480
 8003e4c:	58025494 	.word	0x58025494
 8003e50:	fffe000f 	.word	0xfffe000f
 8003e54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68d2      	ldr	r2, [r2, #12]
 8003e5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b6e      	ldr	r3, [pc, #440]	; (8004054 <HAL_DMA_Init+0x650>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_DMA_Init+0x654>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 fe89 	bl	8005bc4 <DMA_CalcBaseAndBitshift>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e008      	b.n	8003eda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0b7      	b.n	800404a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5f      	ldr	r2, [pc, #380]	; (800405c <HAL_DMA_Init+0x658>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d072      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5d      	ldr	r2, [pc, #372]	; (8004060 <HAL_DMA_Init+0x65c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d06d      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <HAL_DMA_Init+0x660>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d068      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_DMA_Init+0x664>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d063      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a59      	ldr	r2, [pc, #356]	; (800406c <HAL_DMA_Init+0x668>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d05e      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a57      	ldr	r2, [pc, #348]	; (8004070 <HAL_DMA_Init+0x66c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d059      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a56      	ldr	r2, [pc, #344]	; (8004074 <HAL_DMA_Init+0x670>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d054      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a54      	ldr	r2, [pc, #336]	; (8004078 <HAL_DMA_Init+0x674>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d04f      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a53      	ldr	r2, [pc, #332]	; (800407c <HAL_DMA_Init+0x678>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <HAL_DMA_Init+0x67c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a50      	ldr	r2, [pc, #320]	; (8004084 <HAL_DMA_Init+0x680>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <HAL_DMA_Init+0x684>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a4d      	ldr	r2, [pc, #308]	; (800408c <HAL_DMA_Init+0x688>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4b      	ldr	r2, [pc, #300]	; (8004090 <HAL_DMA_Init+0x68c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <HAL_DMA_Init+0x690>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_DMA_Init+0x694>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a47      	ldr	r2, [pc, #284]	; (800409c <HAL_DMA_Init+0x698>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a45      	ldr	r2, [pc, #276]	; (80040a0 <HAL_DMA_Init+0x69c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a44      	ldr	r2, [pc, #272]	; (80040a4 <HAL_DMA_Init+0x6a0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a42      	ldr	r2, [pc, #264]	; (80040a8 <HAL_DMA_Init+0x6a4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a41      	ldr	r2, [pc, #260]	; (80040ac <HAL_DMA_Init+0x6a8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3f      	ldr	r2, [pc, #252]	; (80040b0 <HAL_DMA_Init+0x6ac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3e      	ldr	r2, [pc, #248]	; (80040b4 <HAL_DMA_Init+0x6b0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Init+0x5c6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <HAL_DMA_Init+0x6b4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_Init+0x5ca>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_DMA_Init+0x5cc>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d032      	beq.n	800403a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 ff23 	bl	8005e20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d102      	bne.n	8003fe8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ffc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_DMA_Init+0x624>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d80c      	bhi.n	8004028 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 ffa0 	bl	8005f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	e008      	b.n	800403a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	a7fdabf8 	.word	0xa7fdabf8
 8004058:	cccccccd 	.word	0xcccccccd
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	58025430 	.word	0x58025430
 80040a8:	58025444 	.word	0x58025444
 80040ac:	58025458 	.word	0x58025458
 80040b0:	5802546c 	.word	0x5802546c
 80040b4:	58025480 	.word	0x58025480
 80040b8:	58025494 	.word	0x58025494

080040bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e226      	b.n	8004526 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_DMA_Start_IT+0x2a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e21f      	b.n	8004526 <HAL_DMA_Start_IT+0x46a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 820a 	bne.w	8004510 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a68      	ldr	r2, [pc, #416]	; (80042b0 <HAL_DMA_Start_IT+0x1f4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d04a      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_DMA_Start_IT+0x1f8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d045      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <HAL_DMA_Start_IT+0x1fc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d040      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a63      	ldr	r2, [pc, #396]	; (80042bc <HAL_DMA_Start_IT+0x200>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d03b      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a62      	ldr	r2, [pc, #392]	; (80042c0 <HAL_DMA_Start_IT+0x204>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d036      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a60      	ldr	r2, [pc, #384]	; (80042c4 <HAL_DMA_Start_IT+0x208>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d031      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5f      	ldr	r2, [pc, #380]	; (80042c8 <HAL_DMA_Start_IT+0x20c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d02c      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <HAL_DMA_Start_IT+0x210>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d027      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_DMA_Start_IT+0x214>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d022      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a5a      	ldr	r2, [pc, #360]	; (80042d4 <HAL_DMA_Start_IT+0x218>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01d      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_DMA_Start_IT+0x21c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d018      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a57      	ldr	r2, [pc, #348]	; (80042dc <HAL_DMA_Start_IT+0x220>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_DMA_Start_IT+0x224>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a54      	ldr	r2, [pc, #336]	; (80042e4 <HAL_DMA_Start_IT+0x228>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a53      	ldr	r2, [pc, #332]	; (80042e8 <HAL_DMA_Start_IT+0x22c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_DMA_Start_IT+0xee>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_DMA_Start_IT+0x230>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d108      	bne.n	80041bc <HAL_DMA_Start_IT+0x100>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e007      	b.n	80041cc <HAL_DMA_Start_IT+0x110>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f001 fb4a 	bl	800586c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a34      	ldr	r2, [pc, #208]	; (80042b0 <HAL_DMA_Start_IT+0x1f4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d04a      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <HAL_DMA_Start_IT+0x1f8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d045      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <HAL_DMA_Start_IT+0x1fc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d040      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a30      	ldr	r2, [pc, #192]	; (80042bc <HAL_DMA_Start_IT+0x200>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d03b      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <HAL_DMA_Start_IT+0x204>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d036      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_DMA_Start_IT+0x208>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d031      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_DMA_Start_IT+0x20c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02c      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <HAL_DMA_Start_IT+0x210>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d027      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_DMA_Start_IT+0x214>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_DMA_Start_IT+0x218>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01d      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <HAL_DMA_Start_IT+0x21c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <HAL_DMA_Start_IT+0x220>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_DMA_Start_IT+0x224>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <HAL_DMA_Start_IT+0x228>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <HAL_DMA_Start_IT+0x22c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_DMA_Start_IT+0x1bc>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <HAL_DMA_Start_IT+0x230>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <HAL_DMA_Start_IT+0x1c0>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_DMA_Start_IT+0x1c2>
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d036      	beq.n	80042f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 021e 	bic.w	r2, r3, #30
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0216 	orr.w	r2, r2, #22
 8004294:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03e      	beq.n	800431c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0208 	orr.w	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e035      	b.n	800431c <HAL_DMA_Start_IT+0x260>
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 020e 	bic.w	r2, r3, #14
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 020a 	orr.w	r2, r2, #10
 8004302:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0204 	orr.w	r2, r2, #4
 800431a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a83      	ldr	r2, [pc, #524]	; (8004530 <HAL_DMA_Start_IT+0x474>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d072      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a82      	ldr	r2, [pc, #520]	; (8004534 <HAL_DMA_Start_IT+0x478>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d06d      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a80      	ldr	r2, [pc, #512]	; (8004538 <HAL_DMA_Start_IT+0x47c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d068      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7f      	ldr	r2, [pc, #508]	; (800453c <HAL_DMA_Start_IT+0x480>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d063      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7d      	ldr	r2, [pc, #500]	; (8004540 <HAL_DMA_Start_IT+0x484>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d05e      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <HAL_DMA_Start_IT+0x488>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d059      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7a      	ldr	r2, [pc, #488]	; (8004548 <HAL_DMA_Start_IT+0x48c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d054      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a79      	ldr	r2, [pc, #484]	; (800454c <HAL_DMA_Start_IT+0x490>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04f      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a77      	ldr	r2, [pc, #476]	; (8004550 <HAL_DMA_Start_IT+0x494>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d04a      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a76      	ldr	r2, [pc, #472]	; (8004554 <HAL_DMA_Start_IT+0x498>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d045      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a74      	ldr	r2, [pc, #464]	; (8004558 <HAL_DMA_Start_IT+0x49c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d040      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a73      	ldr	r2, [pc, #460]	; (800455c <HAL_DMA_Start_IT+0x4a0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d03b      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a71      	ldr	r2, [pc, #452]	; (8004560 <HAL_DMA_Start_IT+0x4a4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d036      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a70      	ldr	r2, [pc, #448]	; (8004564 <HAL_DMA_Start_IT+0x4a8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d031      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_DMA_Start_IT+0x4ac>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02c      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_DMA_Start_IT+0x4b0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d027      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	; (8004570 <HAL_DMA_Start_IT+0x4b4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <HAL_DMA_Start_IT+0x4b8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d01d      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a68      	ldr	r2, [pc, #416]	; (8004578 <HAL_DMA_Start_IT+0x4bc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a67      	ldr	r2, [pc, #412]	; (800457c <HAL_DMA_Start_IT+0x4c0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	; (8004580 <HAL_DMA_Start_IT+0x4c4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a64      	ldr	r2, [pc, #400]	; (8004584 <HAL_DMA_Start_IT+0x4c8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a62      	ldr	r2, [pc, #392]	; (8004588 <HAL_DMA_Start_IT+0x4cc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_DMA_Start_IT+0x350>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_DMA_Start_IT+0x4d0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_DMA_Start_IT+0x354>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_DMA_Start_IT+0x356>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004432:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a37      	ldr	r2, [pc, #220]	; (8004530 <HAL_DMA_Start_IT+0x474>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a36      	ldr	r2, [pc, #216]	; (8004534 <HAL_DMA_Start_IT+0x478>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a34      	ldr	r2, [pc, #208]	; (8004538 <HAL_DMA_Start_IT+0x47c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a33      	ldr	r2, [pc, #204]	; (800453c <HAL_DMA_Start_IT+0x480>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a31      	ldr	r2, [pc, #196]	; (8004540 <HAL_DMA_Start_IT+0x484>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a30      	ldr	r2, [pc, #192]	; (8004544 <HAL_DMA_Start_IT+0x488>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2e      	ldr	r2, [pc, #184]	; (8004548 <HAL_DMA_Start_IT+0x48c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2d      	ldr	r2, [pc, #180]	; (800454c <HAL_DMA_Start_IT+0x490>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <HAL_DMA_Start_IT+0x494>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <HAL_DMA_Start_IT+0x498>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_DMA_Start_IT+0x49c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <HAL_DMA_Start_IT+0x4a0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_DMA_Start_IT+0x4a4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a24      	ldr	r2, [pc, #144]	; (8004564 <HAL_DMA_Start_IT+0x4a8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <HAL_DMA_Start_IT+0x4ac>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_Start_IT+0x430>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a21      	ldr	r2, [pc, #132]	; (800456c <HAL_DMA_Start_IT+0x4b0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <HAL_DMA_Start_IT+0x442>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e012      	b.n	8004524 <HAL_DMA_Start_IT+0x468>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e009      	b.n	8004524 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004524:	7dfb      	ldrb	r3, [r7, #23]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40020010 	.word	0x40020010
 8004534:	40020028 	.word	0x40020028
 8004538:	40020040 	.word	0x40020040
 800453c:	40020058 	.word	0x40020058
 8004540:	40020070 	.word	0x40020070
 8004544:	40020088 	.word	0x40020088
 8004548:	400200a0 	.word	0x400200a0
 800454c:	400200b8 	.word	0x400200b8
 8004550:	40020410 	.word	0x40020410
 8004554:	40020428 	.word	0x40020428
 8004558:	40020440 	.word	0x40020440
 800455c:	40020458 	.word	0x40020458
 8004560:	40020470 	.word	0x40020470
 8004564:	40020488 	.word	0x40020488
 8004568:	400204a0 	.word	0x400204a0
 800456c:	400204b8 	.word	0x400204b8
 8004570:	58025408 	.word	0x58025408
 8004574:	5802541c 	.word	0x5802541c
 8004578:	58025430 	.word	0x58025430
 800457c:	58025444 	.word	0x58025444
 8004580:	58025458 	.word	0x58025458
 8004584:	5802546c 	.word	0x5802546c
 8004588:	58025480 	.word	0x58025480
 800458c:	58025494 	.word	0x58025494

08004590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e205      	b.n	80049ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d004      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e1fa      	b.n	80049ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8c      	ldr	r2, [pc, #560]	; (80047f0 <HAL_DMA_Abort_IT+0x260>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d04a      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a8b      	ldr	r2, [pc, #556]	; (80047f4 <HAL_DMA_Abort_IT+0x264>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d045      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a89      	ldr	r2, [pc, #548]	; (80047f8 <HAL_DMA_Abort_IT+0x268>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d040      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a88      	ldr	r2, [pc, #544]	; (80047fc <HAL_DMA_Abort_IT+0x26c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d03b      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a86      	ldr	r2, [pc, #536]	; (8004800 <HAL_DMA_Abort_IT+0x270>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d036      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a85      	ldr	r2, [pc, #532]	; (8004804 <HAL_DMA_Abort_IT+0x274>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d031      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a83      	ldr	r2, [pc, #524]	; (8004808 <HAL_DMA_Abort_IT+0x278>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d02c      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a82      	ldr	r2, [pc, #520]	; (800480c <HAL_DMA_Abort_IT+0x27c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d027      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a80      	ldr	r2, [pc, #512]	; (8004810 <HAL_DMA_Abort_IT+0x280>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7f      	ldr	r2, [pc, #508]	; (8004814 <HAL_DMA_Abort_IT+0x284>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01d      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7d      	ldr	r2, [pc, #500]	; (8004818 <HAL_DMA_Abort_IT+0x288>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7c      	ldr	r2, [pc, #496]	; (800481c <HAL_DMA_Abort_IT+0x28c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7a      	ldr	r2, [pc, #488]	; (8004820 <HAL_DMA_Abort_IT+0x290>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a79      	ldr	r2, [pc, #484]	; (8004824 <HAL_DMA_Abort_IT+0x294>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a77      	ldr	r2, [pc, #476]	; (8004828 <HAL_DMA_Abort_IT+0x298>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_DMA_Abort_IT+0xc8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a76      	ldr	r2, [pc, #472]	; (800482c <HAL_DMA_Abort_IT+0x29c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_DMA_Abort_IT+0xcc>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_DMA_Abort_IT+0xce>
 800465c:	2300      	movs	r3, #0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d065      	beq.n	800472e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a60      	ldr	r2, [pc, #384]	; (80047f0 <HAL_DMA_Abort_IT+0x260>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d04a      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_DMA_Abort_IT+0x264>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d045      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5d      	ldr	r2, [pc, #372]	; (80047f8 <HAL_DMA_Abort_IT+0x268>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d040      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5b      	ldr	r2, [pc, #364]	; (80047fc <HAL_DMA_Abort_IT+0x26c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d03b      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5a      	ldr	r2, [pc, #360]	; (8004800 <HAL_DMA_Abort_IT+0x270>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d036      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_DMA_Abort_IT+0x274>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d031      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a57      	ldr	r2, [pc, #348]	; (8004808 <HAL_DMA_Abort_IT+0x278>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d02c      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a55      	ldr	r2, [pc, #340]	; (800480c <HAL_DMA_Abort_IT+0x27c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d027      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a54      	ldr	r2, [pc, #336]	; (8004810 <HAL_DMA_Abort_IT+0x280>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_DMA_Abort_IT+0x284>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01d      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a51      	ldr	r2, [pc, #324]	; (8004818 <HAL_DMA_Abort_IT+0x288>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d018      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a4f      	ldr	r2, [pc, #316]	; (800481c <HAL_DMA_Abort_IT+0x28c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <HAL_DMA_Abort_IT+0x290>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <HAL_DMA_Abort_IT+0x294>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4b      	ldr	r2, [pc, #300]	; (8004828 <HAL_DMA_Abort_IT+0x298>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_DMA_Abort_IT+0x17a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a49      	ldr	r2, [pc, #292]	; (800482c <HAL_DMA_Abort_IT+0x29c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d108      	bne.n	800471c <HAL_DMA_Abort_IT+0x18c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e147      	b.n	80049ac <HAL_DMA_Abort_IT+0x41c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e13e      	b.n	80049ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 020e 	bic.w	r2, r2, #14
 800473c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2b      	ldr	r2, [pc, #172]	; (80047f0 <HAL_DMA_Abort_IT+0x260>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04a      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <HAL_DMA_Abort_IT+0x264>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d045      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <HAL_DMA_Abort_IT+0x268>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a26      	ldr	r2, [pc, #152]	; (80047fc <HAL_DMA_Abort_IT+0x26c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a25      	ldr	r2, [pc, #148]	; (8004800 <HAL_DMA_Abort_IT+0x270>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d036      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a23      	ldr	r2, [pc, #140]	; (8004804 <HAL_DMA_Abort_IT+0x274>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <HAL_DMA_Abort_IT+0x278>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d02c      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <HAL_DMA_Abort_IT+0x27c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d027      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <HAL_DMA_Abort_IT+0x280>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_DMA_Abort_IT+0x284>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_DMA_Abort_IT+0x288>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_DMA_Abort_IT+0x28c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_DMA_Abort_IT+0x290>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_DMA_Abort_IT+0x294>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_DMA_Abort_IT+0x298>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_Abort_IT+0x24e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a14      	ldr	r2, [pc, #80]	; (800482c <HAL_DMA_Abort_IT+0x29c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d128      	bne.n	8004830 <HAL_DMA_Abort_IT+0x2a0>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e027      	b.n	8004840 <HAL_DMA_Abort_IT+0x2b0>
 80047f0:	40020010 	.word	0x40020010
 80047f4:	40020028 	.word	0x40020028
 80047f8:	40020040 	.word	0x40020040
 80047fc:	40020058 	.word	0x40020058
 8004800:	40020070 	.word	0x40020070
 8004804:	40020088 	.word	0x40020088
 8004808:	400200a0 	.word	0x400200a0
 800480c:	400200b8 	.word	0x400200b8
 8004810:	40020410 	.word	0x40020410
 8004814:	40020428 	.word	0x40020428
 8004818:	40020440 	.word	0x40020440
 800481c:	40020458 	.word	0x40020458
 8004820:	40020470 	.word	0x40020470
 8004824:	40020488 	.word	0x40020488
 8004828:	400204a0 	.word	0x400204a0
 800482c:	400204b8 	.word	0x400204b8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a5c      	ldr	r2, [pc, #368]	; (80049b8 <HAL_DMA_Abort_IT+0x428>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d072      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <HAL_DMA_Abort_IT+0x42c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d06d      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a59      	ldr	r2, [pc, #356]	; (80049c0 <HAL_DMA_Abort_IT+0x430>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d068      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_DMA_Abort_IT+0x434>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d063      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <HAL_DMA_Abort_IT+0x438>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d05e      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_DMA_Abort_IT+0x43c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d059      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <HAL_DMA_Abort_IT+0x440>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d054      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_DMA_Abort_IT+0x444>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d04f      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a50      	ldr	r2, [pc, #320]	; (80049d8 <HAL_DMA_Abort_IT+0x448>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04a      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4f      	ldr	r2, [pc, #316]	; (80049dc <HAL_DMA_Abort_IT+0x44c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d045      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_DMA_Abort_IT+0x450>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d040      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a4c      	ldr	r2, [pc, #304]	; (80049e4 <HAL_DMA_Abort_IT+0x454>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d03b      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a4a      	ldr	r2, [pc, #296]	; (80049e8 <HAL_DMA_Abort_IT+0x458>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d036      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a49      	ldr	r2, [pc, #292]	; (80049ec <HAL_DMA_Abort_IT+0x45c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d031      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a47      	ldr	r2, [pc, #284]	; (80049f0 <HAL_DMA_Abort_IT+0x460>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02c      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <HAL_DMA_Abort_IT+0x464>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d027      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a44      	ldr	r2, [pc, #272]	; (80049f8 <HAL_DMA_Abort_IT+0x468>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a43      	ldr	r2, [pc, #268]	; (80049fc <HAL_DMA_Abort_IT+0x46c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a41      	ldr	r2, [pc, #260]	; (8004a00 <HAL_DMA_Abort_IT+0x470>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <HAL_DMA_Abort_IT+0x474>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3e      	ldr	r2, [pc, #248]	; (8004a08 <HAL_DMA_Abort_IT+0x478>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a3d      	ldr	r2, [pc, #244]	; (8004a0c <HAL_DMA_Abort_IT+0x47c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_DMA_Abort_IT+0x480>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_DMA_Abort_IT+0x3a0>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3a      	ldr	r2, [pc, #232]	; (8004a14 <HAL_DMA_Abort_IT+0x484>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Abort_IT+0x3a4>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_DMA_Abort_IT+0x3a6>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d028      	beq.n	800498c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004948:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2201      	movs	r2, #1
 800495a:	409a      	lsls	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004968:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800498a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40020010 	.word	0x40020010
 80049bc:	40020028 	.word	0x40020028
 80049c0:	40020040 	.word	0x40020040
 80049c4:	40020058 	.word	0x40020058
 80049c8:	40020070 	.word	0x40020070
 80049cc:	40020088 	.word	0x40020088
 80049d0:	400200a0 	.word	0x400200a0
 80049d4:	400200b8 	.word	0x400200b8
 80049d8:	40020410 	.word	0x40020410
 80049dc:	40020428 	.word	0x40020428
 80049e0:	40020440 	.word	0x40020440
 80049e4:	40020458 	.word	0x40020458
 80049e8:	40020470 	.word	0x40020470
 80049ec:	40020488 	.word	0x40020488
 80049f0:	400204a0 	.word	0x400204a0
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	58025408 	.word	0x58025408
 80049fc:	5802541c 	.word	0x5802541c
 8004a00:	58025430 	.word	0x58025430
 8004a04:	58025444 	.word	0x58025444
 8004a08:	58025458 	.word	0x58025458
 8004a0c:	5802546c 	.word	0x5802546c
 8004a10:	58025480 	.word	0x58025480
 8004a14:	58025494 	.word	0x58025494

08004a18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a24:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_DMA_IRQHandler+0x1ac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a67      	ldr	r2, [pc, #412]	; (8004bc8 <HAL_DMA_IRQHandler+0x1b0>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5f      	ldr	r2, [pc, #380]	; (8004bcc <HAL_DMA_IRQHandler+0x1b4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5d      	ldr	r2, [pc, #372]	; (8004bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5c      	ldr	r2, [pc, #368]	; (8004bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5a      	ldr	r2, [pc, #360]	; (8004bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a59      	ldr	r2, [pc, #356]	; (8004bdc <HAL_DMA_IRQHandler+0x1c4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <HAL_DMA_IRQHandler+0x1c8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a56      	ldr	r2, [pc, #344]	; (8004be4 <HAL_DMA_IRQHandler+0x1cc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a54      	ldr	r2, [pc, #336]	; (8004be8 <HAL_DMA_IRQHandler+0x1d0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a53      	ldr	r2, [pc, #332]	; (8004bec <HAL_DMA_IRQHandler+0x1d4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a51      	ldr	r2, [pc, #324]	; (8004bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a50      	ldr	r2, [pc, #320]	; (8004bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a4e      	ldr	r2, [pc, #312]	; (8004bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4d      	ldr	r2, [pc, #308]	; (8004bfc <HAL_DMA_IRQHandler+0x1e4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <HAL_DMA_IRQHandler+0x1e8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4a      	ldr	r2, [pc, #296]	; (8004c04 <HAL_DMA_IRQHandler+0x1ec>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_IRQHandler+0xd2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a48      	ldr	r2, [pc, #288]	; (8004c08 <HAL_DMA_IRQHandler+0x1f0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_DMA_IRQHandler+0xd6>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_DMA_IRQHandler+0xd8>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 842b 	beq.w	800534c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2208      	movs	r2, #8
 8004b00:	409a      	lsls	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a2 	beq.w	8004c50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2e      	ldr	r2, [pc, #184]	; (8004bcc <HAL_DMA_IRQHandler+0x1b4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2d      	ldr	r2, [pc, #180]	; (8004bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d045      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d040      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d03b      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <HAL_DMA_IRQHandler+0x1c4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d036      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <HAL_DMA_IRQHandler+0x1c8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <HAL_DMA_IRQHandler+0x1cc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <HAL_DMA_IRQHandler+0x1d0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_DMA_IRQHandler+0x1d4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_DMA_IRQHandler+0x1e4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_DMA_IRQHandler+0x1e8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <HAL_DMA_IRQHandler+0x1ec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_IRQHandler+0x194>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_DMA_IRQHandler+0x1f0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d12f      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x1f4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e02e      	b.n	8004c20 <HAL_DMA_IRQHandler+0x208>
 8004bc2:	bf00      	nop
 8004bc4:	24000040 	.word	0x24000040
 8004bc8:	1b4e81b5 	.word	0x1b4e81b5
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0204 	bic.w	r2, r2, #4
 8004c32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06e      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a69      	ldr	r2, [pc, #420]	; (8004e10 <HAL_DMA_IRQHandler+0x3f8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04a      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_DMA_IRQHandler+0x3fc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d045      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a66      	ldr	r2, [pc, #408]	; (8004e18 <HAL_DMA_IRQHandler+0x400>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d040      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a64      	ldr	r2, [pc, #400]	; (8004e1c <HAL_DMA_IRQHandler+0x404>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d03b      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a63      	ldr	r2, [pc, #396]	; (8004e20 <HAL_DMA_IRQHandler+0x408>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d036      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a61      	ldr	r2, [pc, #388]	; (8004e24 <HAL_DMA_IRQHandler+0x40c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d031      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a60      	ldr	r2, [pc, #384]	; (8004e28 <HAL_DMA_IRQHandler+0x410>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02c      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <HAL_DMA_IRQHandler+0x414>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d027      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a5d      	ldr	r2, [pc, #372]	; (8004e30 <HAL_DMA_IRQHandler+0x418>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5b      	ldr	r2, [pc, #364]	; (8004e34 <HAL_DMA_IRQHandler+0x41c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5a      	ldr	r2, [pc, #360]	; (8004e38 <HAL_DMA_IRQHandler+0x420>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_DMA_IRQHandler+0x424>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a57      	ldr	r2, [pc, #348]	; (8004e40 <HAL_DMA_IRQHandler+0x428>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a55      	ldr	r2, [pc, #340]	; (8004e44 <HAL_DMA_IRQHandler+0x42c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <HAL_DMA_IRQHandler+0x430>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x2ee>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a52      	ldr	r2, [pc, #328]	; (8004e4c <HAL_DMA_IRQHandler+0x434>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10a      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x304>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e003      	b.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2201      	movs	r2, #1
 8004d32:	409a      	lsls	r2, r3
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f043 0202 	orr.w	r2, r3, #2
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 808f 	beq.w	8004e78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <HAL_DMA_IRQHandler+0x3f8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04a      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <HAL_DMA_IRQHandler+0x3fc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d045      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <HAL_DMA_IRQHandler+0x400>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d040      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <HAL_DMA_IRQHandler+0x404>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d03b      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <HAL_DMA_IRQHandler+0x408>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <HAL_DMA_IRQHandler+0x40c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <HAL_DMA_IRQHandler+0x410>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d02c      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <HAL_DMA_IRQHandler+0x414>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d027      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_DMA_IRQHandler+0x418>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <HAL_DMA_IRQHandler+0x41c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_DMA_IRQHandler+0x420>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_DMA_IRQHandler+0x424>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_DMA_IRQHandler+0x428>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_DMA_IRQHandler+0x42c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <HAL_DMA_IRQHandler+0x430>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x3e2>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_DMA_IRQHandler+0x434>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d12a      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x438>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e023      	b.n	8004e58 <HAL_DMA_IRQHandler+0x440>
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2204      	movs	r2, #4
 8004e66:	409a      	lsls	r2, r3
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f043 0204 	orr.w	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2210      	movs	r2, #16
 8004e82:	409a      	lsls	r2, r3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80a6 	beq.w	8004fda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a85      	ldr	r2, [pc, #532]	; (80050a8 <HAL_DMA_IRQHandler+0x690>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d04a      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a83      	ldr	r2, [pc, #524]	; (80050ac <HAL_DMA_IRQHandler+0x694>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d045      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a82      	ldr	r2, [pc, #520]	; (80050b0 <HAL_DMA_IRQHandler+0x698>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d040      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a80      	ldr	r2, [pc, #512]	; (80050b4 <HAL_DMA_IRQHandler+0x69c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d03b      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a7f      	ldr	r2, [pc, #508]	; (80050b8 <HAL_DMA_IRQHandler+0x6a0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d036      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7d      	ldr	r2, [pc, #500]	; (80050bc <HAL_DMA_IRQHandler+0x6a4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d031      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d02c      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a7a      	ldr	r2, [pc, #488]	; (80050c4 <HAL_DMA_IRQHandler+0x6ac>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d027      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a79      	ldr	r2, [pc, #484]	; (80050c8 <HAL_DMA_IRQHandler+0x6b0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_DMA_IRQHandler+0x6b4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01d      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a76      	ldr	r2, [pc, #472]	; (80050d0 <HAL_DMA_IRQHandler+0x6b8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a74      	ldr	r2, [pc, #464]	; (80050d4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a73      	ldr	r2, [pc, #460]	; (80050d8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a71      	ldr	r2, [pc, #452]	; (80050dc <HAL_DMA_IRQHandler+0x6c4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a70      	ldr	r2, [pc, #448]	; (80050e0 <HAL_DMA_IRQHandler+0x6c8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x516>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a6e      	ldr	r2, [pc, #440]	; (80050e4 <HAL_DMA_IRQHandler+0x6cc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10a      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x52c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e009      	b.n	8004f58 <HAL_DMA_IRQHandler+0x540>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d03e      	beq.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2210      	movs	r2, #16
 8004f66:	409a      	lsls	r2, r3
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d024      	beq.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e01f      	b.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01b      	beq.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
 8004faa:	e016      	b.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0208 	bic.w	r2, r2, #8
 8004fc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8110 	beq.w	8005210 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <HAL_DMA_IRQHandler+0x690>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d04a      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_DMA_IRQHandler+0x694>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d045      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <HAL_DMA_IRQHandler+0x698>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d040      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <HAL_DMA_IRQHandler+0x69c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d03b      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <HAL_DMA_IRQHandler+0x6a0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d036      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_DMA_IRQHandler+0x6a4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d031      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <HAL_DMA_IRQHandler+0x6a8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02c      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_DMA_IRQHandler+0x6ac>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d027      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <HAL_DMA_IRQHandler+0x6b0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d022      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_DMA_IRQHandler+0x6b4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d01d      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_DMA_IRQHandler+0x6b8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_DMA_IRQHandler+0x6bc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_DMA_IRQHandler+0x6c0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_DMA_IRQHandler+0x6c4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_DMA_IRQHandler+0x6c8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_DMA_IRQHandler+0x678>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_DMA_IRQHandler+0x6cc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d12b      	bne.n	80050e8 <HAL_DMA_IRQHandler+0x6d0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e02a      	b.n	80050fc <HAL_DMA_IRQHandler+0x6e4>
 80050a6:	bf00      	nop
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020058 	.word	0x40020058
 80050b8:	40020070 	.word	0x40020070
 80050bc:	40020088 	.word	0x40020088
 80050c0:	400200a0 	.word	0x400200a0
 80050c4:	400200b8 	.word	0x400200b8
 80050c8:	40020410 	.word	0x40020410
 80050cc:	40020428 	.word	0x40020428
 80050d0:	40020440 	.word	0x40020440
 80050d4:	40020458 	.word	0x40020458
 80050d8:	40020470 	.word	0x40020470
 80050dc:	40020488 	.word	0x40020488
 80050e0:	400204a0 	.word	0x400204a0
 80050e4:	400204b8 	.word	0x400204b8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8087 	beq.w	8005210 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2220      	movs	r2, #32
 800510c:	409a      	lsls	r2, r3
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b04      	cmp	r3, #4
 800511c:	d139      	bne.n	8005192 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0216 	bic.w	r2, r2, #22
 800512c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800513c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_DMA_IRQHandler+0x736>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0208 	bic.w	r2, r2, #8
 800515c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	223f      	movs	r2, #63	; 0x3f
 8005168:	409a      	lsls	r2, r3
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 834a 	beq.w	800581c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
          }
          return;
 8005190:	e344      	b.n	800581c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d018      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d108      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d02c      	beq.n	8005210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
 80051be:	e027      	b.n	8005210 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d023      	beq.n	8005210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
 80051d0:	e01e      	b.n	8005210 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10f      	bne.n	8005200 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0210 	bic.w	r2, r2, #16
 80051ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8306 	beq.w	8005826 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8088 	beq.w	8005338 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7a      	ldr	r2, [pc, #488]	; (8005420 <HAL_DMA_IRQHandler+0xa08>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d04a      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a79      	ldr	r2, [pc, #484]	; (8005424 <HAL_DMA_IRQHandler+0xa0c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d045      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a77      	ldr	r2, [pc, #476]	; (8005428 <HAL_DMA_IRQHandler+0xa10>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d040      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a76      	ldr	r2, [pc, #472]	; (800542c <HAL_DMA_IRQHandler+0xa14>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d03b      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a74      	ldr	r2, [pc, #464]	; (8005430 <HAL_DMA_IRQHandler+0xa18>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d036      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a73      	ldr	r2, [pc, #460]	; (8005434 <HAL_DMA_IRQHandler+0xa1c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d031      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a71      	ldr	r2, [pc, #452]	; (8005438 <HAL_DMA_IRQHandler+0xa20>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d02c      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a70      	ldr	r2, [pc, #448]	; (800543c <HAL_DMA_IRQHandler+0xa24>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d027      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <HAL_DMA_IRQHandler+0xa28>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6d      	ldr	r2, [pc, #436]	; (8005444 <HAL_DMA_IRQHandler+0xa2c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d01d      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6b      	ldr	r2, [pc, #428]	; (8005448 <HAL_DMA_IRQHandler+0xa30>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6a      	ldr	r2, [pc, #424]	; (800544c <HAL_DMA_IRQHandler+0xa34>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a68      	ldr	r2, [pc, #416]	; (8005450 <HAL_DMA_IRQHandler+0xa38>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a67      	ldr	r2, [pc, #412]	; (8005454 <HAL_DMA_IRQHandler+0xa3c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	; (8005458 <HAL_DMA_IRQHandler+0xa40>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x8b8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a64      	ldr	r2, [pc, #400]	; (800545c <HAL_DMA_IRQHandler+0xa44>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <HAL_DMA_IRQHandler+0x8ca>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e007      	b.n	80052f2 <HAL_DMA_IRQHandler+0x8da>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d307      	bcc.n	800530e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f2      	bne.n	80052f2 <HAL_DMA_IRQHandler+0x8da>
 800530c:	e000      	b.n	8005310 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800530e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2203      	movs	r2, #3
 800532a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800532e:	e003      	b.n	8005338 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8272 	beq.w	8005826 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
 800534a:	e26c      	b.n	8005826 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a43      	ldr	r2, [pc, #268]	; (8005460 <HAL_DMA_IRQHandler+0xa48>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d022      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a42      	ldr	r2, [pc, #264]	; (8005464 <HAL_DMA_IRQHandler+0xa4c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d01d      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a40      	ldr	r2, [pc, #256]	; (8005468 <HAL_DMA_IRQHandler+0xa50>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3f      	ldr	r2, [pc, #252]	; (800546c <HAL_DMA_IRQHandler+0xa54>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3d      	ldr	r2, [pc, #244]	; (8005470 <HAL_DMA_IRQHandler+0xa58>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <HAL_DMA_IRQHandler+0xa5c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3a      	ldr	r2, [pc, #232]	; (8005478 <HAL_DMA_IRQHandler+0xa60>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_DMA_IRQHandler+0x984>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a39      	ldr	r2, [pc, #228]	; (800547c <HAL_DMA_IRQHandler+0xa64>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d101      	bne.n	80053a0 <HAL_DMA_IRQHandler+0x988>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_DMA_IRQHandler+0x98a>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 823f 	beq.w	8005826 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2204      	movs	r2, #4
 80053ba:	409a      	lsls	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80cd 	beq.w	8005560 <HAL_DMA_IRQHandler+0xb48>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80c7 	beq.w	8005560 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2204      	movs	r2, #4
 80053dc:	409a      	lsls	r2, r3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d049      	beq.n	8005480 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 8210 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005408:	e20a      	b.n	8005820 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8206 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800541c:	e200      	b.n	8005820 <HAL_DMA_IRQHandler+0xe08>
 800541e:	bf00      	nop
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
 8005460:	58025408 	.word	0x58025408
 8005464:	5802541c 	.word	0x5802541c
 8005468:	58025430 	.word	0x58025430
 800546c:	58025444 	.word	0x58025444
 8005470:	58025458 	.word	0x58025458
 8005474:	5802546c 	.word	0x5802546c
 8005478:	58025480 	.word	0x58025480
 800547c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d160      	bne.n	800554c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a8c      	ldr	r2, [pc, #560]	; (80056c0 <HAL_DMA_IRQHandler+0xca8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04a      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a8a      	ldr	r2, [pc, #552]	; (80056c4 <HAL_DMA_IRQHandler+0xcac>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a89      	ldr	r2, [pc, #548]	; (80056c8 <HAL_DMA_IRQHandler+0xcb0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a87      	ldr	r2, [pc, #540]	; (80056cc <HAL_DMA_IRQHandler+0xcb4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03b      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a86      	ldr	r2, [pc, #536]	; (80056d0 <HAL_DMA_IRQHandler+0xcb8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d036      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a84      	ldr	r2, [pc, #528]	; (80056d4 <HAL_DMA_IRQHandler+0xcbc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a83      	ldr	r2, [pc, #524]	; (80056d8 <HAL_DMA_IRQHandler+0xcc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a81      	ldr	r2, [pc, #516]	; (80056dc <HAL_DMA_IRQHandler+0xcc4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d027      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a80      	ldr	r2, [pc, #512]	; (80056e0 <HAL_DMA_IRQHandler+0xcc8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a7e      	ldr	r2, [pc, #504]	; (80056e4 <HAL_DMA_IRQHandler+0xccc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a7d      	ldr	r2, [pc, #500]	; (80056e8 <HAL_DMA_IRQHandler+0xcd0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a7b      	ldr	r2, [pc, #492]	; (80056ec <HAL_DMA_IRQHandler+0xcd4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a7a      	ldr	r2, [pc, #488]	; (80056f0 <HAL_DMA_IRQHandler+0xcd8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a78      	ldr	r2, [pc, #480]	; (80056f4 <HAL_DMA_IRQHandler+0xcdc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a77      	ldr	r2, [pc, #476]	; (80056f8 <HAL_DMA_IRQHandler+0xce0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_DMA_IRQHandler+0xb12>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a75      	ldr	r2, [pc, #468]	; (80056fc <HAL_DMA_IRQHandler+0xce4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <HAL_DMA_IRQHandler+0xb24>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0208 	bic.w	r2, r2, #8
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e007      	b.n	800554c <HAL_DMA_IRQHandler+0xb34>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0204 	bic.w	r2, r2, #4
 800554a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8165 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800555e:	e15f      	b.n	8005820 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2202      	movs	r2, #2
 800556a:	409a      	lsls	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80c5 	beq.w	8005700 <HAL_DMA_IRQHandler+0xce8>
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80bf 	beq.w	8005700 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2202      	movs	r2, #2
 800558c:	409a      	lsls	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d018      	beq.n	80055ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 813a 	beq.w	8005824 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b8:	e134      	b.n	8005824 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8130 	beq.w	8005824 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055cc:	e12a      	b.n	8005824 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d168      	bne.n	80056aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <HAL_DMA_IRQHandler+0xca8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d04a      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a37      	ldr	r2, [pc, #220]	; (80056c4 <HAL_DMA_IRQHandler+0xcac>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d045      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_DMA_IRQHandler+0xcb0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d040      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a34      	ldr	r2, [pc, #208]	; (80056cc <HAL_DMA_IRQHandler+0xcb4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d03b      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a32      	ldr	r2, [pc, #200]	; (80056d0 <HAL_DMA_IRQHandler+0xcb8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d036      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a31      	ldr	r2, [pc, #196]	; (80056d4 <HAL_DMA_IRQHandler+0xcbc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d031      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2f      	ldr	r2, [pc, #188]	; (80056d8 <HAL_DMA_IRQHandler+0xcc0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02c      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2e      	ldr	r2, [pc, #184]	; (80056dc <HAL_DMA_IRQHandler+0xcc4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d027      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <HAL_DMA_IRQHandler+0xcc8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HAL_DMA_IRQHandler+0xccc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <HAL_DMA_IRQHandler+0xcd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <HAL_DMA_IRQHandler+0xcd4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <HAL_DMA_IRQHandler+0xcd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <HAL_DMA_IRQHandler+0xcdc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <HAL_DMA_IRQHandler+0xce0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_DMA_IRQHandler+0xc60>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a22      	ldr	r2, [pc, #136]	; (80056fc <HAL_DMA_IRQHandler+0xce4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <HAL_DMA_IRQHandler+0xc72>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0214 	bic.w	r2, r2, #20
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e007      	b.n	800569a <HAL_DMA_IRQHandler+0xc82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 020a 	bic.w	r2, r2, #10
 8005698:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80b8 	beq.w	8005824 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056bc:	e0b2      	b.n	8005824 <HAL_DMA_IRQHandler+0xe0c>
 80056be:	bf00      	nop
 80056c0:	40020010 	.word	0x40020010
 80056c4:	40020028 	.word	0x40020028
 80056c8:	40020040 	.word	0x40020040
 80056cc:	40020058 	.word	0x40020058
 80056d0:	40020070 	.word	0x40020070
 80056d4:	40020088 	.word	0x40020088
 80056d8:	400200a0 	.word	0x400200a0
 80056dc:	400200b8 	.word	0x400200b8
 80056e0:	40020410 	.word	0x40020410
 80056e4:	40020428 	.word	0x40020428
 80056e8:	40020440 	.word	0x40020440
 80056ec:	40020458 	.word	0x40020458
 80056f0:	40020470 	.word	0x40020470
 80056f4:	40020488 	.word	0x40020488
 80056f8:	400204a0 	.word	0x400204a0
 80056fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2208      	movs	r2, #8
 800570a:	409a      	lsls	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8088 	beq.w	8005826 <HAL_DMA_IRQHandler+0xe0e>
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8082 	beq.w	8005826 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a41      	ldr	r2, [pc, #260]	; (800582c <HAL_DMA_IRQHandler+0xe14>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d04a      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a3f      	ldr	r2, [pc, #252]	; (8005830 <HAL_DMA_IRQHandler+0xe18>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d045      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a3e      	ldr	r2, [pc, #248]	; (8005834 <HAL_DMA_IRQHandler+0xe1c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d040      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a3c      	ldr	r2, [pc, #240]	; (8005838 <HAL_DMA_IRQHandler+0xe20>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d03b      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a3b      	ldr	r2, [pc, #236]	; (800583c <HAL_DMA_IRQHandler+0xe24>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d036      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a39      	ldr	r2, [pc, #228]	; (8005840 <HAL_DMA_IRQHandler+0xe28>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a38      	ldr	r2, [pc, #224]	; (8005844 <HAL_DMA_IRQHandler+0xe2c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d02c      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a36      	ldr	r2, [pc, #216]	; (8005848 <HAL_DMA_IRQHandler+0xe30>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d027      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a35      	ldr	r2, [pc, #212]	; (800584c <HAL_DMA_IRQHandler+0xe34>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d022      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a33      	ldr	r2, [pc, #204]	; (8005850 <HAL_DMA_IRQHandler+0xe38>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a32      	ldr	r2, [pc, #200]	; (8005854 <HAL_DMA_IRQHandler+0xe3c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a30      	ldr	r2, [pc, #192]	; (8005858 <HAL_DMA_IRQHandler+0xe40>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2f      	ldr	r2, [pc, #188]	; (800585c <HAL_DMA_IRQHandler+0xe44>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <HAL_DMA_IRQHandler+0xe48>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <HAL_DMA_IRQHandler+0xe4c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_DMA_IRQHandler+0xdaa>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2a      	ldr	r2, [pc, #168]	; (8005868 <HAL_DMA_IRQHandler+0xe50>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d108      	bne.n	80057d4 <HAL_DMA_IRQHandler+0xdbc>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 021c 	bic.w	r2, r2, #28
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e007      	b.n	80057e4 <HAL_DMA_IRQHandler+0xdcc>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 020e 	bic.w	r2, r2, #14
 80057e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
 800581a:	e004      	b.n	8005826 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800581c:	bf00      	nop
 800581e:	e002      	b.n	8005826 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005824:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005826:	3728      	adds	r7, #40	; 0x28
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40020010 	.word	0x40020010
 8005830:	40020028 	.word	0x40020028
 8005834:	40020040 	.word	0x40020040
 8005838:	40020058 	.word	0x40020058
 800583c:	40020070 	.word	0x40020070
 8005840:	40020088 	.word	0x40020088
 8005844:	400200a0 	.word	0x400200a0
 8005848:	400200b8 	.word	0x400200b8
 800584c:	40020410 	.word	0x40020410
 8005850:	40020428 	.word	0x40020428
 8005854:	40020440 	.word	0x40020440
 8005858:	40020458 	.word	0x40020458
 800585c:	40020470 	.word	0x40020470
 8005860:	40020488 	.word	0x40020488
 8005864:	400204a0 	.word	0x400204a0
 8005868:	400204b8 	.word	0x400204b8

0800586c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a84      	ldr	r2, [pc, #528]	; (8005a9c <DMA_SetConfig+0x230>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d072      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a82      	ldr	r2, [pc, #520]	; (8005aa0 <DMA_SetConfig+0x234>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d06d      	beq.n	8005976 <DMA_SetConfig+0x10a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a81      	ldr	r2, [pc, #516]	; (8005aa4 <DMA_SetConfig+0x238>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d068      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7f      	ldr	r2, [pc, #508]	; (8005aa8 <DMA_SetConfig+0x23c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d063      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7e      	ldr	r2, [pc, #504]	; (8005aac <DMA_SetConfig+0x240>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d05e      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7c      	ldr	r2, [pc, #496]	; (8005ab0 <DMA_SetConfig+0x244>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d059      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a7b      	ldr	r2, [pc, #492]	; (8005ab4 <DMA_SetConfig+0x248>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d054      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a79      	ldr	r2, [pc, #484]	; (8005ab8 <DMA_SetConfig+0x24c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d04f      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a78      	ldr	r2, [pc, #480]	; (8005abc <DMA_SetConfig+0x250>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d04a      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a76      	ldr	r2, [pc, #472]	; (8005ac0 <DMA_SetConfig+0x254>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d045      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a75      	ldr	r2, [pc, #468]	; (8005ac4 <DMA_SetConfig+0x258>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d040      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a73      	ldr	r2, [pc, #460]	; (8005ac8 <DMA_SetConfig+0x25c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d03b      	beq.n	8005976 <DMA_SetConfig+0x10a>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a72      	ldr	r2, [pc, #456]	; (8005acc <DMA_SetConfig+0x260>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d036      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a70      	ldr	r2, [pc, #448]	; (8005ad0 <DMA_SetConfig+0x264>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d031      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6f      	ldr	r2, [pc, #444]	; (8005ad4 <DMA_SetConfig+0x268>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d02c      	beq.n	8005976 <DMA_SetConfig+0x10a>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a6d      	ldr	r2, [pc, #436]	; (8005ad8 <DMA_SetConfig+0x26c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d027      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a6c      	ldr	r2, [pc, #432]	; (8005adc <DMA_SetConfig+0x270>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6a      	ldr	r2, [pc, #424]	; (8005ae0 <DMA_SetConfig+0x274>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <DMA_SetConfig+0x10a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a69      	ldr	r2, [pc, #420]	; (8005ae4 <DMA_SetConfig+0x278>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a67      	ldr	r2, [pc, #412]	; (8005ae8 <DMA_SetConfig+0x27c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <DMA_SetConfig+0x10a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a66      	ldr	r2, [pc, #408]	; (8005aec <DMA_SetConfig+0x280>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a64      	ldr	r2, [pc, #400]	; (8005af0 <DMA_SetConfig+0x284>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <DMA_SetConfig+0x10a>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a63      	ldr	r2, [pc, #396]	; (8005af4 <DMA_SetConfig+0x288>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <DMA_SetConfig+0x10a>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a61      	ldr	r2, [pc, #388]	; (8005af8 <DMA_SetConfig+0x28c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <DMA_SetConfig+0x10e>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <DMA_SetConfig+0x110>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005988:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800599a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <DMA_SetConfig+0x230>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d04a      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3d      	ldr	r2, [pc, #244]	; (8005aa0 <DMA_SetConfig+0x234>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d045      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3b      	ldr	r2, [pc, #236]	; (8005aa4 <DMA_SetConfig+0x238>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d040      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3a      	ldr	r2, [pc, #232]	; (8005aa8 <DMA_SetConfig+0x23c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d03b      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a38      	ldr	r2, [pc, #224]	; (8005aac <DMA_SetConfig+0x240>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d036      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a37      	ldr	r2, [pc, #220]	; (8005ab0 <DMA_SetConfig+0x244>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d031      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a35      	ldr	r2, [pc, #212]	; (8005ab4 <DMA_SetConfig+0x248>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d02c      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <DMA_SetConfig+0x24c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d027      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a32      	ldr	r2, [pc, #200]	; (8005abc <DMA_SetConfig+0x250>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a31      	ldr	r2, [pc, #196]	; (8005ac0 <DMA_SetConfig+0x254>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2f      	ldr	r2, [pc, #188]	; (8005ac4 <DMA_SetConfig+0x258>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2e      	ldr	r2, [pc, #184]	; (8005ac8 <DMA_SetConfig+0x25c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <DMA_SetConfig+0x260>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <DMA_SetConfig+0x264>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <DMA_SetConfig+0x268>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <DMA_SetConfig+0x1d0>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a28      	ldr	r2, [pc, #160]	; (8005ad8 <DMA_SetConfig+0x26c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <DMA_SetConfig+0x1d4>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <DMA_SetConfig+0x1d6>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d05a      	beq.n	8005afc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	223f      	movs	r2, #63	; 0x3f
 8005a50:	409a      	lsls	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d108      	bne.n	8005a88 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a86:	e087      	b.n	8005b98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
}
 8005a98:	e07e      	b.n	8005b98 <DMA_SetConfig+0x32c>
 8005a9a:	bf00      	nop
 8005a9c:	40020010 	.word	0x40020010
 8005aa0:	40020028 	.word	0x40020028
 8005aa4:	40020040 	.word	0x40020040
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020070 	.word	0x40020070
 8005ab0:	40020088 	.word	0x40020088
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	400200b8 	.word	0x400200b8
 8005abc:	40020410 	.word	0x40020410
 8005ac0:	40020428 	.word	0x40020428
 8005ac4:	40020440 	.word	0x40020440
 8005ac8:	40020458 	.word	0x40020458
 8005acc:	40020470 	.word	0x40020470
 8005ad0:	40020488 	.word	0x40020488
 8005ad4:	400204a0 	.word	0x400204a0
 8005ad8:	400204b8 	.word	0x400204b8
 8005adc:	58025408 	.word	0x58025408
 8005ae0:	5802541c 	.word	0x5802541c
 8005ae4:	58025430 	.word	0x58025430
 8005ae8:	58025444 	.word	0x58025444
 8005aec:	58025458 	.word	0x58025458
 8005af0:	5802546c 	.word	0x5802546c
 8005af4:	58025480 	.word	0x58025480
 8005af8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <DMA_SetConfig+0x338>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d022      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <DMA_SetConfig+0x33c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01d      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a25      	ldr	r2, [pc, #148]	; (8005bac <DMA_SetConfig+0x340>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a24      	ldr	r2, [pc, #144]	; (8005bb0 <DMA_SetConfig+0x344>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <DMA_SetConfig+0x348>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <DMA_SetConfig+0x34c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	; (8005bbc <DMA_SetConfig+0x350>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <DMA_SetConfig+0x2e0>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <DMA_SetConfig+0x354>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <DMA_SetConfig+0x2e4>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <DMA_SetConfig+0x2e6>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d108      	bne.n	8005b88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	60da      	str	r2, [r3, #12]
}
 8005b86:	e007      	b.n	8005b98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494

08005bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a42      	ldr	r2, [pc, #264]	; (8005cdc <DMA_CalcBaseAndBitshift+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d04a      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a41      	ldr	r2, [pc, #260]	; (8005ce0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d045      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <DMA_CalcBaseAndBitshift+0x120>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d040      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a3e      	ldr	r2, [pc, #248]	; (8005ce8 <DMA_CalcBaseAndBitshift+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d03b      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a3c      	ldr	r2, [pc, #240]	; (8005cec <DMA_CalcBaseAndBitshift+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d036      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a3b      	ldr	r2, [pc, #236]	; (8005cf0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d031      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a39      	ldr	r2, [pc, #228]	; (8005cf4 <DMA_CalcBaseAndBitshift+0x130>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d02c      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <DMA_CalcBaseAndBitshift+0x134>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d027      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <DMA_CalcBaseAndBitshift+0x138>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d01d      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <DMA_CalcBaseAndBitshift+0x140>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <DMA_CalcBaseAndBitshift+0x144>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <DMA_CalcBaseAndBitshift+0x148>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <DMA_CalcBaseAndBitshift+0x150>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <DMA_CalcBaseAndBitshift+0xa8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <DMA_CalcBaseAndBitshift+0x154>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d101      	bne.n	8005c70 <DMA_CalcBaseAndBitshift+0xac>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <DMA_CalcBaseAndBitshift+0xae>
 8005c70:	2300      	movs	r3, #0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d024      	beq.n	8005cc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	3b10      	subs	r3, #16
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <DMA_CalcBaseAndBitshift+0x158>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <DMA_CalcBaseAndBitshift+0x15c>)
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d908      	bls.n	8005cb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <DMA_CalcBaseAndBitshift+0x160>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	659a      	str	r2, [r3, #88]	; 0x58
 8005cae:	e00d      	b.n	8005ccc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <DMA_CalcBaseAndBitshift+0x160>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cbe:	e005      	b.n	8005ccc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	aaaaaaab 	.word	0xaaaaaaab
 8005d20:	0800dfb0 	.word	0x0800dfb0
 8005d24:	fffffc00 	.word	0xfffffc00

08005d28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d120      	bne.n	8005d7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d858      	bhi.n	8005df6 <DMA_CheckFifoParam+0xce>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <DMA_CheckFifoParam+0x24>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d6f 	.word	0x08005d6f
 8005d54:	08005d5d 	.word	0x08005d5d
 8005d58:	08005df7 	.word	0x08005df7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d048      	beq.n	8005dfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d6c:	e045      	b.n	8005dfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d76:	d142      	bne.n	8005dfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d7c:	e03f      	b.n	8005dfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d86:	d123      	bne.n	8005dd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d838      	bhi.n	8005e02 <DMA_CheckFifoParam+0xda>
 8005d90:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <DMA_CheckFifoParam+0x70>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005daf 	.word	0x08005daf
 8005da0:	08005da9 	.word	0x08005da9
 8005da4:	08005dc1 	.word	0x08005dc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
        break;
 8005dac:	e030      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d025      	beq.n	8005e06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dbe:	e022      	b.n	8005e06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dc8:	d11f      	bne.n	8005e0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dce:	e01c      	b.n	8005e0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d902      	bls.n	8005dde <DMA_CheckFifoParam+0xb6>
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d003      	beq.n	8005de4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ddc:	e018      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
        break;
 8005de2:	e015      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00e      	beq.n	8005e0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
    break;
 8005df4:	e00b      	b.n	8005e0e <DMA_CheckFifoParam+0xe6>
        break;
 8005df6:	bf00      	nop
 8005df8:	e00a      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        break;
 8005dfa:	bf00      	nop
 8005dfc:	e008      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        break;
 8005dfe:	bf00      	nop
 8005e00:	e006      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        break;
 8005e02:	bf00      	nop
 8005e04:	e004      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <DMA_CheckFifoParam+0xe8>
    break;
 8005e0e:	bf00      	nop
    }
  }

  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a36      	ldr	r2, [pc, #216]	; (8005f18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a33      	ldr	r2, [pc, #204]	; (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a30      	ldr	r2, [pc, #192]	; (8005f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2f      	ldr	r2, [pc, #188]	; (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01a      	beq.n	8005ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	3b08      	subs	r3, #8
 8005e90:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a24      	ldr	r2, [pc, #144]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005eac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ebc:	e024      	b.n	8005f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3b10      	subs	r3, #16
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d806      	bhi.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d902      	bls.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ef8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2201      	movs	r2, #1
 8005f02:	409a      	lsls	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	58025408 	.word	0x58025408
 8005f18:	5802541c 	.word	0x5802541c
 8005f1c:	58025430 	.word	0x58025430
 8005f20:	58025444 	.word	0x58025444
 8005f24:	58025458 	.word	0x58025458
 8005f28:	5802546c 	.word	0x5802546c
 8005f2c:	58025480 	.word	0x58025480
 8005f30:	58025494 	.word	0x58025494
 8005f34:	cccccccd 	.word	0xcccccccd
 8005f38:	16009600 	.word	0x16009600
 8005f3c:	58025880 	.word	0x58025880
 8005f40:	aaaaaaab 	.word	0xaaaaaaab
 8005f44:	400204b8 	.word	0x400204b8
 8005f48:	4002040f 	.word	0x4002040f
 8005f4c:	10008200 	.word	0x10008200
 8005f50:	40020880 	.word	0x40020880

08005f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04a      	beq.n	8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d847      	bhi.n	8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a25      	ldr	r2, [pc, #148]	; (800600c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a24      	ldr	r2, [pc, #144]	; (8006010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d01d      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a22      	ldr	r2, [pc, #136]	; (8006014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a21      	ldr	r2, [pc, #132]	; (8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	; (800601c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4b17      	ldr	r3, [pc, #92]	; (800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005fdc:	671a      	str	r2, [r3, #112]	; 0x70
 8005fde:	e009      	b.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a11      	ldr	r2, [pc, #68]	; (8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ff2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	58025408 	.word	0x58025408
 8006010:	5802541c 	.word	0x5802541c
 8006014:	58025430 	.word	0x58025430
 8006018:	58025444 	.word	0x58025444
 800601c:	58025458 	.word	0x58025458
 8006020:	5802546c 	.word	0x5802546c
 8006024:	58025480 	.word	0x58025480
 8006028:	58025494 	.word	0x58025494
 800602c:	1600963f 	.word	0x1600963f
 8006030:	58025940 	.word	0x58025940
 8006034:	1000823f 	.word	0x1000823f
 8006038:	40020940 	.word	0x40020940

0800603c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800604a:	4b89      	ldr	r3, [pc, #548]	; (8006270 <HAL_GPIO_Init+0x234>)
 800604c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800604e:	e194      	b.n	800637a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	2101      	movs	r1, #1
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8186 	beq.w	8006374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00b      	beq.n	8006088 <HAL_GPIO_Init+0x4c>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d007      	beq.n	8006088 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800607c:	2b11      	cmp	r3, #17
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b12      	cmp	r3, #18
 8006086:	d130      	bne.n	80060ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	2203      	movs	r2, #3
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060be:	2201      	movs	r2, #1
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0201 	and.w	r2, r3, #1
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	2203      	movs	r2, #3
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d003      	beq.n	800612a <HAL_GPIO_Init+0xee>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2b12      	cmp	r3, #18
 8006128:	d123      	bne.n	8006172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	08da      	lsrs	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3208      	adds	r2, #8
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	220f      	movs	r2, #15
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4313      	orrs	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	08da      	lsrs	r2, r3, #3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3208      	adds	r2, #8
 800616c:	69b9      	ldr	r1, [r7, #24]
 800616e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	2203      	movs	r2, #3
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4013      	ands	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0203 	and.w	r2, r3, #3
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80e0 	beq.w	8006374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b4:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <HAL_GPIO_Init+0x238>)
 80061b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ba:	4a2e      	ldr	r2, [pc, #184]	; (8006274 <HAL_GPIO_Init+0x238>)
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061c4:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_GPIO_Init+0x238>)
 80061c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061d2:	4a29      	ldr	r2, [pc, #164]	; (8006278 <HAL_GPIO_Init+0x23c>)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	089b      	lsrs	r3, r3, #2
 80061d8:	3302      	adds	r3, #2
 80061da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	220f      	movs	r2, #15
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_GPIO_Init+0x240>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d052      	beq.n	80062a4 <HAL_GPIO_Init+0x268>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_GPIO_Init+0x244>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d031      	beq.n	800626a <HAL_GPIO_Init+0x22e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_GPIO_Init+0x248>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d02b      	beq.n	8006266 <HAL_GPIO_Init+0x22a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_GPIO_Init+0x24c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d025      	beq.n	8006262 <HAL_GPIO_Init+0x226>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_GPIO_Init+0x250>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01f      	beq.n	800625e <HAL_GPIO_Init+0x222>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_GPIO_Init+0x254>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d019      	beq.n	800625a <HAL_GPIO_Init+0x21e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_GPIO_Init+0x258>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <HAL_GPIO_Init+0x21a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_GPIO_Init+0x25c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00d      	beq.n	8006252 <HAL_GPIO_Init+0x216>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_GPIO_Init+0x260>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <HAL_GPIO_Init+0x212>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <HAL_GPIO_Init+0x264>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_GPIO_Init+0x20e>
 8006246:	2309      	movs	r3, #9
 8006248:	e02d      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800624a:	230a      	movs	r3, #10
 800624c:	e02b      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800624e:	2308      	movs	r3, #8
 8006250:	e029      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 8006252:	2307      	movs	r3, #7
 8006254:	e027      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 8006256:	2306      	movs	r3, #6
 8006258:	e025      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800625a:	2305      	movs	r3, #5
 800625c:	e023      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800625e:	2304      	movs	r3, #4
 8006260:	e021      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 8006262:	2303      	movs	r3, #3
 8006264:	e01f      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 8006266:	2302      	movs	r3, #2
 8006268:	e01d      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800626a:	2301      	movs	r3, #1
 800626c:	e01b      	b.n	80062a6 <HAL_GPIO_Init+0x26a>
 800626e:	bf00      	nop
 8006270:	58000080 	.word	0x58000080
 8006274:	58024400 	.word	0x58024400
 8006278:	58000400 	.word	0x58000400
 800627c:	58020000 	.word	0x58020000
 8006280:	58020400 	.word	0x58020400
 8006284:	58020800 	.word	0x58020800
 8006288:	58020c00 	.word	0x58020c00
 800628c:	58021000 	.word	0x58021000
 8006290:	58021400 	.word	0x58021400
 8006294:	58021800 	.word	0x58021800
 8006298:	58021c00 	.word	0x58021c00
 800629c:	58022000 	.word	0x58022000
 80062a0:	58022400 	.word	0x58022400
 80062a4:	2300      	movs	r3, #0
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	f002 0203 	and.w	r2, r2, #3
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	4093      	lsls	r3, r2
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062b6:	4938      	ldr	r1, [pc, #224]	; (8006398 <HAL_GPIO_Init+0x35c>)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	3302      	adds	r3, #2
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	43db      	mvns	r3, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4013      	ands	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800633e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800636c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	f47f ae63 	bne.w	8006050 <HAL_GPIO_Init+0x14>
  }
}
 800638a:	bf00      	nop
 800638c:	3724      	adds	r7, #36	; 0x24
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	58000400 	.word	0x58000400

0800639c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
 80063a8:	4613      	mov	r3, r2
 80063aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063ac:	787b      	ldrb	r3, [r7, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063b8:	e003      	b.n	80063c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063ba:	887b      	ldrh	r3, [r7, #2]
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	619a      	str	r2, [r3, #24]
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	887b      	ldrh	r3, [r7, #2]
 80063e0:	401a      	ands	r2, r3
 80063e2:	887b      	ldrh	r3, [r7, #2]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d104      	bne.n	80063f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	041a      	lsls	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80063f0:	e002      	b.n	80063f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <HAL_PWREx_ConfigSupply+0x70>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b04      	cmp	r3, #4
 8006416:	d00a      	beq.n	800642e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <HAL_PWREx_ConfigSupply+0x70>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d001      	beq.n	800642a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e01f      	b.n	800646a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e01d      	b.n	800646a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <HAL_PWREx_ConfigSupply+0x70>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 0207 	bic.w	r2, r3, #7
 8006436:	490f      	ldr	r1, [pc, #60]	; (8006474 <HAL_PWREx_ConfigSupply+0x70>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4313      	orrs	r3, r2
 800643c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800643e:	f7fb ffff 	bl	8002440 <HAL_GetTick>
 8006442:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006444:	e009      	b.n	800645a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006446:	f7fb fffb 	bl	8002440 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006454:	d901      	bls.n	800645a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e007      	b.n	800646a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <HAL_PWREx_ConfigSupply+0x70>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006466:	d1ee      	bne.n	8006446 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	58024800 	.word	0x58024800

08006478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e3c4      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8087 	beq.w	80065a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006498:	4ba2      	ldr	r3, [pc, #648]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064a2:	4ba0      	ldr	r3, [pc, #640]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d007      	beq.n	80064be <HAL_RCC_OscConfig+0x46>
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b18      	cmp	r3, #24
 80064b2:	d110      	bne.n	80064d6 <HAL_RCC_OscConfig+0x5e>
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d10b      	bne.n	80064d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064be:	4b99      	ldr	r3, [pc, #612]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d06c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x12c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d168      	bne.n	80065a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e39e      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x76>
 80064e0:	4b90      	ldr	r3, [pc, #576]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a8f      	ldr	r2, [pc, #572]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e02e      	b.n	800654c <HAL_RCC_OscConfig+0xd4>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x98>
 80064f6:	4b8b      	ldr	r3, [pc, #556]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a8a      	ldr	r2, [pc, #552]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	4b88      	ldr	r3, [pc, #544]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a87      	ldr	r2, [pc, #540]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e01d      	b.n	800654c <HAL_RCC_OscConfig+0xd4>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0xbc>
 800651a:	4b82      	ldr	r3, [pc, #520]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a81      	ldr	r2, [pc, #516]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b7f      	ldr	r3, [pc, #508]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a7e      	ldr	r2, [pc, #504]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0xd4>
 8006534:	4b7b      	ldr	r3, [pc, #492]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a7a      	ldr	r2, [pc, #488]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b78      	ldr	r3, [pc, #480]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a77      	ldr	r2, [pc, #476]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fb ff74 	bl	8002440 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800655c:	f7fb ff70 	bl	8002440 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e352      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800656e:	4b6d      	ldr	r3, [pc, #436]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0xe4>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fb ff60 	bl	8002440 <HAL_GetTick>
 8006580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006584:	f7fb ff5c 	bl	8002440 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e33e      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006596:	4b63      	ldr	r3, [pc, #396]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x10c>
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8092 	beq.w	80066d8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065b4:	4b5b      	ldr	r3, [pc, #364]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065be:	4b59      	ldr	r3, [pc, #356]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_RCC_OscConfig+0x162>
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b18      	cmp	r3, #24
 80065ce:	d12d      	bne.n	800662c <HAL_RCC_OscConfig+0x1b4>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d128      	bne.n	800662c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065da:	4b52      	ldr	r3, [pc, #328]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_RCC_OscConfig+0x17a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e310      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f2:	f7fb ff53 	bl	800249c <HAL_GetREVID>
 80065f6:	4602      	mov	r2, r0
 80065f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d80a      	bhi.n	8006616 <HAL_RCC_OscConfig+0x19e>
 8006600:	4b48      	ldr	r3, [pc, #288]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	4945      	ldr	r1, [pc, #276]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006614:	e060      	b.n	80066d8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006616:	4b43      	ldr	r3, [pc, #268]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	061b      	lsls	r3, r3, #24
 8006624:	493f      	ldr	r1, [pc, #252]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006626:	4313      	orrs	r3, r2
 8006628:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800662a:	e055      	b.n	80066d8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d038      	beq.n	80066a6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006634:	4b3b      	ldr	r3, [pc, #236]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f023 0219 	bic.w	r2, r3, #25
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4938      	ldr	r1, [pc, #224]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fefb 	bl	8002440 <HAL_GetTick>
 800664a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664e:	f7fb fef7 	bl	8002440 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e2d9      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006660:	4b30      	ldr	r3, [pc, #192]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	f7fb ff16 	bl	800249c <HAL_GetREVID>
 8006670:	4602      	mov	r2, r0
 8006672:	f241 0303 	movw	r3, #4099	; 0x1003
 8006676:	429a      	cmp	r2, r3
 8006678:	d80a      	bhi.n	8006690 <HAL_RCC_OscConfig+0x218>
 800667a:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	031b      	lsls	r3, r3, #12
 8006688:	4926      	ldr	r1, [pc, #152]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800668a:	4313      	orrs	r3, r2
 800668c:	604b      	str	r3, [r1, #4]
 800668e:	e023      	b.n	80066d8 <HAL_RCC_OscConfig+0x260>
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	061b      	lsls	r3, r3, #24
 800669e:	4921      	ldr	r1, [pc, #132]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]
 80066a4:	e018      	b.n	80066d8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a6:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fb fec5 	bl	8002440 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066ba:	f7fb fec1 	bl	8002440 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e2a3      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066cc:	4b15      	ldr	r3, [pc, #84]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8091 	beq.w	8006808 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e6:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d007      	beq.n	800670c <HAL_RCC_OscConfig+0x294>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b18      	cmp	r3, #24
 8006700:	d12f      	bne.n	8006762 <HAL_RCC_OscConfig+0x2ea>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d12a      	bne.n	8006762 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_RCC_OscConfig+0x2ac>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_RCC_OscConfig+0x2b0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d003      	beq.n	8006728 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e277      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
 8006724:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006728:	f7fb feb8 	bl	800249c <HAL_GetREVID>
 800672c:	4602      	mov	r2, r0
 800672e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006732:	429a      	cmp	r2, r3
 8006734:	d80a      	bhi.n	800674c <HAL_RCC_OscConfig+0x2d4>
 8006736:	4ba2      	ldr	r3, [pc, #648]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	069b      	lsls	r3, r3, #26
 8006744:	499e      	ldr	r1, [pc, #632]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006746:	4313      	orrs	r3, r2
 8006748:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674a:	e05d      	b.n	8006808 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674c:	4b9c      	ldr	r3, [pc, #624]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	4999      	ldr	r1, [pc, #612]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800675c:	4313      	orrs	r3, r2
 800675e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006760:	e052      	b.n	8006808 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d035      	beq.n	80067d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800676a:	4b95      	ldr	r3, [pc, #596]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a94      	ldr	r2, [pc, #592]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fb fe63 	bl	8002440 <HAL_GetTick>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800677e:	f7fb fe5f 	bl	8002440 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e241      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006790:	4b8b      	ldr	r3, [pc, #556]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800679c:	f7fb fe7e 	bl	800249c <HAL_GetREVID>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d80a      	bhi.n	80067c0 <HAL_RCC_OscConfig+0x348>
 80067aa:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	069b      	lsls	r3, r3, #26
 80067b8:	4981      	ldr	r1, [pc, #516]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
 80067be:	e023      	b.n	8006808 <HAL_RCC_OscConfig+0x390>
 80067c0:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	061b      	lsls	r3, r3, #24
 80067ce:	497c      	ldr	r1, [pc, #496]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60cb      	str	r3, [r1, #12]
 80067d4:	e018      	b.n	8006808 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067d6:	4b7a      	ldr	r3, [pc, #488]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a79      	ldr	r2, [pc, #484]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fb fe2d 	bl	8002440 <HAL_GetTick>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067ea:	f7fb fe29 	bl	8002440 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e20b      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067fc:	4b70      	ldr	r3, [pc, #448]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f0      	bne.n	80067ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d036      	beq.n	8006882 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d019      	beq.n	8006850 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681c:	4b68      	ldr	r3, [pc, #416]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006820:	4a67      	ldr	r2, [pc, #412]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fb fe0a 	bl	8002440 <HAL_GetTick>
 800682c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006830:	f7fb fe06 	bl	8002440 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e1e8      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006842:	4b5f      	ldr	r3, [pc, #380]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCC_OscConfig+0x3b8>
 800684e:	e018      	b.n	8006882 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006850:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	4a5a      	ldr	r2, [pc, #360]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fb fdf0 	bl	8002440 <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006864:	f7fb fdec 	bl	8002440 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1ce      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006876:	4b52      	ldr	r3, [pc, #328]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d036      	beq.n	80068fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d019      	beq.n	80068ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a49      	ldr	r2, [pc, #292]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800689c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068a2:	f7fb fdcd 	bl	8002440 <HAL_GetTick>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068aa:	f7fb fdc9 	bl	8002440 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1ab      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068bc:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x432>
 80068c8:	e018      	b.n	80068fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ca:	4b3d      	ldr	r3, [pc, #244]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80068d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d6:	f7fb fdb3 	bl	8002440 <HAL_GetTick>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068de:	f7fb fdaf 	bl	8002440 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e191      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068f0:	4b33      	ldr	r3, [pc, #204]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8086 	beq.w	8006a16 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <HAL_RCC_OscConfig+0x54c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <HAL_RCC_OscConfig+0x54c>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fb fd93 	bl	8002440 <HAL_GetTick>
 800691a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fb fd8f 	bl	8002440 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b64      	cmp	r3, #100	; 0x64
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e171      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006930:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <HAL_RCC_OscConfig+0x54c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x4da>
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a1d      	ldr	r2, [pc, #116]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	e02d      	b.n	80069ae <HAL_RCC_OscConfig+0x536>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x4fc>
 800695a:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	e01c      	b.n	80069ae <HAL_RCC_OscConfig+0x536>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b05      	cmp	r3, #5
 800697a:	d10c      	bne.n	8006996 <HAL_RCC_OscConfig+0x51e>
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a0f      	ldr	r2, [pc, #60]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006982:	f043 0304 	orr.w	r3, r3, #4
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6713      	str	r3, [r2, #112]	; 0x70
 8006994:	e00b      	b.n	80069ae <HAL_RCC_OscConfig+0x536>
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a06      	ldr	r2, [pc, #24]	; (80069c0 <HAL_RCC_OscConfig+0x548>)
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01a      	beq.n	80069ec <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b6:	f7fb fd43 	bl	8002440 <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069bc:	e00f      	b.n	80069de <HAL_RCC_OscConfig+0x566>
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400
 80069c4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fb fd3a 	bl	8002440 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e11a      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069de:	4b8f      	ldr	r3, [pc, #572]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ee      	beq.n	80069c8 <HAL_RCC_OscConfig+0x550>
 80069ea:	e014      	b.n	8006a16 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fb fd28 	bl	8002440 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fb fd24 	bl	8002440 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e104      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a0a:	4b84      	ldr	r3, [pc, #528]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ee      	bne.n	80069f4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80f9 	beq.w	8006c12 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a20:	4b7e      	ldr	r3, [pc, #504]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a28:	2b18      	cmp	r3, #24
 8006a2a:	f000 80b4 	beq.w	8006b96 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	f040 8095 	bne.w	8006b62 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a38:	4b78      	ldr	r3, [pc, #480]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fb fcfc 	bl	8002440 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fb fcf8 	bl	8002440 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e0da      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	4b6f      	ldr	r3, [pc, #444]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a6a:	4b6c      	ldr	r3, [pc, #432]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a6e:	4b6c      	ldr	r3, [pc, #432]	; (8006c20 <HAL_RCC_OscConfig+0x7a8>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a7a:	0112      	lsls	r2, r2, #4
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	4967      	ldr	r1, [pc, #412]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	628b      	str	r3, [r1, #40]	; 0x28
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	3b01      	subs	r3, #1
 8006a94:	025b      	lsls	r3, r3, #9
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	3b01      	subs	r3, #1
 8006aae:	061b      	lsls	r3, r3, #24
 8006ab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ab4:	4959      	ldr	r1, [pc, #356]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006aba:	4b58      	ldr	r3, [pc, #352]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	4a57      	ldr	r2, [pc, #348]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ac6:	4b55      	ldr	r3, [pc, #340]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aca:	4b56      	ldr	r3, [pc, #344]	; (8006c24 <HAL_RCC_OscConfig+0x7ac>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ad2:	00d2      	lsls	r2, r2, #3
 8006ad4:	4951      	ldr	r1, [pc, #324]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ada:	4b50      	ldr	r3, [pc, #320]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f023 020c 	bic.w	r2, r3, #12
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	494d      	ldr	r1, [pc, #308]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aec:	4b4b      	ldr	r3, [pc, #300]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	f023 0202 	bic.w	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	4948      	ldr	r1, [pc, #288]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006afe:	4b47      	ldr	r3, [pc, #284]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	4a46      	ldr	r2, [pc, #280]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0a:	4b44      	ldr	r3, [pc, #272]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	4a43      	ldr	r2, [pc, #268]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b16:	4b41      	ldr	r3, [pc, #260]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	4a40      	ldr	r2, [pc, #256]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b22:	4b3e      	ldr	r3, [pc, #248]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a3d      	ldr	r2, [pc, #244]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b2e:	4b3b      	ldr	r3, [pc, #236]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3a:	f7fb fc81 	bl	8002440 <HAL_GetTick>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fb fc7d 	bl	8002440 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e05f      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b54:	4b31      	ldr	r3, [pc, #196]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x6ca>
 8006b60:	e057      	b.n	8006c12 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2d      	ldr	r2, [pc, #180]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fb fc67 	bl	8002440 <HAL_GetTick>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b76:	f7fb fc63 	bl	8002440 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e045      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b88:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x6fe>
 8006b94:	e03d      	b.n	8006c12 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b96:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b9c:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <HAL_RCC_OscConfig+0x7a4>)
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d031      	beq.n	8006c0e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f003 0203 	and.w	r2, r3, #3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d12a      	bne.n	8006c0e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d122      	bne.n	8006c0e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d11a      	bne.n	8006c0e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	0a5b      	lsrs	r3, r3, #9
 8006bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d111      	bne.n	8006c0e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d108      	bne.n	8006c0e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3730      	adds	r7, #48	; 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	fffffc0c 	.word	0xfffffc0c
 8006c24:	ffff0007 	.word	0xffff0007

08006c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e19c      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	4985      	ldr	r1, [pc, #532]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e184      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c88:	4b78      	ldr	r3, [pc, #480]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4975      	ldr	r1, [pc, #468]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	496a      	ldr	r1, [pc, #424]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b64      	ldr	r3, [pc, #400]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	4b61      	ldr	r3, [pc, #388]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	495e      	ldr	r1, [pc, #376]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d908      	bls.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d12:	4b56      	ldr	r3, [pc, #344]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4953      	ldr	r1, [pc, #332]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4947      	ldr	r1, [pc, #284]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d055      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4940      	ldr	r1, [pc, #256]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d78:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0f6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ea      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0de      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4925      	ldr	r1, [pc, #148]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dda:	f7fb fb31 	bl	8002440 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de2:	f7fb fb2d 	bl	8002440 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df8:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d1eb      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	490e      	ldr	r1, [pc, #56]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d214      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4906      	ldr	r1, [pc, #24]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e086      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
 8006e68:	52002000 	.word	0x52002000
 8006e6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4939      	ldr	r1, [pc, #228]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4922      	ldr	r1, [pc, #136]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4917      	ldr	r1, [pc, #92]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f28:	f000 f834 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	4a12      	ldr	r2, [pc, #72]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f3a:	5cd3      	ldrb	r3, [r2, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa21 f303 	lsr.w	r3, r1, r3
 8006f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f50:	5cd3      	ldrb	r3, [r2, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <HAL_RCC_ClockConfig+0x360>)
 8006f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCC_ClockConfig+0x364>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x368>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fb fa1e 	bl	80023ac <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0800dfa0 	.word	0x0800dfa0
 8006f88:	24000044 	.word	0x24000044
 8006f8c:	24000040 	.word	0x24000040
 8006f90:	24000048 	.word	0x24000048

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9a:	4baf      	ldr	r3, [pc, #700]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	2b18      	cmp	r3, #24
 8006fa4:	f200 814e 	bhi.w	8007244 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007245 	.word	0x08007245
 8006fb8:	08007245 	.word	0x08007245
 8006fbc:	08007245 	.word	0x08007245
 8006fc0:	08007245 	.word	0x08007245
 8006fc4:	08007245 	.word	0x08007245
 8006fc8:	08007245 	.word	0x08007245
 8006fcc:	08007245 	.word	0x08007245
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	08007245 	.word	0x08007245
 8006fd8:	08007245 	.word	0x08007245
 8006fdc:	08007245 	.word	0x08007245
 8006fe0:	08007245 	.word	0x08007245
 8006fe4:	08007245 	.word	0x08007245
 8006fe8:	08007245 	.word	0x08007245
 8006fec:	08007245 	.word	0x08007245
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007245 	.word	0x08007245
 8006ff8:	08007245 	.word	0x08007245
 8006ffc:	08007245 	.word	0x08007245
 8007000:	08007245 	.word	0x08007245
 8007004:	08007245 	.word	0x08007245
 8007008:	08007245 	.word	0x08007245
 800700c:	08007245 	.word	0x08007245
 8007010:	08007047 	.word	0x08007047
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b90      	ldr	r3, [pc, #576]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007020:	4b8d      	ldr	r3, [pc, #564]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a8c      	ldr	r2, [pc, #560]	; (800725c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007032:	e10a      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007034:	4b89      	ldr	r3, [pc, #548]	; (800725c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007036:	61bb      	str	r3, [r7, #24]
    break;
 8007038:	e107      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800703a:	4b89      	ldr	r3, [pc, #548]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800703c:	61bb      	str	r3, [r7, #24]
    break;
 800703e:	e104      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007040:	4b88      	ldr	r3, [pc, #544]	; (8007264 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007042:	61bb      	str	r3, [r7, #24]
    break;
 8007044:	e101      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007046:	4b84      	ldr	r3, [pc, #528]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007050:	4b81      	ldr	r3, [pc, #516]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800705c:	4b7e      	ldr	r3, [pc, #504]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007066:	4b7c      	ldr	r3, [pc, #496]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80da 	beq.w	800723e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d05a      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007090:	2b01      	cmp	r3, #1
 8007092:	d302      	bcc.n	800709a <HAL_RCC_GetSysClockFreq+0x106>
 8007094:	2b02      	cmp	r3, #2
 8007096:	d078      	beq.n	800718a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007098:	e099      	b.n	80071ce <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709a:	4b6f      	ldr	r3, [pc, #444]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02d      	beq.n	8007102 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070a6:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	08db      	lsrs	r3, r3, #3
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	4a6a      	ldr	r2, [pc, #424]	; (800725c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d0:	4b61      	ldr	r3, [pc, #388]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007100:	e087      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800726c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007114:	4b50      	ldr	r3, [pc, #320]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007124:	ed97 6a02 	vldr	s12, [r7, #8]
 8007128:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2d4>
 800712c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007144:	e065      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007270 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007158:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007168:	ed97 6a02 	vldr	s12, [r7, #8]
 800716c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007188:	e043      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007194:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007274 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719c:	4b2e      	ldr	r3, [pc, #184]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071cc:	e021      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007270 <HAL_RCC_GetSysClockFreq+0x2dc>
 80071dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007210:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	0a5b      	lsrs	r3, r3, #9
 8007218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721c:	3301      	adds	r3, #1
 800721e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800722a:	edd7 6a07 	vldr	s13, [r7, #28]
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	ee17 3a90 	vmov	r3, s15
 800723a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800723c:	e005      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
    break;
 8007242:	e002      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007246:	61bb      	str	r3, [r7, #24]
    break;
 8007248:	bf00      	nop
  }

  return sysclockfreq;
 800724a:	69bb      	ldr	r3, [r7, #24]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3724      	adds	r7, #36	; 0x24
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	58024400 	.word	0x58024400
 800725c:	03d09000 	.word	0x03d09000
 8007260:	003d0900 	.word	0x003d0900
 8007264:	017d7840 	.word	0x017d7840
 8007268:	46000000 	.word	0x46000000
 800726c:	4c742400 	.word	0x4c742400
 8007270:	4a742400 	.word	0x4a742400
 8007274:	4bbebc20 	.word	0x4bbebc20

08007278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800727e:	f7ff fe89 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8007282:	4601      	mov	r1, r0
 8007284:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	4a0f      	ldr	r2, [pc, #60]	; (80072cc <HAL_RCC_GetHCLKFreq+0x54>)
 8007290:	5cd3      	ldrb	r3, [r2, r3]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	fa21 f303 	lsr.w	r3, r1, r3
 800729a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	4a09      	ldr	r2, [pc, #36]	; (80072cc <HAL_RCC_GetHCLKFreq+0x54>)
 80072a6:	5cd3      	ldrb	r3, [r2, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	4a07      	ldr	r2, [pc, #28]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	58024400 	.word	0x58024400
 80072cc:	0800dfa0 	.word	0x0800dfa0
 80072d0:	24000044 	.word	0x24000044
 80072d4:	24000040 	.word	0x24000040

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072dc:	f7ff ffcc 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	091b      	lsrs	r3, r3, #4
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4a04      	ldr	r2, [pc, #16]	; (8007300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	58024400 	.word	0x58024400
 8007300:	0800dfa0 	.word	0x0800dfa0

08007304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007308:	f7ff ffb6 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 800730c:	4601      	mov	r1, r0
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4a04      	ldr	r2, [pc, #16]	; (800732c <HAL_RCC_GetPCLK2Freq+0x28>)
 800731a:	5cd3      	ldrb	r3, [r2, r3]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd80      	pop	{r7, pc}
 8007328:	58024400 	.word	0x58024400
 800732c:	0800dfa0 	.word	0x0800dfa0

08007330 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800733c:	2300      	movs	r3, #0
 800733e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03d      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007354:	d013      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d802      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007360:	e01f      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007366:	d013      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800736c:	d01c      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800736e:	e018      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007370:	4baf      	ldr	r3, [pc, #700]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4aae      	ldr	r2, [pc, #696]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800737c:	e015      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	2102      	movs	r1, #2
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fd23 	bl	8008dd0 <RCCEx_PLL2_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800738e:	e00c      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	2102      	movs	r1, #2
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fdcc 	bl	8008f34 <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
      break;
 80073a6:	e000      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80073a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073b0:	4b9f      	ldr	r3, [pc, #636]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073bc:	499c      	ldr	r1, [pc, #624]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	650b      	str	r3, [r1, #80]	; 0x50
 80073c2:	e001      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d03d      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d826      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	080073f9 	.word	0x080073f9
 80073e8:	08007407 	.word	0x08007407
 80073ec:	08007419 	.word	0x08007419
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b8d      	ldr	r3, [pc, #564]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a8c      	ldr	r2, [pc, #560]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007404:	e015      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fcdf 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007416:	e00c      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fd88 	bl	8008f34 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007438:	4b7d      	ldr	r3, [pc, #500]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	f023 0207 	bic.w	r2, r3, #7
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	497a      	ldr	r1, [pc, #488]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007446:	4313      	orrs	r3, r2
 8007448:	650b      	str	r3, [r1, #80]	; 0x50
 800744a:	e001      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03e      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d01c      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d804      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d00d      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007470:	e01e      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007472:	2bc0      	cmp	r3, #192	; 0xc0
 8007474:	d01f      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d01e      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800747c:	e018      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4b6c      	ldr	r3, [pc, #432]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	4a6b      	ldr	r2, [pc, #428]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800748a:	e017      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fc9c 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800749c:	e00e      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fd45 	bl	8008f34 <RCCEx_PLL3_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074ae:	e005      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
      break;
 80074b4:	e002      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074c2:	4b5b      	ldr	r3, [pc, #364]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ce:	4958      	ldr	r1, [pc, #352]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	650b      	str	r3, [r1, #80]	; 0x50
 80074d4:	e001      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d044      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d01f      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80074f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f6:	d805      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007500:	d00e      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007502:	e01f      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007504:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007508:	d01f      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800750a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800750e:	d01e      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007510:	e018      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4b47      	ldr	r3, [pc, #284]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	4a46      	ldr	r2, [pc, #280]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800751e:	e017      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fc52 	bl	8008dd0 <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007530:	e00e      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fcfb 	bl	8008f34 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007542:	e005      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800754e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007556:	4b36      	ldr	r3, [pc, #216]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007564:	4932      	ldr	r1, [pc, #200]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007566:	4313      	orrs	r3, r2
 8007568:	658b      	str	r3, [r1, #88]	; 0x58
 800756a:	e001      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007578:	2b00      	cmp	r3, #0
 800757a:	d044      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007586:	d01f      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800758c:	d805      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007596:	d00e      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007598:	e01f      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800759a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800759e:	d01f      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80075a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075a4:	d01e      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80075a6:	e018      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a8:	4b21      	ldr	r3, [pc, #132]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a20      	ldr	r2, [pc, #128]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075b4:	e017      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fc07 	bl	8008dd0 <RCCEx_PLL2_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075c6:	e00e      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3324      	adds	r3, #36	; 0x24
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 fcb0 	bl	8008f34 <RCCEx_PLL3_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075d8:	e005      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
      break;
 80075de:	e002      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80075e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075ec:	4b10      	ldr	r3, [pc, #64]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075fa:	490d      	ldr	r1, [pc, #52]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007600:	e001      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d035      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	2b10      	cmp	r3, #16
 8007618:	d00c      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800761a:	2b10      	cmp	r3, #16
 800761c:	d802      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01b      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007622:	e017      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007624:	2b20      	cmp	r3, #32
 8007626:	d00c      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007628:	2b30      	cmp	r3, #48	; 0x30
 800762a:	d018      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800762c:	e012      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007634:	4baf      	ldr	r3, [pc, #700]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4aae      	ldr	r2, [pc, #696]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800763a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007640:	e00e      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fbc1 	bl	8008dd0 <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007652:	e005      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	e002      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007666:	4ba3      	ldr	r3, [pc, #652]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007672:	49a0      	ldr	r1, [pc, #640]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007674:	4313      	orrs	r3, r2
 8007676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007678:	e001      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d042      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007692:	d01f      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007698:	d805      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800769e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a2:	d00e      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80076a4:	e01f      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80076a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076aa:	d01f      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80076ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b0:	d01e      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80076b2:	e018      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b4:	4b8f      	ldr	r3, [pc, #572]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a8e      	ldr	r2, [pc, #568]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076c0:	e017      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fb81 	bl	8008dd0 <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076d2:	e00e      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fc2a 	bl	8008f34 <RCCEx_PLL3_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076e4:	e005      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
      break;
 80076ea:	e002      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80076f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076f8:	4b7e      	ldr	r3, [pc, #504]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007704:	497b      	ldr	r1, [pc, #492]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007706:	4313      	orrs	r3, r2
 8007708:	650b      	str	r3, [r1, #80]	; 0x50
 800770a:	e001      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d042      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007724:	d01b      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800772a:	d805      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d022      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007736:	e01b      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800773c:	d01d      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800773e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007742:	d01c      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007744:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007748:	d01b      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800774a:	e011      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	2101      	movs	r1, #1
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fb3c 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800775c:	e012      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3324      	adds	r3, #36	; 0x24
 8007762:	2101      	movs	r1, #1
 8007764:	4618      	mov	r0, r3
 8007766:	f001 fbe5 	bl	8008f34 <RCCEx_PLL3_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800776e:	e009      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
      break;
 8007774:	e006      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007776:	bf00      	nop
 8007778:	e004      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800777a:	bf00      	nop
 800777c:	e002      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800778a:	4b5a      	ldr	r3, [pc, #360]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800778c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007796:	4957      	ldr	r1, [pc, #348]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007798:	4313      	orrs	r3, r2
 800779a:	650b      	str	r3, [r1, #80]	; 0x50
 800779c:	e001      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d044      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b8:	d01b      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077be:	d805      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d022      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077c8:	d00a      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80077ca:	e01b      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d01d      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d6:	d01c      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80077d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077dc:	d01b      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077de:	e011      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	2101      	movs	r1, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 faf2 	bl	8008dd0 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077f0:	e012      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3324      	adds	r3, #36	; 0x24
 80077f6:	2101      	movs	r1, #1
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 fb9b 	bl	8008f34 <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007802:	e009      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
      break;
 8007808:	e006      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800780a:	bf00      	nop
 800780c:	e004      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800780e:	bf00      	nop
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800781e:	4b35      	ldr	r3, [pc, #212]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800782c:	4931      	ldr	r1, [pc, #196]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800782e:	4313      	orrs	r3, r2
 8007830:	658b      	str	r3, [r1, #88]	; 0x58
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d02d      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784c:	d005      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800784e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007852:	d009      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d013      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007858:	e00f      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785a:	4b26      	ldr	r3, [pc, #152]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a25      	ldr	r2, [pc, #148]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f001 faae 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007894:	4917      	ldr	r1, [pc, #92]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007896:	4313      	orrs	r3, r2
 8007898:	650b      	str	r3, [r1, #80]	; 0x50
 800789a:	e001      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d035      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d81b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078f9 	.word	0x080078f9
 80078c0:	080078cd 	.word	0x080078cd
 80078c4:	080078db 	.word	0x080078db
 80078c8:	080078f9 	.word	0x080078f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078d8:	e00f      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2102      	movs	r1, #2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fa75 	bl	8008dd0 <RCCEx_PLL2_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078ea:	e006      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
      break;
 80078f0:	e003      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
      break;
 80078f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007900:	4bba      	ldr	r3, [pc, #744]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007904:	f023 0203 	bic.w	r2, r3, #3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	49b7      	ldr	r1, [pc, #732]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800790e:	4313      	orrs	r3, r2
 8007910:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007912:	e001      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8086 	beq.w	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007926:	4bb2      	ldr	r3, [pc, #712]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4ab1      	ldr	r2, [pc, #708]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800792c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007932:	f7fa fd85 	bl	8002440 <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007938:	e009      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793a:	f7fa fd81 	bl	8002440 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b64      	cmp	r3, #100	; 0x64
 8007946:	d902      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	75fb      	strb	r3, [r7, #23]
        break;
 800794c:	e005      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800794e:	4ba8      	ldr	r3, [pc, #672]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ef      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d166      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007960:	4ba2      	ldr	r3, [pc, #648]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007962:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800796a:	4053      	eors	r3, r2
 800796c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007970:	2b00      	cmp	r3, #0
 8007972:	d013      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007974:	4b9d      	ldr	r3, [pc, #628]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800797e:	4b9b      	ldr	r3, [pc, #620]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	4a9a      	ldr	r2, [pc, #616]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007988:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800798a:	4b98      	ldr	r3, [pc, #608]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a97      	ldr	r2, [pc, #604]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007996:	4a95      	ldr	r2, [pc, #596]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	d115      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a8:	f7fa fd4a 	bl	8002440 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ae:	e00b      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b0:	f7fa fd46 	bl	8002440 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80079be:	4293      	cmp	r3, r2
 80079c0:	d902      	bls.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	75fb      	strb	r3, [r7, #23]
            break;
 80079c6:	e005      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079c8:	4b88      	ldr	r3, [pc, #544]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0ed      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d126      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e8:	d10d      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80079ea:	4b80      	ldr	r3, [pc, #512]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079f8:	0919      	lsrs	r1, r3, #4
 80079fa:	4b7e      	ldr	r3, [pc, #504]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80079fc:	400b      	ands	r3, r1
 80079fe:	497b      	ldr	r1, [pc, #492]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	610b      	str	r3, [r1, #16]
 8007a04:	e005      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007a06:	4b79      	ldr	r3, [pc, #484]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	4a78      	ldr	r2, [pc, #480]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a10:	6113      	str	r3, [r2, #16]
 8007a12:	4b76      	ldr	r3, [pc, #472]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a20:	4972      	ldr	r1, [pc, #456]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	670b      	str	r3, [r1, #112]	; 0x70
 8007a26:	e004      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
 8007a2c:	e001      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d07d      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a42:	2b28      	cmp	r3, #40	; 0x28
 8007a44:	d866      	bhi.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007b1b 	.word	0x08007b1b
 8007a50:	08007b15 	.word	0x08007b15
 8007a54:	08007b15 	.word	0x08007b15
 8007a58:	08007b15 	.word	0x08007b15
 8007a5c:	08007b15 	.word	0x08007b15
 8007a60:	08007b15 	.word	0x08007b15
 8007a64:	08007b15 	.word	0x08007b15
 8007a68:	08007b15 	.word	0x08007b15
 8007a6c:	08007af1 	.word	0x08007af1
 8007a70:	08007b15 	.word	0x08007b15
 8007a74:	08007b15 	.word	0x08007b15
 8007a78:	08007b15 	.word	0x08007b15
 8007a7c:	08007b15 	.word	0x08007b15
 8007a80:	08007b15 	.word	0x08007b15
 8007a84:	08007b15 	.word	0x08007b15
 8007a88:	08007b15 	.word	0x08007b15
 8007a8c:	08007b03 	.word	0x08007b03
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007b15 	.word	0x08007b15
 8007a98:	08007b15 	.word	0x08007b15
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b15 	.word	0x08007b15
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007b1b 	.word	0x08007b1b
 8007ab0:	08007b15 	.word	0x08007b15
 8007ab4:	08007b15 	.word	0x08007b15
 8007ab8:	08007b15 	.word	0x08007b15
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007b15 	.word	0x08007b15
 8007acc:	08007b1b 	.word	0x08007b1b
 8007ad0:	08007b15 	.word	0x08007b15
 8007ad4:	08007b15 	.word	0x08007b15
 8007ad8:	08007b15 	.word	0x08007b15
 8007adc:	08007b15 	.word	0x08007b15
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b1b 	.word	0x08007b1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f96a 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b00:	e00c      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3324      	adds	r3, #36	; 0x24
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fa13 	bl	8008f34 <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
      break;
 8007b18:	e000      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b22:	4b32      	ldr	r3, [pc, #200]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b2e:	492f      	ldr	r1, [pc, #188]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	654b      	str	r3, [r1, #84]	; 0x54
 8007b34:	e001      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d037      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d820      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b97 	.word	0x08007b97
 8007b58:	08007b6d 	.word	0x08007b6d
 8007b5c:	08007b7f 	.word	0x08007b7f
 8007b60:	08007b97 	.word	0x08007b97
 8007b64:	08007b97 	.word	0x08007b97
 8007b68:	08007b97 	.word	0x08007b97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	2101      	movs	r1, #1
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 f92c 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b7c:	e00c      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f9d5 	bl	8008f34 <RCCEx_PLL3_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b8e:	e003      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
      break;
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	f023 0207 	bic.w	r2, r3, #7
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	4910      	ldr	r1, [pc, #64]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	654b      	str	r3, [r1, #84]	; 0x54
 8007bb0:	e001      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d040      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d827      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c23 	.word	0x08007c23
 8007bd8:	08007bf9 	.word	0x08007bf9
 8007bdc:	08007c0b 	.word	0x08007c0b
 8007be0:	08007c23 	.word	0x08007c23
 8007be4:	08007c23 	.word	0x08007c23
 8007be8:	08007c23 	.word	0x08007c23
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	58024800 	.word	0x58024800
 8007bf4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 f8e6 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c08:	e00c      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3324      	adds	r3, #36	; 0x24
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f98f 	bl	8008f34 <RCCEx_PLL3_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e000      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c2a:	4bb2      	ldr	r3, [pc, #712]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	f023 0207 	bic.w	r2, r3, #7
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	49ae      	ldr	r1, [pc, #696]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c3e:	e001      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d044      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5a:	d01b      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c60:	d805      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d022      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007c6c:	e01b      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c72:	d01d      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c78:	d01c      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c7e:	d01b      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007c80:	e011      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3304      	adds	r3, #4
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 f8a1 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c92:	e012      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3324      	adds	r3, #36	; 0x24
 8007c98:	2102      	movs	r1, #2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 f94a 	bl	8008f34 <RCCEx_PLL3_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ca4:	e009      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8007caa:	e006      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cac:	bf00      	nop
 8007cae:	e004      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e002      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cb4:	bf00      	nop
 8007cb6:	e000      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc0:	4b8c      	ldr	r3, [pc, #560]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cce:	4989      	ldr	r1, [pc, #548]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	654b      	str	r3, [r1, #84]	; 0x54
 8007cd4:	e001      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d044      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf0:	d01b      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf6:	d805      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d022      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d00:	d00a      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007d02:	e01b      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d08:	d01d      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007d0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d0e:	d01c      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d14:	d01b      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007d16:	e011      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f856 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d28:	e012      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3324      	adds	r3, #36	; 0x24
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f8ff 	bl	8008f34 <RCCEx_PLL3_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d3a:	e009      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d40:	e006      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d42:	bf00      	nop
 8007d44:	e004      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d56:	4b67      	ldr	r3, [pc, #412]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d64:	4963      	ldr	r1, [pc, #396]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	658b      	str	r3, [r1, #88]	; 0x58
 8007d6a:	e001      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d044      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d86:	d01b      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d8c:	d805      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d022      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d96:	d00a      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d98:	e01b      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9e:	d01d      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007da0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007da4:	d01c      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007da6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007daa:	d01b      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007dac:	e011      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f80b 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dbe:	e012      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f8b4 	bl	8008f34 <RCCEx_PLL3_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dd0:	e009      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd6:	e006      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007dd8:	bf00      	nop
 8007dda:	e004      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ddc:	bf00      	nop
 8007dde:	e002      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dec:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dfa:	493e      	ldr	r1, [pc, #248]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	658b      	str	r3, [r1, #88]	; 0x58
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1c:	d10a      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3324      	adds	r3, #36	; 0x24
 8007e22:	2102      	movs	r1, #2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f885 	bl	8008f34 <RCCEx_PLL3_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e34:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e42:	492c      	ldr	r1, [pc, #176]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5e:	d10a      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3324      	adds	r3, #36	; 0x24
 8007e64:	2102      	movs	r1, #2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f001 f864 	bl	8008f34 <RCCEx_PLL3_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e76:	4b1f      	ldr	r3, [pc, #124]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e84:	491b      	ldr	r1, [pc, #108]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d032      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea0:	d00d      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea6:	d016      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d111      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 ff8c 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ebc:	e00c      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3324      	adds	r3, #36	; 0x24
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 f835 	bl	8008f34 <RCCEx_PLL3_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007eec:	4901      	ldr	r1, [pc, #4]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02f      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f12:	d00c      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f18:	d015      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1e:	d10f      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f20:	4b71      	ldr	r3, [pc, #452]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a70      	ldr	r2, [pc, #448]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f2c:	e00c      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3324      	adds	r3, #36	; 0x24
 8007f32:	2101      	movs	r1, #1
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fffd 	bl	8008f34 <RCCEx_PLL3_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f4e:	4b66      	ldr	r3, [pc, #408]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5c:	4962      	ldr	r1, [pc, #392]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	654b      	str	r3, [r1, #84]	; 0x54
 8007f62:	e001      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d029      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d007      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007f82:	e00f      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f84:	4b58      	ldr	r3, [pc, #352]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	4a57      	ldr	r2, [pc, #348]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f90:	e00b      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	2102      	movs	r1, #2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 ff19 	bl	8008dd0 <RCCEx_PLL2_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fa2:	e002      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d109      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbc:	494a      	ldr	r1, [pc, #296]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fc2:	e001      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3324      	adds	r3, #36	; 0x24
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 ffaa 	bl	8008f34 <RCCEx_PLL3_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d02f      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffe:	d00c      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008004:	d802      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d011      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800800a:	e00d      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800800c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008010:	d00f      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008016:	d00e      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008018:	e006      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801a:	4b33      	ldr	r3, [pc, #204]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a32      	ldr	r2, [pc, #200]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008026:	e007      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]
      break;
 800802c:	e004      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800803e:	4b2a      	ldr	r3, [pc, #168]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804a:	4927      	ldr	r1, [pc, #156]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800804c:	4313      	orrs	r3, r2
 800804e:	654b      	str	r3, [r1, #84]	; 0x54
 8008050:	e001      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008062:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	491e      	ldr	r1, [pc, #120]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008070:	4313      	orrs	r3, r2
 8008072:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d008      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008080:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008084:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800808c:	4916      	ldr	r1, [pc, #88]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800808e:	4313      	orrs	r3, r2
 8008090:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080a8:	6113      	str	r3, [r2, #16]
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080b4:	490c      	ldr	r1, [pc, #48]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da08      	bge.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	4906      	ldr	r1, [pc, #24]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80080d4:	7dbb      	ldrb	r3, [r7, #22]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e000      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	58024400 	.word	0x58024400

080080ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b090      	sub	sp, #64	; 0x40
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fa:	d150      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80080fc:	4ba1      	ldr	r3, [pc, #644]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	2b04      	cmp	r3, #4
 800810a:	d844      	bhi.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008129 	.word	0x08008129
 8008118:	08008139 	.word	0x08008139
 800811c:	08008149 	.word	0x08008149
 8008120:	08008191 	.word	0x08008191
 8008124:	08008159 	.word	0x08008159
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fd03 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008136:	e241      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008138:	f107 0318 	add.w	r3, r7, #24
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fa63 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008146:	e239      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008148:	f107 030c 	add.w	r3, r7, #12
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fba7 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008156:	e231      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008158:	4b8a      	ldr	r3, [pc, #552]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008160:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008168:	4b87      	ldr	r3, [pc, #540]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800816c:	e226      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008174:	d102      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008176:	4b85      	ldr	r3, [pc, #532]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817a:	e21f      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008182:	d102      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008184:	4b82      	ldr	r3, [pc, #520]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008188:	e218      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818e:	e215      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008190:	4b80      	ldr	r3, [pc, #512]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008194:	e212      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800819a:	bf00      	nop
 800819c:	e20e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a4:	d14f      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80081a6:	4b77      	ldr	r3, [pc, #476]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	2b80      	cmp	r3, #128	; 0x80
 80081b4:	d01c      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d804      	bhi.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d008      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d00e      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80081c2:	e03c      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80081c4:	2bc0      	cmp	r3, #192	; 0xc0
 80081c6:	d037      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80081c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081cc:	d018      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80081ce:	e036      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fcaf 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081de:	e1ed      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e0:	f107 0318 	add.w	r3, r7, #24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fa0f 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ee:	e1e5      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f0:	f107 030c 	add.w	r3, r7, #12
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fb53 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081fe:	e1dd      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008200:	4b60      	ldr	r3, [pc, #384]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008208:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008210:	4b5d      	ldr	r3, [pc, #372]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008214:	e1d2      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821c:	d102      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800821e:	4b5b      	ldr	r3, [pc, #364]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008222:	e1cb      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800822a:	d102      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800822c:	4b58      	ldr	r3, [pc, #352]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008230:	e1c4      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008236:	e1c1      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008238:	4b56      	ldr	r3, [pc, #344]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823c:	e1be      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008242:	bf00      	nop
 8008244:	e1ba      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824c:	d153      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800824e:	4b4d      	ldr	r3, [pc, #308]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008252:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008256:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800825e:	d01f      	beq.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008264:	d805      	bhi.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800826a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826e:	d00f      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008270:	e03d      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008272:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008276:	d037      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800827c:	d018      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800827e:	e036      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fc57 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828e:	e195      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008290:	f107 0318 	add.w	r3, r7, #24
 8008294:	4618      	mov	r0, r3
 8008296:	f000 f9b7 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829e:	e18d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fafb 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ae:	e185      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082b0:	4b34      	ldr	r3, [pc, #208]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082c0:	4b31      	ldr	r3, [pc, #196]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082c4:	e17a      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082cc:	d102      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80082ce:	4b2f      	ldr	r3, [pc, #188]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d2:	e173      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082da:	d102      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80082dc:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e0:	e16c      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e6:	e169      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082e8:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ec:	e166      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f2:	bf00      	nop
 80082f4:	e162      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082fc:	d15d      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80082fe:	4b21      	ldr	r3, [pc, #132]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008306:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800830e:	d01f      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008314:	d805      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800831a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800831e:	d00f      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008320:	e047      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008326:	d041      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800832c:	d018      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800832e:	e040      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fbff 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800833e:	e13d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008340:	f107 0318 	add.w	r3, r7, #24
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f95f 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834e:	e135      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008350:	f107 030c 	add.w	r3, r7, #12
 8008354:	4618      	mov	r0, r3
 8008356:	f000 faa3 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835e:	e12d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008368:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008374:	e122      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837c:	d10c      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800837e:	4b03      	ldr	r3, [pc, #12]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e11b      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008384:	58024400 	.word	0x58024400
 8008388:	03d09000 	.word	0x03d09000
 800838c:	003d0900 	.word	0x003d0900
 8008390:	017d7840 	.word	0x017d7840
 8008394:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800839e:	d102      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80083a0:	4b89      	ldr	r3, [pc, #548]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a4:	e10a      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083aa:	e107      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083ac:	4b87      	ldr	r3, [pc, #540]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b0:	e104      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b6:	bf00      	nop
 80083b8:	e100      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c0:	d153      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80083c2:	4b83      	ldr	r3, [pc, #524]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d2:	d01f      	beq.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80083d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d8:	d805      	bhi.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	d00f      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80083e4:	e03d      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80083e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083ea:	d037      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f0:	d018      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80083f2:	e036      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fb9d 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008402:	e0db      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008404:	f107 0318 	add.w	r3, r7, #24
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f8fd 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008412:	e0d3      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fa41 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008422:	e0cb      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008424:	4b6a      	ldr	r3, [pc, #424]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800842c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008434:	4b67      	ldr	r3, [pc, #412]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008438:	e0c0      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008440:	d102      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008442:	4b65      	ldr	r3, [pc, #404]	; (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008446:	e0b9      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008450:	4b5d      	ldr	r3, [pc, #372]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008454:	e0b2      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845a:	e0af      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800845c:	4b5b      	ldr	r3, [pc, #364]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008460:	e0ac      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008466:	bf00      	nop
 8008468:	e0a8      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008470:	d13d      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008472:	4b57      	ldr	r3, [pc, #348]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800847a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008482:	d00c      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008488:	d011      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d12b      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800848e:	f107 0318 	add.w	r3, r7, #24
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f8b8 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800849c:	e08e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f9fc 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ac:	e086      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084ae:	4b48      	ldr	r3, [pc, #288]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80084b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80084be:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80084c2:	e07b      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80084c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ca:	d102      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80084cc:	4b42      	ldr	r3, [pc, #264]	; (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d0:	e074      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d8:	d102      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80084da:	4b3b      	ldr	r3, [pc, #236]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084de:	e06d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084e4:	e06a      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ea:	bf00      	nop
 80084ec:	e066      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f4:	d11f      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80084f6:	4b36      	ldr	r3, [pc, #216]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850a:	d008      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800850c:	e00f      	b.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fb10 	bl	8008b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800851c:	e04e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851e:	f107 0318 	add.w	r3, r7, #24
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f870 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800852c:	e046      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008532:	bf00      	nop
 8008534:	e042      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800853c:	d13c      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800853e:	4b24      	ldr	r3, [pc, #144]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008546:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800854e:	d01e      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008554:	d805      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800855a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855e:	d00e      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008560:	e026      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008566:	d01d      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800856c:	d01d      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800856e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008572:	d014      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008574:	e01c      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008576:	f000 f831 	bl	80085dc <HAL_RCCEx_GetD3PCLK1Freq>
 800857a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800857c:	e01e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800857e:	f107 0318 	add.w	r3, r7, #24
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f840 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800858c:	e016      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f984 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800859c:	e00e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800859e:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a2:	e00b      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a8:	e008      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ae:	e005      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b4:	bf00      	nop
 80085b6:	e001      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3740      	adds	r7, #64	; 0x40
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	017d7840 	.word	0x017d7840
 80085cc:	00bb8000 	.word	0x00bb8000
 80085d0:	58024400 	.word	0x58024400
 80085d4:	03d09000 	.word	0x03d09000
 80085d8:	003d0900 	.word	0x003d0900

080085dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085e0:	f7fe fe4a 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 80085e4:	4601      	mov	r1, r0
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	091b      	lsrs	r3, r3, #4
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085f2:	5cd3      	ldrb	r3, [r2, r3]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	58024400 	.word	0x58024400
 8008604:	0800dfa0 	.word	0x0800dfa0

08008608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008610:	4b9d      	ldr	r3, [pc, #628]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800861a:	4b9b      	ldr	r3, [pc, #620]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	0b1b      	lsrs	r3, r3, #12
 8008620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008624:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008626:	4b98      	ldr	r3, [pc, #608]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008632:	4b95      	ldr	r3, [pc, #596]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 810a 	beq.w	800886a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d05a      	beq.n	8008712 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d302      	bcc.n	8008666 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008660:	2b02      	cmp	r3, #2
 8008662:	d078      	beq.n	8008756 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008664:	e099      	b.n	800879a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008666:	4b88      	ldr	r3, [pc, #544]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02d      	beq.n	80086ce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008672:	4b85      	ldr	r3, [pc, #532]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	08db      	lsrs	r3, r3, #3
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	4a83      	ldr	r2, [pc, #524]	; (800888c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800867e:	fa22 f303 	lsr.w	r3, r2, r3
 8008682:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869c:	4b7a      	ldr	r3, [pc, #488]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086cc:	e087      	b.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80086dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e0:	4b69      	ldr	r3, [pc, #420]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e8:	ee07 3a90 	vmov	s15, r3
 80086ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008710:	e065      	b.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	ee07 3a90 	vmov	s15, r3
 8008718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008724:	4b58      	ldr	r3, [pc, #352]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008734:	ed97 6a03 	vldr	s12, [r7, #12]
 8008738:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800873c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008754:	e043      	b.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800889c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008768:	4b47      	ldr	r3, [pc, #284]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008778:	ed97 6a03 	vldr	s12, [r7, #12]
 800877c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008798:	e021      	b.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80087a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087dc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80087de:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	0a5b      	lsrs	r3, r3, #9
 80087e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008804:	ee17 2a90 	vmov	r2, s15
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	0c1b      	lsrs	r3, r3, #16
 8008812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008826:	edd7 6a07 	vldr	s13, [r7, #28]
 800882a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800882e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008832:	ee17 2a90 	vmov	r2, s15
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	0e1b      	lsrs	r3, r3, #24
 8008840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008854:	edd7 6a07 	vldr	s13, [r7, #28]
 8008858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008860:	ee17 2a90 	vmov	r2, s15
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008868:	e008      	b.n	800887c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	609a      	str	r2, [r3, #8]
}
 800887c:	bf00      	nop
 800887e:	3724      	adds	r7, #36	; 0x24
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	58024400 	.word	0x58024400
 800888c:	03d09000 	.word	0x03d09000
 8008890:	46000000 	.word	0x46000000
 8008894:	4c742400 	.word	0x4c742400
 8008898:	4a742400 	.word	0x4a742400
 800889c:	4bbebc20 	.word	0x4bbebc20

080088a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b089      	sub	sp, #36	; 0x24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a8:	4b9d      	ldr	r3, [pc, #628]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088b2:	4b9b      	ldr	r3, [pc, #620]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	0d1b      	lsrs	r3, r3, #20
 80088b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088be:	4b98      	ldr	r3, [pc, #608]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	0a1b      	lsrs	r3, r3, #8
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088ca:	4b95      	ldr	r3, [pc, #596]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 810a 	beq.w	8008b02 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d05a      	beq.n	80089aa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d302      	bcc.n	80088fe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d078      	beq.n	80089ee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80088fc:	e099      	b.n	8008a32 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fe:	4b88      	ldr	r3, [pc, #544]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d02d      	beq.n	8008966 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800890a:	4b85      	ldr	r3, [pc, #532]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	08db      	lsrs	r3, r3, #3
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	4a83      	ldr	r2, [pc, #524]	; (8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008916:	fa22 f303 	lsr.w	r3, r2, r3
 800891a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008934:	4b7a      	ldr	r3, [pc, #488]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008944:	ed97 6a03 	vldr	s12, [r7, #12]
 8008948:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800894c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008960:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008964:	e087      	b.n	8008a76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008978:	4b69      	ldr	r3, [pc, #420]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008988:	ed97 6a03 	vldr	s12, [r7, #12]
 800898c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a8:	e065      	b.n	8008a76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80089b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089bc:	4b58      	ldr	r3, [pc, #352]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ec:	e043      	b.n	8008a76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80089fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a00:	4b47      	ldr	r3, [pc, #284]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a08:	ee07 3a90 	vmov	s15, r3
 8008a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a30:	e021      	b.n	8008a76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a44:	4b36      	ldr	r3, [pc, #216]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a74:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a76:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	0a5b      	lsrs	r3, r3, #9
 8008a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a80:	ee07 3a90 	vmov	s15, r3
 8008a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9c:	ee17 2a90 	vmov	r2, s15
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008aa4:	4b1e      	ldr	r3, [pc, #120]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aca:	ee17 2a90 	vmov	r2, s15
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	0e1b      	lsrs	r3, r3, #24
 8008ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af8:	ee17 2a90 	vmov	r2, s15
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b00:	e008      	b.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	609a      	str	r2, [r3, #8]
}
 8008b14:	bf00      	nop
 8008b16:	3724      	adds	r7, #36	; 0x24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	58024400 	.word	0x58024400
 8008b24:	03d09000 	.word	0x03d09000
 8008b28:	46000000 	.word	0x46000000
 8008b2c:	4c742400 	.word	0x4c742400
 8008b30:	4a742400 	.word	0x4a742400
 8008b34:	4bbebc20 	.word	0x4bbebc20

08008b38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b40:	4b9d      	ldr	r3, [pc, #628]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008b4a:	4b9b      	ldr	r3, [pc, #620]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	091b      	lsrs	r3, r3, #4
 8008b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b56:	4b98      	ldr	r3, [pc, #608]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b60:	4b95      	ldr	r3, [pc, #596]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	fb02 f303 	mul.w	r3, r2, r3
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 810a 	beq.w	8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d05a      	beq.n	8008c40 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d302      	bcc.n	8008b94 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d078      	beq.n	8008c84 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008b92:	e099      	b.n	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b94:	4b88      	ldr	r3, [pc, #544]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d02d      	beq.n	8008bfc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ba0:	4b85      	ldr	r3, [pc, #532]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a84      	ldr	r2, [pc, #528]	; (8008dbc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bca:	4b7b      	ldr	r3, [pc, #492]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bfa:	e087      	b.n	8008d0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0e:	4b6a      	ldr	r3, [pc, #424]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c3e:	e065      	b.n	8008d0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c52:	4b59      	ldr	r3, [pc, #356]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c82:	e043      	b.n	8008d0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b48      	ldr	r3, [pc, #288]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008caa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cc6:	e021      	b.n	8008d0c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b37      	ldr	r3, [pc, #220]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d0a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d0c:	4b2a      	ldr	r3, [pc, #168]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	0a5b      	lsrs	r3, r3, #9
 8008d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d32:	ee17 2a90 	vmov	r2, s15
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d3a:	4b1f      	ldr	r3, [pc, #124]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	0c1b      	lsrs	r3, r3, #16
 8008d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d44:	ee07 3a90 	vmov	s15, r3
 8008d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d60:	ee17 2a90 	vmov	r2, s15
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d68:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	0e1b      	lsrs	r3, r3, #24
 8008d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d8e:	ee17 2a90 	vmov	r2, s15
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d96:	e008      	b.n	8008daa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
}
 8008daa:	bf00      	nop
 8008dac:	3724      	adds	r7, #36	; 0x24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	46000000 	.word	0x46000000
 8008dc4:	4c742400 	.word	0x4c742400
 8008dc8:	4a742400 	.word	0x4a742400
 8008dcc:	4bbebc20 	.word	0x4bbebc20

08008dd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dde:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d101      	bne.n	8008dee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e099      	b.n	8008f22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008dee:	4b4f      	ldr	r3, [pc, #316]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a4e      	ldr	r2, [pc, #312]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dfa:	f7f9 fb21 	bl	8002440 <HAL_GetTick>
 8008dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e00:	e008      	b.n	8008e14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e02:	f7f9 fb1d 	bl	8002440 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e086      	b.n	8008f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e14:	4b45      	ldr	r3, [pc, #276]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1f0      	bne.n	8008e02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e20:	4b42      	ldr	r3, [pc, #264]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	031b      	lsls	r3, r3, #12
 8008e2e:	493f      	ldr	r1, [pc, #252]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	628b      	str	r3, [r1, #40]	; 0x28
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	025b      	lsls	r3, r3, #9
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	041b      	lsls	r3, r3, #16
 8008e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e64:	4931      	ldr	r1, [pc, #196]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e6a:	4b30      	ldr	r3, [pc, #192]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	492d      	ldr	r1, [pc, #180]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e7c:	4b2b      	ldr	r3, [pc, #172]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	f023 0220 	bic.w	r2, r3, #32
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	4928      	ldr	r1, [pc, #160]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e8e:	4b27      	ldr	r3, [pc, #156]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a26      	ldr	r2, [pc, #152]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e94:	f023 0310 	bic.w	r3, r3, #16
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e9a:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e9e:	4b24      	ldr	r3, [pc, #144]	; (8008f30 <RCCEx_PLL2_Config+0x160>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	69d2      	ldr	r2, [r2, #28]
 8008ea6:	00d2      	lsls	r2, r2, #3
 8008ea8:	4920      	ldr	r1, [pc, #128]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008eae:	4b1f      	ldr	r3, [pc, #124]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	f043 0310 	orr.w	r3, r3, #16
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d106      	bne.n	8008ece <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ec0:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ecc:	e00f      	b.n	8008eee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d106      	bne.n	8008ee2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ed4:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	4a14      	ldr	r2, [pc, #80]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ee0:	e005      	b.n	8008eee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	4a11      	ldr	r2, [pc, #68]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a0e      	ldr	r2, [pc, #56]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008efa:	f7f9 faa1 	bl	8002440 <HAL_GetTick>
 8008efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f00:	e008      	b.n	8008f14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f02:	f7f9 fa9d 	bl	8002440 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d901      	bls.n	8008f14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e006      	b.n	8008f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <RCCEx_PLL2_Config+0x15c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0f0      	beq.n	8008f02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	ffff0007 	.word	0xffff0007

08008f34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f42:	4b53      	ldr	r3, [pc, #332]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d101      	bne.n	8008f52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e099      	b.n	8009086 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f52:	4b4f      	ldr	r3, [pc, #316]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a4e      	ldr	r2, [pc, #312]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f5e:	f7f9 fa6f 	bl	8002440 <HAL_GetTick>
 8008f62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f64:	e008      	b.n	8008f78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f66:	f7f9 fa6b 	bl	8002440 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d901      	bls.n	8008f78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e086      	b.n	8009086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f78:	4b45      	ldr	r3, [pc, #276]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f0      	bne.n	8008f66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f84:	4b42      	ldr	r3, [pc, #264]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	051b      	lsls	r3, r3, #20
 8008f92:	493f      	ldr	r1, [pc, #252]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	628b      	str	r3, [r1, #40]	; 0x28
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	025b      	lsls	r3, r3, #9
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	041b      	lsls	r3, r3, #16
 8008fb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	061b      	lsls	r3, r3, #24
 8008fc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fc8:	4931      	ldr	r1, [pc, #196]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fce:	4b30      	ldr	r3, [pc, #192]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	492d      	ldr	r1, [pc, #180]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fe0:	4b2b      	ldr	r3, [pc, #172]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	4928      	ldr	r1, [pc, #160]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ff2:	4b27      	ldr	r3, [pc, #156]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4a26      	ldr	r2, [pc, #152]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8008ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ffe:	4b24      	ldr	r3, [pc, #144]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009002:	4b24      	ldr	r3, [pc, #144]	; (8009094 <RCCEx_PLL3_Config+0x160>)
 8009004:	4013      	ands	r3, r2
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	69d2      	ldr	r2, [r2, #28]
 800900a:	00d2      	lsls	r2, r2, #3
 800900c:	4920      	ldr	r1, [pc, #128]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009012:	4b1f      	ldr	r3, [pc, #124]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	4a1e      	ldr	r2, [pc, #120]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d106      	bne.n	8009032 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009024:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4a19      	ldr	r2, [pc, #100]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800902a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800902e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009030:	e00f      	b.n	8009052 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d106      	bne.n	8009046 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	4a14      	ldr	r2, [pc, #80]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800903e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009042:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009044:	e005      	b.n	8009052 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	4a11      	ldr	r2, [pc, #68]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800904c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009050:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a0e      	ldr	r2, [pc, #56]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 8009058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800905e:	f7f9 f9ef 	bl	8002440 <HAL_GetTick>
 8009062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009064:	e008      	b.n	8009078 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009066:	f7f9 f9eb 	bl	8002440 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e006      	b.n	8009086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <RCCEx_PLL3_Config+0x15c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0f0      	beq.n	8009066 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	58024400 	.word	0x58024400
 8009094:	ffff0007 	.word	0xffff0007

08009098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e01d      	b.n	80090e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f8 fe28 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f000 f97c 	bl	80093d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <HAL_TIM_Base_Start_IT+0x50>)
 8009110:	4013      	ands	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b06      	cmp	r3, #6
 8009118:	d00b      	beq.n	8009132 <HAL_TIM_Base_Start_IT+0x42>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009120:	d007      	beq.n	8009132 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	00010007 	.word	0x00010007

08009144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d122      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b02      	cmp	r3, #2
 8009166:	d11b      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0202 	mvn.w	r2, #2
 8009170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f905 	bl	8009396 <HAL_TIM_IC_CaptureCallback>
 800918c:	e005      	b.n	800919a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f8f7 	bl	8009382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f908 	bl	80093aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d122      	bne.n	80091f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d11b      	bne.n	80091f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f06f 0204 	mvn.w	r2, #4
 80091c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8db 	bl	8009396 <HAL_TIM_IC_CaptureCallback>
 80091e0:	e005      	b.n	80091ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8cd 	bl	8009382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8de 	bl	80093aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b08      	cmp	r3, #8
 8009200:	d122      	bne.n	8009248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f003 0308 	and.w	r3, r3, #8
 800920c:	2b08      	cmp	r3, #8
 800920e:	d11b      	bne.n	8009248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f06f 0208 	mvn.w	r2, #8
 8009218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2204      	movs	r2, #4
 800921e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8b1 	bl	8009396 <HAL_TIM_IC_CaptureCallback>
 8009234:	e005      	b.n	8009242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f8a3 	bl	8009382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f8b4 	bl	80093aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f003 0310 	and.w	r3, r3, #16
 8009252:	2b10      	cmp	r3, #16
 8009254:	d122      	bne.n	800929c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b10      	cmp	r3, #16
 8009262:	d11b      	bne.n	800929c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0210 	mvn.w	r2, #16
 800926c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2208      	movs	r2, #8
 8009272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f887 	bl	8009396 <HAL_TIM_IC_CaptureCallback>
 8009288:	e005      	b.n	8009296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f879 	bl	8009382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f88a 	bl	80093aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d10e      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d107      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f06f 0201 	mvn.w	r2, #1
 80092c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7f7 fef2 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d10e      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e0:	2b80      	cmp	r3, #128	; 0x80
 80092e2:	d107      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f99c 	bl	800962c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009302:	d10e      	bne.n	8009322 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d107      	bne.n	8009322 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800931a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f98f 	bl	8009640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	d10e      	bne.n	800934e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	d107      	bne.n	800934e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f838 	bl	80093be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b20      	cmp	r3, #32
 800935a:	d10e      	bne.n	800937a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b20      	cmp	r3, #32
 8009368:	d107      	bne.n	800937a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f06f 0220 	mvn.w	r2, #32
 8009372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f94f 	bl	8009618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a40      	ldr	r2, [pc, #256]	; (80094e8 <TIM_Base_SetConfig+0x114>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d013      	beq.n	8009414 <TIM_Base_SetConfig+0x40>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f2:	d00f      	beq.n	8009414 <TIM_Base_SetConfig+0x40>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a3d      	ldr	r2, [pc, #244]	; (80094ec <TIM_Base_SetConfig+0x118>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00b      	beq.n	8009414 <TIM_Base_SetConfig+0x40>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a3c      	ldr	r2, [pc, #240]	; (80094f0 <TIM_Base_SetConfig+0x11c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d007      	beq.n	8009414 <TIM_Base_SetConfig+0x40>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a3b      	ldr	r2, [pc, #236]	; (80094f4 <TIM_Base_SetConfig+0x120>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_Base_SetConfig+0x40>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a3a      	ldr	r2, [pc, #232]	; (80094f8 <TIM_Base_SetConfig+0x124>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d108      	bne.n	8009426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a2f      	ldr	r2, [pc, #188]	; (80094e8 <TIM_Base_SetConfig+0x114>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d01f      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009434:	d01b      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a2c      	ldr	r2, [pc, #176]	; (80094ec <TIM_Base_SetConfig+0x118>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d017      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2b      	ldr	r2, [pc, #172]	; (80094f0 <TIM_Base_SetConfig+0x11c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d013      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2a      	ldr	r2, [pc, #168]	; (80094f4 <TIM_Base_SetConfig+0x120>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00f      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a29      	ldr	r2, [pc, #164]	; (80094f8 <TIM_Base_SetConfig+0x124>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00b      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a28      	ldr	r2, [pc, #160]	; (80094fc <TIM_Base_SetConfig+0x128>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d007      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a27      	ldr	r2, [pc, #156]	; (8009500 <TIM_Base_SetConfig+0x12c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d003      	beq.n	800946e <TIM_Base_SetConfig+0x9a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a26      	ldr	r2, [pc, #152]	; (8009504 <TIM_Base_SetConfig+0x130>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d108      	bne.n	8009480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <TIM_Base_SetConfig+0x114>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00f      	beq.n	80094cc <TIM_Base_SetConfig+0xf8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a12      	ldr	r2, [pc, #72]	; (80094f8 <TIM_Base_SetConfig+0x124>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_Base_SetConfig+0xf8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a11      	ldr	r2, [pc, #68]	; (80094fc <TIM_Base_SetConfig+0x128>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_Base_SetConfig+0xf8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <TIM_Base_SetConfig+0x12c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_Base_SetConfig+0xf8>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a0f      	ldr	r2, [pc, #60]	; (8009504 <TIM_Base_SetConfig+0x130>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d103      	bne.n	80094d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	691a      	ldr	r2, [r3, #16]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	615a      	str	r2, [r3, #20]
}
 80094da:	bf00      	nop
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800
 80094f4:	40000c00 	.word	0x40000c00
 80094f8:	40010400 	.word	0x40010400
 80094fc:	40014000 	.word	0x40014000
 8009500:	40014400 	.word	0x40014400
 8009504:	40014800 	.word	0x40014800

08009508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800951c:	2302      	movs	r3, #2
 800951e:	e068      	b.n	80095f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a2e      	ldr	r2, [pc, #184]	; (8009600 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d004      	beq.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a2d      	ldr	r2, [pc, #180]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d108      	bne.n	8009566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800955a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a1e      	ldr	r2, [pc, #120]	; (8009600 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01d      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009592:	d018      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d013      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a1a      	ldr	r2, [pc, #104]	; (800960c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00e      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a18      	ldr	r2, [pc, #96]	; (8009610 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d009      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a13      	ldr	r2, [pc, #76]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d004      	beq.n	80095c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a14      	ldr	r2, [pc, #80]	; (8009614 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d10c      	bne.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40010400 	.word	0x40010400
 8009608:	40000400 	.word	0x40000400
 800960c:	40000800 	.word	0x40000800
 8009610:	40000c00 	.word	0x40000c00
 8009614:	40001800 	.word	0x40001800

08009618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e042      	b.n	80096ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7f8 fb73 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2224      	movs	r2, #36	; 0x24
 8009682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0201 	bic.w	r2, r2, #1
 8009694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fc3a 	bl	8009f10 <UART_SetConfig>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e022      	b.n	80096ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f002 fdac 	bl	800c20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 fe33 	bl	800c350 <UART_CheckIdleState>
 80096ea:	4603      	mov	r3, r0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4613      	mov	r3, r2
 8009702:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970a:	2b20      	cmp	r3, #32
 800970c:	f040 8083 	bne.w	8009816 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <HAL_UART_Transmit+0x28>
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e07b      	b.n	8009818 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UART_Transmit+0x3a>
 800972a:	2302      	movs	r3, #2
 800972c:	e074      	b.n	8009818 <HAL_UART_Transmit+0x124>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2221      	movs	r2, #33	; 0x21
 8009742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009746:	f7f8 fe7b 	bl	8002440 <HAL_GetTick>
 800974a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009764:	d108      	bne.n	8009778 <HAL_UART_Transmit+0x84>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d104      	bne.n	8009778 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	e003      	b.n	8009780 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009780:	e02c      	b.n	80097dc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f002 fe27 	bl	800c3e0 <UART_WaitOnFlagUntilTimeout>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e03d      	b.n	8009818 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10b      	bne.n	80097ba <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	3302      	adds	r3, #2
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	e007      	b.n	80097ca <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	781a      	ldrb	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	3301      	adds	r3, #1
 80097c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1cc      	bne.n	8009782 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2200      	movs	r2, #0
 80097f0:	2140      	movs	r1, #64	; 0x40
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f002 fdf4 	bl	800c3e0 <UART_WaitOnFlagUntilTimeout>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e00a      	b.n	8009818 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e000      	b.n	8009818 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009816:	2302      	movs	r3, #2
  }
}
 8009818:	4618      	mov	r0, r3
 800981a:	3720      	adds	r7, #32
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009834:	2b20      	cmp	r3, #32
 8009836:	d168      	bne.n	800990a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_UART_Transmit_IT+0x24>
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e061      	b.n	800990c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_UART_Transmit_IT+0x36>
 8009852:	2302      	movs	r3, #2
 8009854:	e05a      	b.n	800990c <HAL_UART_Transmit_IT+0xec>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	88fa      	ldrh	r2, [r7, #6]
 8009870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2221      	movs	r2, #33	; 0x21
 8009886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009892:	d11c      	bne.n	80098ce <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800989c:	d107      	bne.n	80098ae <HAL_UART_Transmit_IT+0x8e>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d103      	bne.n	80098ae <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <HAL_UART_Transmit_IT+0xf8>)
 80098aa:	671a      	str	r2, [r3, #112]	; 0x70
 80098ac:	e002      	b.n	80098b4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a1a      	ldr	r2, [pc, #104]	; (800991c <HAL_UART_Transmit_IT+0xfc>)
 80098b2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	e01b      	b.n	8009906 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d6:	d107      	bne.n	80098e8 <HAL_UART_Transmit_IT+0xc8>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a0f      	ldr	r2, [pc, #60]	; (8009920 <HAL_UART_Transmit_IT+0x100>)
 80098e4:	671a      	str	r2, [r3, #112]	; 0x70
 80098e6:	e002      	b.n	80098ee <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <HAL_UART_Transmit_IT+0x104>)
 80098ec:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009904:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e000      	b.n	800990c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800990a:	2302      	movs	r3, #2
  }
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	0800c81f 	.word	0x0800c81f
 800991c:	0800c785 	.word	0x0800c785
 8009920:	0800c707 	.word	0x0800c707
 8009924:	0800c693 	.word	0x0800c693

08009928 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800993c:	2b20      	cmp	r3, #32
 800993e:	f040 80bc 	bne.w	8009aba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <HAL_UART_Receive_IT+0x26>
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e0b4      	b.n	8009abc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_UART_Receive_IT+0x38>
 800995c:	2302      	movs	r3, #2
 800995e:	e0ad      	b.n	8009abc <HAL_UART_Receive_IT+0x194>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	88fa      	ldrh	r2, [r7, #6]
 800997a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998c:	d10e      	bne.n	80099ac <HAL_UART_Receive_IT+0x84>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d105      	bne.n	80099a2 <HAL_UART_Receive_IT+0x7a>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f240 12ff 	movw	r2, #511	; 0x1ff
 800999c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099a0:	e02d      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099aa:	e028      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10d      	bne.n	80099d0 <HAL_UART_Receive_IT+0xa8>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <HAL_UART_Receive_IT+0x9e>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	22ff      	movs	r2, #255	; 0xff
 80099c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099c4:	e01b      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	227f      	movs	r2, #127	; 0x7f
 80099ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ce:	e016      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099d8:	d10d      	bne.n	80099f6 <HAL_UART_Receive_IT+0xce>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <HAL_UART_Receive_IT+0xc4>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	227f      	movs	r2, #127	; 0x7f
 80099e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ea:	e008      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	223f      	movs	r2, #63	; 0x3f
 80099f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099f4:	e003      	b.n	80099fe <HAL_UART_Receive_IT+0xd6>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2222      	movs	r2, #34	; 0x22
 8009a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f042 0201 	orr.w	r2, r2, #1
 8009a1c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a26:	d12a      	bne.n	8009a7e <HAL_UART_Receive_IT+0x156>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a2e:	88fa      	ldrh	r2, [r7, #6]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d324      	bcc.n	8009a7e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3c:	d107      	bne.n	8009a4e <HAL_UART_Receive_IT+0x126>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <HAL_UART_Receive_IT+0x1a0>)
 8009a4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a4c:	e002      	b.n	8009a54 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4a1e      	ldr	r2, [pc, #120]	; (8009acc <HAL_UART_Receive_IT+0x1a4>)
 8009a52:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a6a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009a7a:	609a      	str	r2, [r3, #8]
 8009a7c:	e01b      	b.n	8009ab6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a86:	d107      	bne.n	8009a98 <HAL_UART_Receive_IT+0x170>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d103      	bne.n	8009a98 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4a0f      	ldr	r2, [pc, #60]	; (8009ad0 <HAL_UART_Receive_IT+0x1a8>)
 8009a94:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a96:	e002      	b.n	8009a9e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a0e      	ldr	r2, [pc, #56]	; (8009ad4 <HAL_UART_Receive_IT+0x1ac>)
 8009a9c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009ab4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e000      	b.n	8009abc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009aba:	2302      	movs	r3, #2
  }
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	0800cb55 	.word	0x0800cb55
 8009acc:	0800ca4d 	.word	0x0800ca4d
 8009ad0:	0800c9a1 	.word	0x0800c9a1
 8009ad4:	0800c8f7 	.word	0x0800c8f7

08009ad8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d170      	bne.n	8009bd2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_UART_Receive_DMA+0x24>
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e069      	b.n	8009bd4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Receive_DMA+0x36>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e062      	b.n	8009bd4 <HAL_UART_Receive_DMA+0xfc>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2222      	movs	r2, #34	; 0x22
 8009b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d02c      	beq.n	8009b96 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b40:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <HAL_UART_Receive_DMA+0x104>)
 8009b42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b48:	4a25      	ldr	r2, [pc, #148]	; (8009be0 <HAL_UART_Receive_DMA+0x108>)
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b50:	4a24      	ldr	r2, [pc, #144]	; (8009be4 <HAL_UART_Receive_DMA+0x10c>)
 8009b52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b58:	2200      	movs	r2, #0
 8009b5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3324      	adds	r3, #36	; 0x24
 8009b66:	4619      	mov	r1, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	f7fa faa4 	bl	80040bc <HAL_DMA_Start_IT>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00d      	beq.n	8009b96 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e01e      	b.n	8009bd4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bac:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0201 	orr.w	r2, r2, #1
 8009bbc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bcc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e000      	b.n	8009bd4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009bd2:	2302      	movs	r3, #2
  }
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	0800c565 	.word	0x0800c565
 8009be0:	0800c5cb 	.word	0x0800c5cb
 8009be4:	0800c5e7 	.word	0x0800c5e7

08009be8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c0e:	4013      	ands	r3, r2
 8009c10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d118      	bne.n	8009c4a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 8145 	beq.w	8009eca <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
      }
      return;
 8009c48:	e13f      	b.n	8009eca <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 80e8 	beq.w	8009e22 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4ba1      	ldr	r3, [pc, #644]	; (8009edc <HAL_UART_IRQHandler+0x2f4>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d105      	bne.n	8009c68 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	4ba0      	ldr	r3, [pc, #640]	; (8009ee0 <HAL_UART_IRQHandler+0x2f8>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80dd 	beq.w	8009e22 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d010      	beq.n	8009c94 <HAL_UART_IRQHandler+0xac>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2201      	movs	r2, #1
 8009c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8a:	f043 0201 	orr.w	r2, r3, #1
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d010      	beq.n	8009cc0 <HAL_UART_IRQHandler+0xd8>
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2202      	movs	r2, #2
 8009cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb6:	f043 0204 	orr.w	r2, r3, #4
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d010      	beq.n	8009cec <HAL_UART_IRQHandler+0x104>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2204      	movs	r2, #4
 8009cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	f043 0202 	orr.w	r2, r3, #2
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4b76      	ldr	r3, [pc, #472]	; (8009edc <HAL_UART_IRQHandler+0x2f4>)
 8009d04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	f043 0208 	orr.w	r2, r3, #8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d011      	beq.n	8009d50 <HAL_UART_IRQHandler+0x168>
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d46:	f043 0220 	orr.w	r2, r3, #32
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 80b9 	beq.w	8009ece <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d011      	beq.n	8009d8a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9c:	2b40      	cmp	r3, #64	; 0x40
 8009d9e:	d004      	beq.n	8009daa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d031      	beq.n	8009e0e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f002 fbb6 	bl	800c51c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b40      	cmp	r3, #64	; 0x40
 8009dbc:	d123      	bne.n	8009e06 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dcc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d013      	beq.n	8009dfe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dda:	4a42      	ldr	r2, [pc, #264]	; (8009ee4 <HAL_UART_IRQHandler+0x2fc>)
 8009ddc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fa fbd4 	bl	8004590 <HAL_DMA_Abort_IT>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d017      	beq.n	8009e1e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dfc:	e00f      	b.n	8009e1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f87c 	bl	8009efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e04:	e00b      	b.n	8009e1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f878 	bl	8009efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0c:	e007      	b.n	8009e1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f874 	bl	8009efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009e1c:	e057      	b.n	8009ece <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1e:	bf00      	nop
    return;
 8009e20:	e055      	b.n	8009ece <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00d      	beq.n	8009e48 <HAL_UART_IRQHandler+0x260>
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d008      	beq.n	8009e48 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f002 ff0b 	bl	800cc5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e46:	e045      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d012      	beq.n	8009e78 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d008      	beq.n	8009e78 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d031      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	4798      	blx	r3
    }
    return;
 8009e76:	e02c      	b.n	8009ed2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <HAL_UART_IRQHandler+0x2ac>
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f002 fd18 	bl	800c8c2 <UART_EndTransmit_IT>
    return;
 8009e92:	e01f      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d008      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x2c8>
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f002 feeb 	bl	800cc84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eae:	e011      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00c      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	da09      	bge.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f002 fed5 	bl	800cc70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ec6:	bf00      	nop
 8009ec8:	e004      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009eca:	bf00      	nop
 8009ecc:	e002      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009ece:	bf00      	nop
 8009ed0:	e000      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009ed2:	bf00      	nop
  }
}
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	10000001 	.word	0x10000001
 8009ee0:	04000120 	.word	0x04000120
 8009ee4:	0800c667 	.word	0x0800c667

08009ee8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f14:	b090      	sub	sp, #64	; 0x40
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f46:	4313      	orrs	r3, r2
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	4bc1      	ldr	r3, [pc, #772]	; (800a258 <UART_SetConfig+0x348>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4ab7      	ldr	r2, [pc, #732]	; (800a25c <UART_SetConfig+0x34c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d004      	beq.n	8009f8e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	4bb2      	ldr	r3, [pc, #712]	; (800a260 <UART_SetConfig+0x350>)
 8009f96:	4013      	ands	r3, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	f023 010f 	bic.w	r1, r3, #15
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4aa9      	ldr	r2, [pc, #676]	; (800a264 <UART_SetConfig+0x354>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d177      	bne.n	800a0b2 <UART_SetConfig+0x1a2>
 8009fc2:	4ba9      	ldr	r3, [pc, #676]	; (800a268 <UART_SetConfig+0x358>)
 8009fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fca:	2b28      	cmp	r3, #40	; 0x28
 8009fcc:	d86c      	bhi.n	800a0a8 <UART_SetConfig+0x198>
 8009fce:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <UART_SetConfig+0xc4>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	0800a079 	.word	0x0800a079
 8009fd8:	0800a0a9 	.word	0x0800a0a9
 8009fdc:	0800a0a9 	.word	0x0800a0a9
 8009fe0:	0800a0a9 	.word	0x0800a0a9
 8009fe4:	0800a0a9 	.word	0x0800a0a9
 8009fe8:	0800a0a9 	.word	0x0800a0a9
 8009fec:	0800a0a9 	.word	0x0800a0a9
 8009ff0:	0800a0a9 	.word	0x0800a0a9
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a0a9 	.word	0x0800a0a9
 8009ffc:	0800a0a9 	.word	0x0800a0a9
 800a000:	0800a0a9 	.word	0x0800a0a9
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0a9 	.word	0x0800a0a9
 800a00c:	0800a0a9 	.word	0x0800a0a9
 800a010:	0800a0a9 	.word	0x0800a0a9
 800a014:	0800a089 	.word	0x0800a089
 800a018:	0800a0a9 	.word	0x0800a0a9
 800a01c:	0800a0a9 	.word	0x0800a0a9
 800a020:	0800a0a9 	.word	0x0800a0a9
 800a024:	0800a0a9 	.word	0x0800a0a9
 800a028:	0800a0a9 	.word	0x0800a0a9
 800a02c:	0800a0a9 	.word	0x0800a0a9
 800a030:	0800a0a9 	.word	0x0800a0a9
 800a034:	0800a091 	.word	0x0800a091
 800a038:	0800a0a9 	.word	0x0800a0a9
 800a03c:	0800a0a9 	.word	0x0800a0a9
 800a040:	0800a0a9 	.word	0x0800a0a9
 800a044:	0800a0a9 	.word	0x0800a0a9
 800a048:	0800a0a9 	.word	0x0800a0a9
 800a04c:	0800a0a9 	.word	0x0800a0a9
 800a050:	0800a0a9 	.word	0x0800a0a9
 800a054:	0800a099 	.word	0x0800a099
 800a058:	0800a0a9 	.word	0x0800a0a9
 800a05c:	0800a0a9 	.word	0x0800a0a9
 800a060:	0800a0a9 	.word	0x0800a0a9
 800a064:	0800a0a9 	.word	0x0800a0a9
 800a068:	0800a0a9 	.word	0x0800a0a9
 800a06c:	0800a0a9 	.word	0x0800a0a9
 800a070:	0800a0a9 	.word	0x0800a0a9
 800a074:	0800a0a1 	.word	0x0800a0a1
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a07e:	e233      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a080:	2304      	movs	r3, #4
 800a082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a086:	e22f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a088:	2308      	movs	r3, #8
 800a08a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a08e:	e22b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a090:	2310      	movs	r3, #16
 800a092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a096:	e227      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a098:	2320      	movs	r3, #32
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	e223      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a0a0:	2340      	movs	r3, #64	; 0x40
 800a0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0a6:	e21f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a0a8:	2380      	movs	r3, #128	; 0x80
 800a0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ae:	bf00      	nop
 800a0b0:	e21a      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a6d      	ldr	r2, [pc, #436]	; (800a26c <UART_SetConfig+0x35c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d132      	bne.n	800a122 <UART_SetConfig+0x212>
 800a0bc:	4b6a      	ldr	r3, [pc, #424]	; (800a268 <UART_SetConfig+0x358>)
 800a0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	2b05      	cmp	r3, #5
 800a0c6:	d827      	bhi.n	800a118 <UART_SetConfig+0x208>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x1c0>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
 800a0d8:	0800a0f9 	.word	0x0800a0f9
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ee:	e1fb      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0f6:	e1f7      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0fe:	e1f3      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a106:	e1ef      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a108:	2320      	movs	r3, #32
 800a10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a10e:	e1eb      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a116:	e1e7      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a11e:	bf00      	nop
 800a120:	e1e2      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a52      	ldr	r2, [pc, #328]	; (800a270 <UART_SetConfig+0x360>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d132      	bne.n	800a192 <UART_SetConfig+0x282>
 800a12c:	4b4e      	ldr	r3, [pc, #312]	; (800a268 <UART_SetConfig+0x358>)
 800a12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a130:	f003 0307 	and.w	r3, r3, #7
 800a134:	2b05      	cmp	r3, #5
 800a136:	d827      	bhi.n	800a188 <UART_SetConfig+0x278>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x230>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a159 	.word	0x0800a159
 800a144:	0800a161 	.word	0x0800a161
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a15e:	e1c3      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a166:	e1bf      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a16e:	e1bb      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a176:	e1b7      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	e1b3      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a180:	2340      	movs	r3, #64	; 0x40
 800a182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a186:	e1af      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	bf00      	nop
 800a190:	e1aa      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a37      	ldr	r2, [pc, #220]	; (800a274 <UART_SetConfig+0x364>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d132      	bne.n	800a202 <UART_SetConfig+0x2f2>
 800a19c:	4b32      	ldr	r3, [pc, #200]	; (800a268 <UART_SetConfig+0x358>)
 800a19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d827      	bhi.n	800a1f8 <UART_SetConfig+0x2e8>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <UART_SetConfig+0x2a0>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1c9 	.word	0x0800a1c9
 800a1b4:	0800a1d1 	.word	0x0800a1d1
 800a1b8:	0800a1d9 	.word	0x0800a1d9
 800a1bc:	0800a1e1 	.word	0x0800a1e1
 800a1c0:	0800a1e9 	.word	0x0800a1e9
 800a1c4:	0800a1f1 	.word	0x0800a1f1
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ce:	e18b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1d6:	e187      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1d8:	2308      	movs	r3, #8
 800a1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1de:	e183      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1e6:	e17f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ee:	e17b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1f6:	e177      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a1f8:	2380      	movs	r3, #128	; 0x80
 800a1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1fe:	bf00      	nop
 800a200:	e172      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <UART_SetConfig+0x368>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d144      	bne.n	800a296 <UART_SetConfig+0x386>
 800a20c:	4b16      	ldr	r3, [pc, #88]	; (800a268 <UART_SetConfig+0x358>)
 800a20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	2b05      	cmp	r3, #5
 800a216:	d839      	bhi.n	800a28c <UART_SetConfig+0x37c>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <UART_SetConfig+0x310>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a239 	.word	0x0800a239
 800a224:	0800a241 	.word	0x0800a241
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a251 	.word	0x0800a251
 800a230:	0800a27d 	.word	0x0800a27d
 800a234:	0800a285 	.word	0x0800a285
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a23e:	e153      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a240:	2304      	movs	r3, #4
 800a242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a246:	e14f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a248:	2308      	movs	r3, #8
 800a24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a24e:	e14b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a250:	2310      	movs	r3, #16
 800a252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a256:	e147      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a258:	cfff69f3 	.word	0xcfff69f3
 800a25c:	58000c00 	.word	0x58000c00
 800a260:	11fff4ff 	.word	0x11fff4ff
 800a264:	40011000 	.word	0x40011000
 800a268:	58024400 	.word	0x58024400
 800a26c:	40004400 	.word	0x40004400
 800a270:	40004800 	.word	0x40004800
 800a274:	40004c00 	.word	0x40004c00
 800a278:	40005000 	.word	0x40005000
 800a27c:	2320      	movs	r3, #32
 800a27e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a282:	e131      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a284:	2340      	movs	r3, #64	; 0x40
 800a286:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a28a:	e12d      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a28c:	2380      	movs	r3, #128	; 0x80
 800a28e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a292:	bf00      	nop
 800a294:	e128      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4ac3      	ldr	r2, [pc, #780]	; (800a5a8 <UART_SetConfig+0x698>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d178      	bne.n	800a392 <UART_SetConfig+0x482>
 800a2a0:	4bc2      	ldr	r3, [pc, #776]	; (800a5ac <UART_SetConfig+0x69c>)
 800a2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2a8:	2b28      	cmp	r3, #40	; 0x28
 800a2aa:	d86d      	bhi.n	800a388 <UART_SetConfig+0x478>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0x3a4>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a359 	.word	0x0800a359
 800a2b8:	0800a389 	.word	0x0800a389
 800a2bc:	0800a389 	.word	0x0800a389
 800a2c0:	0800a389 	.word	0x0800a389
 800a2c4:	0800a389 	.word	0x0800a389
 800a2c8:	0800a389 	.word	0x0800a389
 800a2cc:	0800a389 	.word	0x0800a389
 800a2d0:	0800a389 	.word	0x0800a389
 800a2d4:	0800a361 	.word	0x0800a361
 800a2d8:	0800a389 	.word	0x0800a389
 800a2dc:	0800a389 	.word	0x0800a389
 800a2e0:	0800a389 	.word	0x0800a389
 800a2e4:	0800a389 	.word	0x0800a389
 800a2e8:	0800a389 	.word	0x0800a389
 800a2ec:	0800a389 	.word	0x0800a389
 800a2f0:	0800a389 	.word	0x0800a389
 800a2f4:	0800a369 	.word	0x0800a369
 800a2f8:	0800a389 	.word	0x0800a389
 800a2fc:	0800a389 	.word	0x0800a389
 800a300:	0800a389 	.word	0x0800a389
 800a304:	0800a389 	.word	0x0800a389
 800a308:	0800a389 	.word	0x0800a389
 800a30c:	0800a389 	.word	0x0800a389
 800a310:	0800a389 	.word	0x0800a389
 800a314:	0800a371 	.word	0x0800a371
 800a318:	0800a389 	.word	0x0800a389
 800a31c:	0800a389 	.word	0x0800a389
 800a320:	0800a389 	.word	0x0800a389
 800a324:	0800a389 	.word	0x0800a389
 800a328:	0800a389 	.word	0x0800a389
 800a32c:	0800a389 	.word	0x0800a389
 800a330:	0800a389 	.word	0x0800a389
 800a334:	0800a379 	.word	0x0800a379
 800a338:	0800a389 	.word	0x0800a389
 800a33c:	0800a389 	.word	0x0800a389
 800a340:	0800a389 	.word	0x0800a389
 800a344:	0800a389 	.word	0x0800a389
 800a348:	0800a389 	.word	0x0800a389
 800a34c:	0800a389 	.word	0x0800a389
 800a350:	0800a389 	.word	0x0800a389
 800a354:	0800a381 	.word	0x0800a381
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a35e:	e0c3      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a366:	e0bf      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a36e:	e0bb      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a376:	e0b7      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a378:	2320      	movs	r3, #32
 800a37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a37e:	e0b3      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a386:	e0af      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a388:	2380      	movs	r3, #128	; 0x80
 800a38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a38e:	bf00      	nop
 800a390:	e0aa      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a86      	ldr	r2, [pc, #536]	; (800a5b0 <UART_SetConfig+0x6a0>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d132      	bne.n	800a402 <UART_SetConfig+0x4f2>
 800a39c:	4b83      	ldr	r3, [pc, #524]	; (800a5ac <UART_SetConfig+0x69c>)
 800a39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a0:	f003 0307 	and.w	r3, r3, #7
 800a3a4:	2b05      	cmp	r3, #5
 800a3a6:	d827      	bhi.n	800a3f8 <UART_SetConfig+0x4e8>
 800a3a8:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <UART_SetConfig+0x4a0>)
 800a3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ae:	bf00      	nop
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3d1 	.word	0x0800a3d1
 800a3b8:	0800a3d9 	.word	0x0800a3d9
 800a3bc:	0800a3e1 	.word	0x0800a3e1
 800a3c0:	0800a3e9 	.word	0x0800a3e9
 800a3c4:	0800a3f1 	.word	0x0800a3f1
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ce:	e08b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3d6:	e087      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3de:	e083      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3e6:	e07f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ee:	e07b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3f0:	2340      	movs	r3, #64	; 0x40
 800a3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3f6:	e077      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a3f8:	2380      	movs	r3, #128	; 0x80
 800a3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3fe:	bf00      	nop
 800a400:	e072      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a6b      	ldr	r2, [pc, #428]	; (800a5b4 <UART_SetConfig+0x6a4>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d132      	bne.n	800a472 <UART_SetConfig+0x562>
 800a40c:	4b67      	ldr	r3, [pc, #412]	; (800a5ac <UART_SetConfig+0x69c>)
 800a40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	2b05      	cmp	r3, #5
 800a416:	d827      	bhi.n	800a468 <UART_SetConfig+0x558>
 800a418:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <UART_SetConfig+0x510>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a439 	.word	0x0800a439
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a449 	.word	0x0800a449
 800a42c:	0800a451 	.word	0x0800a451
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a461 	.word	0x0800a461
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a43e:	e053      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a446:	e04f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a44e:	e04b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a456:	e047      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a458:	2320      	movs	r3, #32
 800a45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a45e:	e043      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a466:	e03f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a468:	2380      	movs	r3, #128	; 0x80
 800a46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a46e:	bf00      	nop
 800a470:	e03a      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a50      	ldr	r2, [pc, #320]	; (800a5b8 <UART_SetConfig+0x6a8>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d132      	bne.n	800a4e2 <UART_SetConfig+0x5d2>
 800a47c:	4b4b      	ldr	r3, [pc, #300]	; (800a5ac <UART_SetConfig+0x69c>)
 800a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a480:	f003 0307 	and.w	r3, r3, #7
 800a484:	2b05      	cmp	r3, #5
 800a486:	d827      	bhi.n	800a4d8 <UART_SetConfig+0x5c8>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x580>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4a9 	.word	0x0800a4a9
 800a494:	0800a4b1 	.word	0x0800a4b1
 800a498:	0800a4b9 	.word	0x0800a4b9
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ae:	e01b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4b6:	e017      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4b8:	2308      	movs	r3, #8
 800a4ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4be:	e013      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4c6:	e00f      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ce:	e00b      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4d0:	2340      	movs	r3, #64	; 0x40
 800a4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4d6:	e007      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4de:	bf00      	nop
 800a4e0:	e002      	b.n	800a4e8 <UART_SetConfig+0x5d8>
 800a4e2:	2380      	movs	r3, #128	; 0x80
 800a4e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a32      	ldr	r2, [pc, #200]	; (800a5b8 <UART_SetConfig+0x6a8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	f040 86f7 	bne.w	800b2e2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	f000 80c0 	beq.w	800a67e <UART_SetConfig+0x76e>
 800a4fe:	2b08      	cmp	r3, #8
 800a500:	dc04      	bgt.n	800a50c <UART_SetConfig+0x5fc>
 800a502:	2b02      	cmp	r3, #2
 800a504:	d00c      	beq.n	800a520 <UART_SetConfig+0x610>
 800a506:	2b04      	cmp	r3, #4
 800a508:	d065      	beq.n	800a5d6 <UART_SetConfig+0x6c6>
 800a50a:	e27a      	b.n	800aa02 <UART_SetConfig+0xaf2>
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	f000 81b0 	beq.w	800a872 <UART_SetConfig+0x962>
 800a512:	2b40      	cmp	r3, #64	; 0x40
 800a514:	f000 821e 	beq.w	800a954 <UART_SetConfig+0xa44>
 800a518:	2b10      	cmp	r3, #16
 800a51a:	f000 8104 	beq.w	800a726 <UART_SetConfig+0x816>
 800a51e:	e270      	b.n	800aa02 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a520:	f7fe f85c 	bl	80085dc <HAL_RCCEx_GetD3PCLK1Freq>
 800a524:	4602      	mov	r2, r0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d04e      	beq.n	800a5cc <UART_SetConfig+0x6bc>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b01      	cmp	r3, #1
 800a534:	d048      	beq.n	800a5c8 <UART_SetConfig+0x6b8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d042      	beq.n	800a5c4 <UART_SetConfig+0x6b4>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	2b03      	cmp	r3, #3
 800a544:	d03c      	beq.n	800a5c0 <UART_SetConfig+0x6b0>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d036      	beq.n	800a5bc <UART_SetConfig+0x6ac>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b05      	cmp	r3, #5
 800a554:	d026      	beq.n	800a5a4 <UART_SetConfig+0x694>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b06      	cmp	r3, #6
 800a55c:	d020      	beq.n	800a5a0 <UART_SetConfig+0x690>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b07      	cmp	r3, #7
 800a564:	d01a      	beq.n	800a59c <UART_SetConfig+0x68c>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	d014      	beq.n	800a598 <UART_SetConfig+0x688>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b09      	cmp	r3, #9
 800a574:	d00e      	beq.n	800a594 <UART_SetConfig+0x684>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b0a      	cmp	r3, #10
 800a57c:	d008      	beq.n	800a590 <UART_SetConfig+0x680>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	2b0b      	cmp	r3, #11
 800a584:	d102      	bne.n	800a58c <UART_SetConfig+0x67c>
 800a586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a58a:	e020      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a58c:	2301      	movs	r3, #1
 800a58e:	e01e      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	e01c      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	e01a      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a598:	2320      	movs	r3, #32
 800a59a:	e018      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a59c:	2310      	movs	r3, #16
 800a59e:	e016      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	e014      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5a4:	230a      	movs	r3, #10
 800a5a6:	e012      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5a8:	40011400 	.word	0x40011400
 800a5ac:	58024400 	.word	0x58024400
 800a5b0:	40007800 	.word	0x40007800
 800a5b4:	40007c00 	.word	0x40007c00
 800a5b8:	58000c00 	.word	0x58000c00
 800a5bc:	2308      	movs	r3, #8
 800a5be:	e006      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5c0:	2306      	movs	r3, #6
 800a5c2:	e004      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	e002      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e000      	b.n	800a5ce <UART_SetConfig+0x6be>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5d4:	e219      	b.n	800aa0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe f814 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d044      	beq.n	800a674 <UART_SetConfig+0x764>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d03e      	beq.n	800a670 <UART_SetConfig+0x760>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d038      	beq.n	800a66c <UART_SetConfig+0x75c>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d032      	beq.n	800a668 <UART_SetConfig+0x758>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b04      	cmp	r3, #4
 800a608:	d02c      	beq.n	800a664 <UART_SetConfig+0x754>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d026      	beq.n	800a660 <UART_SetConfig+0x750>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b06      	cmp	r3, #6
 800a618:	d020      	beq.n	800a65c <UART_SetConfig+0x74c>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b07      	cmp	r3, #7
 800a620:	d01a      	beq.n	800a658 <UART_SetConfig+0x748>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b08      	cmp	r3, #8
 800a628:	d014      	beq.n	800a654 <UART_SetConfig+0x744>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d00e      	beq.n	800a650 <UART_SetConfig+0x740>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b0a      	cmp	r3, #10
 800a638:	d008      	beq.n	800a64c <UART_SetConfig+0x73c>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b0b      	cmp	r3, #11
 800a640:	d102      	bne.n	800a648 <UART_SetConfig+0x738>
 800a642:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a646:	e016      	b.n	800a676 <UART_SetConfig+0x766>
 800a648:	2301      	movs	r3, #1
 800a64a:	e014      	b.n	800a676 <UART_SetConfig+0x766>
 800a64c:	2380      	movs	r3, #128	; 0x80
 800a64e:	e012      	b.n	800a676 <UART_SetConfig+0x766>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	e010      	b.n	800a676 <UART_SetConfig+0x766>
 800a654:	2320      	movs	r3, #32
 800a656:	e00e      	b.n	800a676 <UART_SetConfig+0x766>
 800a658:	2310      	movs	r3, #16
 800a65a:	e00c      	b.n	800a676 <UART_SetConfig+0x766>
 800a65c:	230c      	movs	r3, #12
 800a65e:	e00a      	b.n	800a676 <UART_SetConfig+0x766>
 800a660:	230a      	movs	r3, #10
 800a662:	e008      	b.n	800a676 <UART_SetConfig+0x766>
 800a664:	2308      	movs	r3, #8
 800a666:	e006      	b.n	800a676 <UART_SetConfig+0x766>
 800a668:	2306      	movs	r3, #6
 800a66a:	e004      	b.n	800a676 <UART_SetConfig+0x766>
 800a66c:	2304      	movs	r3, #4
 800a66e:	e002      	b.n	800a676 <UART_SetConfig+0x766>
 800a670:	2302      	movs	r3, #2
 800a672:	e000      	b.n	800a676 <UART_SetConfig+0x766>
 800a674:	2301      	movs	r3, #1
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a67c:	e1c5      	b.n	800aa0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67e:	f107 030c 	add.w	r3, r7, #12
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f90c 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d044      	beq.n	800a71c <UART_SetConfig+0x80c>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b01      	cmp	r3, #1
 800a698:	d03e      	beq.n	800a718 <UART_SetConfig+0x808>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d038      	beq.n	800a714 <UART_SetConfig+0x804>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d032      	beq.n	800a710 <UART_SetConfig+0x800>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d02c      	beq.n	800a70c <UART_SetConfig+0x7fc>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d026      	beq.n	800a708 <UART_SetConfig+0x7f8>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	d020      	beq.n	800a704 <UART_SetConfig+0x7f4>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b07      	cmp	r3, #7
 800a6c8:	d01a      	beq.n	800a700 <UART_SetConfig+0x7f0>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d014      	beq.n	800a6fc <UART_SetConfig+0x7ec>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d00e      	beq.n	800a6f8 <UART_SetConfig+0x7e8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b0a      	cmp	r3, #10
 800a6e0:	d008      	beq.n	800a6f4 <UART_SetConfig+0x7e4>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b0b      	cmp	r3, #11
 800a6e8:	d102      	bne.n	800a6f0 <UART_SetConfig+0x7e0>
 800a6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ee:	e016      	b.n	800a71e <UART_SetConfig+0x80e>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e014      	b.n	800a71e <UART_SetConfig+0x80e>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	e012      	b.n	800a71e <UART_SetConfig+0x80e>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	e010      	b.n	800a71e <UART_SetConfig+0x80e>
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	e00e      	b.n	800a71e <UART_SetConfig+0x80e>
 800a700:	2310      	movs	r3, #16
 800a702:	e00c      	b.n	800a71e <UART_SetConfig+0x80e>
 800a704:	230c      	movs	r3, #12
 800a706:	e00a      	b.n	800a71e <UART_SetConfig+0x80e>
 800a708:	230a      	movs	r3, #10
 800a70a:	e008      	b.n	800a71e <UART_SetConfig+0x80e>
 800a70c:	2308      	movs	r3, #8
 800a70e:	e006      	b.n	800a71e <UART_SetConfig+0x80e>
 800a710:	2306      	movs	r3, #6
 800a712:	e004      	b.n	800a71e <UART_SetConfig+0x80e>
 800a714:	2304      	movs	r3, #4
 800a716:	e002      	b.n	800a71e <UART_SetConfig+0x80e>
 800a718:	2302      	movs	r3, #2
 800a71a:	e000      	b.n	800a71e <UART_SetConfig+0x80e>
 800a71c:	2301      	movs	r3, #1
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a724:	e171      	b.n	800aa0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a726:	4b7a      	ldr	r3, [pc, #488]	; (800a910 <UART_SetConfig+0xa00>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d054      	beq.n	800a7dc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a732:	4b77      	ldr	r3, [pc, #476]	; (800a910 <UART_SetConfig+0xa00>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	08db      	lsrs	r3, r3, #3
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	4a75      	ldr	r2, [pc, #468]	; (800a914 <UART_SetConfig+0xa04>)
 800a73e:	40da      	lsrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d044      	beq.n	800a7d2 <UART_SetConfig+0x8c2>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d03e      	beq.n	800a7ce <UART_SetConfig+0x8be>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b02      	cmp	r3, #2
 800a756:	d038      	beq.n	800a7ca <UART_SetConfig+0x8ba>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d032      	beq.n	800a7c6 <UART_SetConfig+0x8b6>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b04      	cmp	r3, #4
 800a766:	d02c      	beq.n	800a7c2 <UART_SetConfig+0x8b2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b05      	cmp	r3, #5
 800a76e:	d026      	beq.n	800a7be <UART_SetConfig+0x8ae>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b06      	cmp	r3, #6
 800a776:	d020      	beq.n	800a7ba <UART_SetConfig+0x8aa>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b07      	cmp	r3, #7
 800a77e:	d01a      	beq.n	800a7b6 <UART_SetConfig+0x8a6>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b08      	cmp	r3, #8
 800a786:	d014      	beq.n	800a7b2 <UART_SetConfig+0x8a2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b09      	cmp	r3, #9
 800a78e:	d00e      	beq.n	800a7ae <UART_SetConfig+0x89e>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b0a      	cmp	r3, #10
 800a796:	d008      	beq.n	800a7aa <UART_SetConfig+0x89a>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b0b      	cmp	r3, #11
 800a79e:	d102      	bne.n	800a7a6 <UART_SetConfig+0x896>
 800a7a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a4:	e016      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e014      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7aa:	2380      	movs	r3, #128	; 0x80
 800a7ac:	e012      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	e010      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7b2:	2320      	movs	r3, #32
 800a7b4:	e00e      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7b6:	2310      	movs	r3, #16
 800a7b8:	e00c      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	e00a      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7be:	230a      	movs	r3, #10
 800a7c0:	e008      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	e006      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7c6:	2306      	movs	r3, #6
 800a7c8:	e004      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7ca:	2304      	movs	r3, #4
 800a7cc:	e002      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e000      	b.n	800a7d4 <UART_SetConfig+0x8c4>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a7da:	e116      	b.n	800aa0a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d043      	beq.n	800a86c <UART_SetConfig+0x95c>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d03d      	beq.n	800a868 <UART_SetConfig+0x958>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d037      	beq.n	800a864 <UART_SetConfig+0x954>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d031      	beq.n	800a860 <UART_SetConfig+0x950>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b04      	cmp	r3, #4
 800a802:	d02b      	beq.n	800a85c <UART_SetConfig+0x94c>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d025      	beq.n	800a858 <UART_SetConfig+0x948>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b06      	cmp	r3, #6
 800a812:	d01f      	beq.n	800a854 <UART_SetConfig+0x944>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b07      	cmp	r3, #7
 800a81a:	d019      	beq.n	800a850 <UART_SetConfig+0x940>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b08      	cmp	r3, #8
 800a822:	d013      	beq.n	800a84c <UART_SetConfig+0x93c>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b09      	cmp	r3, #9
 800a82a:	d00d      	beq.n	800a848 <UART_SetConfig+0x938>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b0a      	cmp	r3, #10
 800a832:	d007      	beq.n	800a844 <UART_SetConfig+0x934>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	2b0b      	cmp	r3, #11
 800a83a:	d101      	bne.n	800a840 <UART_SetConfig+0x930>
 800a83c:	4b36      	ldr	r3, [pc, #216]	; (800a918 <UART_SetConfig+0xa08>)
 800a83e:	e016      	b.n	800a86e <UART_SetConfig+0x95e>
 800a840:	4b34      	ldr	r3, [pc, #208]	; (800a914 <UART_SetConfig+0xa04>)
 800a842:	e014      	b.n	800a86e <UART_SetConfig+0x95e>
 800a844:	4b35      	ldr	r3, [pc, #212]	; (800a91c <UART_SetConfig+0xa0c>)
 800a846:	e012      	b.n	800a86e <UART_SetConfig+0x95e>
 800a848:	4b35      	ldr	r3, [pc, #212]	; (800a920 <UART_SetConfig+0xa10>)
 800a84a:	e010      	b.n	800a86e <UART_SetConfig+0x95e>
 800a84c:	4b35      	ldr	r3, [pc, #212]	; (800a924 <UART_SetConfig+0xa14>)
 800a84e:	e00e      	b.n	800a86e <UART_SetConfig+0x95e>
 800a850:	4b35      	ldr	r3, [pc, #212]	; (800a928 <UART_SetConfig+0xa18>)
 800a852:	e00c      	b.n	800a86e <UART_SetConfig+0x95e>
 800a854:	4b35      	ldr	r3, [pc, #212]	; (800a92c <UART_SetConfig+0xa1c>)
 800a856:	e00a      	b.n	800a86e <UART_SetConfig+0x95e>
 800a858:	4b35      	ldr	r3, [pc, #212]	; (800a930 <UART_SetConfig+0xa20>)
 800a85a:	e008      	b.n	800a86e <UART_SetConfig+0x95e>
 800a85c:	4b35      	ldr	r3, [pc, #212]	; (800a934 <UART_SetConfig+0xa24>)
 800a85e:	e006      	b.n	800a86e <UART_SetConfig+0x95e>
 800a860:	4b35      	ldr	r3, [pc, #212]	; (800a938 <UART_SetConfig+0xa28>)
 800a862:	e004      	b.n	800a86e <UART_SetConfig+0x95e>
 800a864:	4b35      	ldr	r3, [pc, #212]	; (800a93c <UART_SetConfig+0xa2c>)
 800a866:	e002      	b.n	800a86e <UART_SetConfig+0x95e>
 800a868:	4b35      	ldr	r3, [pc, #212]	; (800a940 <UART_SetConfig+0xa30>)
 800a86a:	e000      	b.n	800a86e <UART_SetConfig+0x95e>
 800a86c:	4b29      	ldr	r3, [pc, #164]	; (800a914 <UART_SetConfig+0xa04>)
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a870:	e0cb      	b.n	800aa0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	d046      	beq.n	800a908 <UART_SetConfig+0x9f8>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d040      	beq.n	800a904 <UART_SetConfig+0x9f4>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b02      	cmp	r3, #2
 800a888:	d03a      	beq.n	800a900 <UART_SetConfig+0x9f0>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d034      	beq.n	800a8fc <UART_SetConfig+0x9ec>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b04      	cmp	r3, #4
 800a898:	d02e      	beq.n	800a8f8 <UART_SetConfig+0x9e8>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d028      	beq.n	800a8f4 <UART_SetConfig+0x9e4>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d022      	beq.n	800a8f0 <UART_SetConfig+0x9e0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d01c      	beq.n	800a8ec <UART_SetConfig+0x9dc>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	d016      	beq.n	800a8e8 <UART_SetConfig+0x9d8>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d00f      	beq.n	800a8e2 <UART_SetConfig+0x9d2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b0a      	cmp	r3, #10
 800a8c8:	d008      	beq.n	800a8dc <UART_SetConfig+0x9cc>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b0b      	cmp	r3, #11
 800a8d0:	d102      	bne.n	800a8d8 <UART_SetConfig+0x9c8>
 800a8d2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a8d6:	e018      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8d8:	4b13      	ldr	r3, [pc, #76]	; (800a928 <UART_SetConfig+0xa18>)
 800a8da:	e016      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8dc:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a8e0:	e013      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a8e6:	e010      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8e8:	4b16      	ldr	r3, [pc, #88]	; (800a944 <UART_SetConfig+0xa34>)
 800a8ea:	e00e      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <UART_SetConfig+0xa08>)
 800a8ee:	e00c      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8f0:	4b15      	ldr	r3, [pc, #84]	; (800a948 <UART_SetConfig+0xa38>)
 800a8f2:	e00a      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8f4:	4b15      	ldr	r3, [pc, #84]	; (800a94c <UART_SetConfig+0xa3c>)
 800a8f6:	e008      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8f8:	4b08      	ldr	r3, [pc, #32]	; (800a91c <UART_SetConfig+0xa0c>)
 800a8fa:	e006      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a8fc:	4b14      	ldr	r3, [pc, #80]	; (800a950 <UART_SetConfig+0xa40>)
 800a8fe:	e004      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <UART_SetConfig+0xa10>)
 800a902:	e002      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a904:	4b07      	ldr	r3, [pc, #28]	; (800a924 <UART_SetConfig+0xa14>)
 800a906:	e000      	b.n	800a90a <UART_SetConfig+0x9fa>
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <UART_SetConfig+0xa18>)
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90c:	e07d      	b.n	800aa0a <UART_SetConfig+0xafa>
 800a90e:	bf00      	nop
 800a910:	58024400 	.word	0x58024400
 800a914:	03d09000 	.word	0x03d09000
 800a918:	0003d090 	.word	0x0003d090
 800a91c:	0007a120 	.word	0x0007a120
 800a920:	000f4240 	.word	0x000f4240
 800a924:	001e8480 	.word	0x001e8480
 800a928:	003d0900 	.word	0x003d0900
 800a92c:	00516155 	.word	0x00516155
 800a930:	0061a800 	.word	0x0061a800
 800a934:	007a1200 	.word	0x007a1200
 800a938:	00a2c2aa 	.word	0x00a2c2aa
 800a93c:	00f42400 	.word	0x00f42400
 800a940:	01e84800 	.word	0x01e84800
 800a944:	0001e848 	.word	0x0001e848
 800a948:	00051615 	.word	0x00051615
 800a94c:	00061a80 	.word	0x00061a80
 800a950:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d04e      	beq.n	800a9fa <UART_SetConfig+0xaea>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2b01      	cmp	r3, #1
 800a962:	d047      	beq.n	800a9f4 <UART_SetConfig+0xae4>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d040      	beq.n	800a9ee <UART_SetConfig+0xade>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	2b03      	cmp	r3, #3
 800a972:	d039      	beq.n	800a9e8 <UART_SetConfig+0xad8>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d032      	beq.n	800a9e2 <UART_SetConfig+0xad2>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b05      	cmp	r3, #5
 800a982:	d02b      	beq.n	800a9dc <UART_SetConfig+0xacc>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b06      	cmp	r3, #6
 800a98a:	d024      	beq.n	800a9d6 <UART_SetConfig+0xac6>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b07      	cmp	r3, #7
 800a992:	d01d      	beq.n	800a9d0 <UART_SetConfig+0xac0>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d016      	beq.n	800a9ca <UART_SetConfig+0xaba>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b09      	cmp	r3, #9
 800a9a2:	d00f      	beq.n	800a9c4 <UART_SetConfig+0xab4>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b0a      	cmp	r3, #10
 800a9aa:	d008      	beq.n	800a9be <UART_SetConfig+0xaae>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b0b      	cmp	r3, #11
 800a9b2:	d101      	bne.n	800a9b8 <UART_SetConfig+0xaa8>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	e022      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9bc:	e01f      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c2:	e01c      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9c8:	e019      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ce:	e016      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9d4:	e013      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a9da:	e010      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9dc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a9e0:	e00d      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9e6:	e00a      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9e8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a9ec:	e007      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9f2:	e004      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9f8:	e001      	b.n	800a9fe <UART_SetConfig+0xaee>
 800a9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa00:	e003      	b.n	800aa0a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aa08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f001 83e8 	beq.w	800c1e2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	4613      	mov	r3, r2
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	4413      	add	r3, r2
 800aa1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d305      	bcc.n	800aa2e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d904      	bls.n	800aa38 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa34:	f001 bbd5 	b.w	800c1e2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800aa38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	f000 8154 	beq.w	800acea <UART_SetConfig+0xdda>
 800aa42:	2b08      	cmp	r3, #8
 800aa44:	dc06      	bgt.n	800aa54 <UART_SetConfig+0xb44>
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d00f      	beq.n	800aa6a <UART_SetConfig+0xb5a>
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	f000 80ac 	beq.w	800aba8 <UART_SetConfig+0xc98>
 800aa50:	f000 bc30 	b.w	800b2b4 <UART_SetConfig+0x13a4>
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	f000 832d 	beq.w	800b0b4 <UART_SetConfig+0x11a4>
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	f000 83a5 	beq.w	800b1aa <UART_SetConfig+0x129a>
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	f000 81e3 	beq.w	800ae2c <UART_SetConfig+0xf1c>
 800aa66:	f000 bc25 	b.w	800b2b4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa6a:	f7fd fdb7 	bl	80085dc <HAL_RCCEx_GetD3PCLK1Freq>
 800aa6e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	4618      	mov	r0, r3
 800aa74:	f04f 0100 	mov.w	r1, #0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d067      	beq.n	800ab50 <UART_SetConfig+0xc40>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d05e      	beq.n	800ab46 <UART_SetConfig+0xc36>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d055      	beq.n	800ab3c <UART_SetConfig+0xc2c>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d04c      	beq.n	800ab32 <UART_SetConfig+0xc22>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d043      	beq.n	800ab28 <UART_SetConfig+0xc18>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b05      	cmp	r3, #5
 800aaa6:	d03a      	beq.n	800ab1e <UART_SetConfig+0xc0e>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	2b06      	cmp	r3, #6
 800aaae:	d031      	beq.n	800ab14 <UART_SetConfig+0xc04>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b07      	cmp	r3, #7
 800aab6:	d028      	beq.n	800ab0a <UART_SetConfig+0xbfa>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d01f      	beq.n	800ab00 <UART_SetConfig+0xbf0>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	d016      	beq.n	800aaf6 <UART_SetConfig+0xbe6>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b0a      	cmp	r3, #10
 800aace:	d00d      	beq.n	800aaec <UART_SetConfig+0xbdc>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b0b      	cmp	r3, #11
 800aad6:	d104      	bne.n	800aae2 <UART_SetConfig+0xbd2>
 800aad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aadc:	f04f 0400 	mov.w	r4, #0
 800aae0:	e03a      	b.n	800ab58 <UART_SetConfig+0xc48>
 800aae2:	f04f 0301 	mov.w	r3, #1
 800aae6:	f04f 0400 	mov.w	r4, #0
 800aaea:	e035      	b.n	800ab58 <UART_SetConfig+0xc48>
 800aaec:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aaf0:	f04f 0400 	mov.w	r4, #0
 800aaf4:	e030      	b.n	800ab58 <UART_SetConfig+0xc48>
 800aaf6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aafa:	f04f 0400 	mov.w	r4, #0
 800aafe:	e02b      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab00:	f04f 0320 	mov.w	r3, #32
 800ab04:	f04f 0400 	mov.w	r4, #0
 800ab08:	e026      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab0a:	f04f 0310 	mov.w	r3, #16
 800ab0e:	f04f 0400 	mov.w	r4, #0
 800ab12:	e021      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab14:	f04f 030c 	mov.w	r3, #12
 800ab18:	f04f 0400 	mov.w	r4, #0
 800ab1c:	e01c      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab1e:	f04f 030a 	mov.w	r3, #10
 800ab22:	f04f 0400 	mov.w	r4, #0
 800ab26:	e017      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab28:	f04f 0308 	mov.w	r3, #8
 800ab2c:	f04f 0400 	mov.w	r4, #0
 800ab30:	e012      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab32:	f04f 0306 	mov.w	r3, #6
 800ab36:	f04f 0400 	mov.w	r4, #0
 800ab3a:	e00d      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab3c:	f04f 0304 	mov.w	r3, #4
 800ab40:	f04f 0400 	mov.w	r4, #0
 800ab44:	e008      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab46:	f04f 0302 	mov.w	r3, #2
 800ab4a:	f04f 0400 	mov.w	r4, #0
 800ab4e:	e003      	b.n	800ab58 <UART_SetConfig+0xc48>
 800ab50:	f04f 0301 	mov.w	r3, #1
 800ab54:	f04f 0400 	mov.w	r4, #0
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	f7f5 fbbc 	bl	80002d8 <__aeabi_uldivmod>
 800ab60:	4603      	mov	r3, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	4619      	mov	r1, r3
 800ab66:	4622      	mov	r2, r4
 800ab68:	f04f 0300 	mov.w	r3, #0
 800ab6c:	f04f 0400 	mov.w	r4, #0
 800ab70:	0214      	lsls	r4, r2, #8
 800ab72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ab76:	020b      	lsls	r3, r1, #8
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	6852      	ldr	r2, [r2, #4]
 800ab7c:	0852      	lsrs	r2, r2, #1
 800ab7e:	4611      	mov	r1, r2
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	eb13 0b01 	adds.w	fp, r3, r1
 800ab88:	eb44 0c02 	adc.w	ip, r4, r2
 800ab8c:	4658      	mov	r0, fp
 800ab8e:	4661      	mov	r1, ip
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f04f 0400 	mov.w	r4, #0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	4623      	mov	r3, r4
 800ab9c:	f7f5 fb9c 	bl	80002d8 <__aeabi_uldivmod>
 800aba0:	4603      	mov	r3, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aba6:	e389      	b.n	800b2bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aba8:	f107 0318 	add.w	r3, r7, #24
 800abac:	4618      	mov	r0, r3
 800abae:	f7fd fd2b 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f04f 0100 	mov.w	r1, #0
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d067      	beq.n	800ac92 <UART_SetConfig+0xd82>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d05e      	beq.n	800ac88 <UART_SetConfig+0xd78>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d055      	beq.n	800ac7e <UART_SetConfig+0xd6e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d04c      	beq.n	800ac74 <UART_SetConfig+0xd64>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d043      	beq.n	800ac6a <UART_SetConfig+0xd5a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b05      	cmp	r3, #5
 800abe8:	d03a      	beq.n	800ac60 <UART_SetConfig+0xd50>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2b06      	cmp	r3, #6
 800abf0:	d031      	beq.n	800ac56 <UART_SetConfig+0xd46>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b07      	cmp	r3, #7
 800abf8:	d028      	beq.n	800ac4c <UART_SetConfig+0xd3c>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d01f      	beq.n	800ac42 <UART_SetConfig+0xd32>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	2b09      	cmp	r3, #9
 800ac08:	d016      	beq.n	800ac38 <UART_SetConfig+0xd28>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b0a      	cmp	r3, #10
 800ac10:	d00d      	beq.n	800ac2e <UART_SetConfig+0xd1e>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b0b      	cmp	r3, #11
 800ac18:	d104      	bne.n	800ac24 <UART_SetConfig+0xd14>
 800ac1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac1e:	f04f 0400 	mov.w	r4, #0
 800ac22:	e03a      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac24:	f04f 0301 	mov.w	r3, #1
 800ac28:	f04f 0400 	mov.w	r4, #0
 800ac2c:	e035      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac32:	f04f 0400 	mov.w	r4, #0
 800ac36:	e030      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac38:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	e02b      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac42:	f04f 0320 	mov.w	r3, #32
 800ac46:	f04f 0400 	mov.w	r4, #0
 800ac4a:	e026      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac4c:	f04f 0310 	mov.w	r3, #16
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	e021      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac56:	f04f 030c 	mov.w	r3, #12
 800ac5a:	f04f 0400 	mov.w	r4, #0
 800ac5e:	e01c      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac60:	f04f 030a 	mov.w	r3, #10
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	e017      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac6a:	f04f 0308 	mov.w	r3, #8
 800ac6e:	f04f 0400 	mov.w	r4, #0
 800ac72:	e012      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac74:	f04f 0306 	mov.w	r3, #6
 800ac78:	f04f 0400 	mov.w	r4, #0
 800ac7c:	e00d      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac7e:	f04f 0304 	mov.w	r3, #4
 800ac82:	f04f 0400 	mov.w	r4, #0
 800ac86:	e008      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac88:	f04f 0302 	mov.w	r3, #2
 800ac8c:	f04f 0400 	mov.w	r4, #0
 800ac90:	e003      	b.n	800ac9a <UART_SetConfig+0xd8a>
 800ac92:	f04f 0301 	mov.w	r3, #1
 800ac96:	f04f 0400 	mov.w	r4, #0
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	f7f5 fb1b 	bl	80002d8 <__aeabi_uldivmod>
 800aca2:	4603      	mov	r3, r0
 800aca4:	460c      	mov	r4, r1
 800aca6:	4619      	mov	r1, r3
 800aca8:	4622      	mov	r2, r4
 800acaa:	f04f 0300 	mov.w	r3, #0
 800acae:	f04f 0400 	mov.w	r4, #0
 800acb2:	0214      	lsls	r4, r2, #8
 800acb4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800acb8:	020b      	lsls	r3, r1, #8
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6852      	ldr	r2, [r2, #4]
 800acbe:	0852      	lsrs	r2, r2, #1
 800acc0:	4611      	mov	r1, r2
 800acc2:	f04f 0200 	mov.w	r2, #0
 800acc6:	eb13 0b01 	adds.w	fp, r3, r1
 800acca:	eb44 0c02 	adc.w	ip, r4, r2
 800acce:	4658      	mov	r0, fp
 800acd0:	4661      	mov	r1, ip
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f04f 0400 	mov.w	r4, #0
 800acda:	461a      	mov	r2, r3
 800acdc:	4623      	mov	r3, r4
 800acde:	f7f5 fafb 	bl	80002d8 <__aeabi_uldivmod>
 800ace2:	4603      	mov	r3, r0
 800ace4:	460c      	mov	r4, r1
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ace8:	e2e8      	b.n	800b2bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fd fdd6 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f04f 0100 	mov.w	r1, #0
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d067      	beq.n	800add4 <UART_SetConfig+0xec4>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d05e      	beq.n	800adca <UART_SetConfig+0xeba>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d055      	beq.n	800adc0 <UART_SetConfig+0xeb0>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d04c      	beq.n	800adb6 <UART_SetConfig+0xea6>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d043      	beq.n	800adac <UART_SetConfig+0xe9c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d03a      	beq.n	800ada2 <UART_SetConfig+0xe92>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	2b06      	cmp	r3, #6
 800ad32:	d031      	beq.n	800ad98 <UART_SetConfig+0xe88>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	d028      	beq.n	800ad8e <UART_SetConfig+0xe7e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d01f      	beq.n	800ad84 <UART_SetConfig+0xe74>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	d016      	beq.n	800ad7a <UART_SetConfig+0xe6a>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	2b0a      	cmp	r3, #10
 800ad52:	d00d      	beq.n	800ad70 <UART_SetConfig+0xe60>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b0b      	cmp	r3, #11
 800ad5a:	d104      	bne.n	800ad66 <UART_SetConfig+0xe56>
 800ad5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad60:	f04f 0400 	mov.w	r4, #0
 800ad64:	e03a      	b.n	800addc <UART_SetConfig+0xecc>
 800ad66:	f04f 0301 	mov.w	r3, #1
 800ad6a:	f04f 0400 	mov.w	r4, #0
 800ad6e:	e035      	b.n	800addc <UART_SetConfig+0xecc>
 800ad70:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad74:	f04f 0400 	mov.w	r4, #0
 800ad78:	e030      	b.n	800addc <UART_SetConfig+0xecc>
 800ad7a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad7e:	f04f 0400 	mov.w	r4, #0
 800ad82:	e02b      	b.n	800addc <UART_SetConfig+0xecc>
 800ad84:	f04f 0320 	mov.w	r3, #32
 800ad88:	f04f 0400 	mov.w	r4, #0
 800ad8c:	e026      	b.n	800addc <UART_SetConfig+0xecc>
 800ad8e:	f04f 0310 	mov.w	r3, #16
 800ad92:	f04f 0400 	mov.w	r4, #0
 800ad96:	e021      	b.n	800addc <UART_SetConfig+0xecc>
 800ad98:	f04f 030c 	mov.w	r3, #12
 800ad9c:	f04f 0400 	mov.w	r4, #0
 800ada0:	e01c      	b.n	800addc <UART_SetConfig+0xecc>
 800ada2:	f04f 030a 	mov.w	r3, #10
 800ada6:	f04f 0400 	mov.w	r4, #0
 800adaa:	e017      	b.n	800addc <UART_SetConfig+0xecc>
 800adac:	f04f 0308 	mov.w	r3, #8
 800adb0:	f04f 0400 	mov.w	r4, #0
 800adb4:	e012      	b.n	800addc <UART_SetConfig+0xecc>
 800adb6:	f04f 0306 	mov.w	r3, #6
 800adba:	f04f 0400 	mov.w	r4, #0
 800adbe:	e00d      	b.n	800addc <UART_SetConfig+0xecc>
 800adc0:	f04f 0304 	mov.w	r3, #4
 800adc4:	f04f 0400 	mov.w	r4, #0
 800adc8:	e008      	b.n	800addc <UART_SetConfig+0xecc>
 800adca:	f04f 0302 	mov.w	r3, #2
 800adce:	f04f 0400 	mov.w	r4, #0
 800add2:	e003      	b.n	800addc <UART_SetConfig+0xecc>
 800add4:	f04f 0301 	mov.w	r3, #1
 800add8:	f04f 0400 	mov.w	r4, #0
 800addc:	461a      	mov	r2, r3
 800adde:	4623      	mov	r3, r4
 800ade0:	f7f5 fa7a 	bl	80002d8 <__aeabi_uldivmod>
 800ade4:	4603      	mov	r3, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	4619      	mov	r1, r3
 800adea:	4622      	mov	r2, r4
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	f04f 0400 	mov.w	r4, #0
 800adf4:	0214      	lsls	r4, r2, #8
 800adf6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adfa:	020b      	lsls	r3, r1, #8
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6852      	ldr	r2, [r2, #4]
 800ae00:	0852      	lsrs	r2, r2, #1
 800ae02:	4611      	mov	r1, r2
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	eb13 0b01 	adds.w	fp, r3, r1
 800ae0c:	eb44 0c02 	adc.w	ip, r4, r2
 800ae10:	4658      	mov	r0, fp
 800ae12:	4661      	mov	r1, ip
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f04f 0400 	mov.w	r4, #0
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4623      	mov	r3, r4
 800ae20:	f7f5 fa5a 	bl	80002d8 <__aeabi_uldivmod>
 800ae24:	4603      	mov	r3, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae2a:	e247      	b.n	800b2bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2c:	4b96      	ldr	r3, [pc, #600]	; (800b088 <UART_SetConfig+0x1178>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 80a3 	beq.w	800af80 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae3a:	4b93      	ldr	r3, [pc, #588]	; (800b088 <UART_SetConfig+0x1178>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	08db      	lsrs	r3, r3, #3
 800ae40:	f003 0303 	and.w	r3, r3, #3
 800ae44:	4a91      	ldr	r2, [pc, #580]	; (800b08c <UART_SetConfig+0x117c>)
 800ae46:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f04f 0100 	mov.w	r1, #0
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d067      	beq.n	800af28 <UART_SetConfig+0x1018>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d05e      	beq.n	800af1e <UART_SetConfig+0x100e>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d055      	beq.n	800af14 <UART_SetConfig+0x1004>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d04c      	beq.n	800af0a <UART_SetConfig+0xffa>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d043      	beq.n	800af00 <UART_SetConfig+0xff0>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b05      	cmp	r3, #5
 800ae7e:	d03a      	beq.n	800aef6 <UART_SetConfig+0xfe6>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b06      	cmp	r3, #6
 800ae86:	d031      	beq.n	800aeec <UART_SetConfig+0xfdc>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b07      	cmp	r3, #7
 800ae8e:	d028      	beq.n	800aee2 <UART_SetConfig+0xfd2>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d01f      	beq.n	800aed8 <UART_SetConfig+0xfc8>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	d016      	beq.n	800aece <UART_SetConfig+0xfbe>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	2b0a      	cmp	r3, #10
 800aea6:	d00d      	beq.n	800aec4 <UART_SetConfig+0xfb4>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b0b      	cmp	r3, #11
 800aeae:	d104      	bne.n	800aeba <UART_SetConfig+0xfaa>
 800aeb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeb4:	f04f 0400 	mov.w	r4, #0
 800aeb8:	e03a      	b.n	800af30 <UART_SetConfig+0x1020>
 800aeba:	f04f 0301 	mov.w	r3, #1
 800aebe:	f04f 0400 	mov.w	r4, #0
 800aec2:	e035      	b.n	800af30 <UART_SetConfig+0x1020>
 800aec4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aec8:	f04f 0400 	mov.w	r4, #0
 800aecc:	e030      	b.n	800af30 <UART_SetConfig+0x1020>
 800aece:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aed2:	f04f 0400 	mov.w	r4, #0
 800aed6:	e02b      	b.n	800af30 <UART_SetConfig+0x1020>
 800aed8:	f04f 0320 	mov.w	r3, #32
 800aedc:	f04f 0400 	mov.w	r4, #0
 800aee0:	e026      	b.n	800af30 <UART_SetConfig+0x1020>
 800aee2:	f04f 0310 	mov.w	r3, #16
 800aee6:	f04f 0400 	mov.w	r4, #0
 800aeea:	e021      	b.n	800af30 <UART_SetConfig+0x1020>
 800aeec:	f04f 030c 	mov.w	r3, #12
 800aef0:	f04f 0400 	mov.w	r4, #0
 800aef4:	e01c      	b.n	800af30 <UART_SetConfig+0x1020>
 800aef6:	f04f 030a 	mov.w	r3, #10
 800aefa:	f04f 0400 	mov.w	r4, #0
 800aefe:	e017      	b.n	800af30 <UART_SetConfig+0x1020>
 800af00:	f04f 0308 	mov.w	r3, #8
 800af04:	f04f 0400 	mov.w	r4, #0
 800af08:	e012      	b.n	800af30 <UART_SetConfig+0x1020>
 800af0a:	f04f 0306 	mov.w	r3, #6
 800af0e:	f04f 0400 	mov.w	r4, #0
 800af12:	e00d      	b.n	800af30 <UART_SetConfig+0x1020>
 800af14:	f04f 0304 	mov.w	r3, #4
 800af18:	f04f 0400 	mov.w	r4, #0
 800af1c:	e008      	b.n	800af30 <UART_SetConfig+0x1020>
 800af1e:	f04f 0302 	mov.w	r3, #2
 800af22:	f04f 0400 	mov.w	r4, #0
 800af26:	e003      	b.n	800af30 <UART_SetConfig+0x1020>
 800af28:	f04f 0301 	mov.w	r3, #1
 800af2c:	f04f 0400 	mov.w	r4, #0
 800af30:	461a      	mov	r2, r3
 800af32:	4623      	mov	r3, r4
 800af34:	f7f5 f9d0 	bl	80002d8 <__aeabi_uldivmod>
 800af38:	4603      	mov	r3, r0
 800af3a:	460c      	mov	r4, r1
 800af3c:	4619      	mov	r1, r3
 800af3e:	4622      	mov	r2, r4
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	f04f 0400 	mov.w	r4, #0
 800af48:	0214      	lsls	r4, r2, #8
 800af4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af4e:	020b      	lsls	r3, r1, #8
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6852      	ldr	r2, [r2, #4]
 800af54:	0852      	lsrs	r2, r2, #1
 800af56:	4611      	mov	r1, r2
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	eb13 0b01 	adds.w	fp, r3, r1
 800af60:	eb44 0c02 	adc.w	ip, r4, r2
 800af64:	4658      	mov	r0, fp
 800af66:	4661      	mov	r1, ip
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f04f 0400 	mov.w	r4, #0
 800af70:	461a      	mov	r2, r3
 800af72:	4623      	mov	r3, r4
 800af74:	f7f5 f9b0 	bl	80002d8 <__aeabi_uldivmod>
 800af78:	4603      	mov	r3, r0
 800af7a:	460c      	mov	r4, r1
 800af7c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800af7e:	e19d      	b.n	800b2bc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	d05b      	beq.n	800b040 <UART_SetConfig+0x1130>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d053      	beq.n	800b038 <UART_SetConfig+0x1128>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	2b02      	cmp	r3, #2
 800af96:	d04b      	beq.n	800b030 <UART_SetConfig+0x1120>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d043      	beq.n	800b028 <UART_SetConfig+0x1118>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d03b      	beq.n	800b020 <UART_SetConfig+0x1110>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b05      	cmp	r3, #5
 800afae:	d033      	beq.n	800b018 <UART_SetConfig+0x1108>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b06      	cmp	r3, #6
 800afb6:	d02b      	beq.n	800b010 <UART_SetConfig+0x1100>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b07      	cmp	r3, #7
 800afbe:	d023      	beq.n	800b008 <UART_SetConfig+0x10f8>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b08      	cmp	r3, #8
 800afc6:	d01b      	beq.n	800b000 <UART_SetConfig+0x10f0>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b09      	cmp	r3, #9
 800afce:	d013      	beq.n	800aff8 <UART_SetConfig+0x10e8>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b0a      	cmp	r3, #10
 800afd6:	d00b      	beq.n	800aff0 <UART_SetConfig+0x10e0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b0b      	cmp	r3, #11
 800afde:	d103      	bne.n	800afe8 <UART_SetConfig+0x10d8>
 800afe0:	4b2a      	ldr	r3, [pc, #168]	; (800b08c <UART_SetConfig+0x117c>)
 800afe2:	f04f 0400 	mov.w	r4, #0
 800afe6:	e02e      	b.n	800b046 <UART_SetConfig+0x1136>
 800afe8:	4b29      	ldr	r3, [pc, #164]	; (800b090 <UART_SetConfig+0x1180>)
 800afea:	f04f 0403 	mov.w	r4, #3
 800afee:	e02a      	b.n	800b046 <UART_SetConfig+0x1136>
 800aff0:	4b28      	ldr	r3, [pc, #160]	; (800b094 <UART_SetConfig+0x1184>)
 800aff2:	f04f 0400 	mov.w	r4, #0
 800aff6:	e026      	b.n	800b046 <UART_SetConfig+0x1136>
 800aff8:	4b27      	ldr	r3, [pc, #156]	; (800b098 <UART_SetConfig+0x1188>)
 800affa:	f04f 0400 	mov.w	r4, #0
 800affe:	e022      	b.n	800b046 <UART_SetConfig+0x1136>
 800b000:	4b26      	ldr	r3, [pc, #152]	; (800b09c <UART_SetConfig+0x118c>)
 800b002:	f04f 0400 	mov.w	r4, #0
 800b006:	e01e      	b.n	800b046 <UART_SetConfig+0x1136>
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <UART_SetConfig+0x1190>)
 800b00a:	f04f 0400 	mov.w	r4, #0
 800b00e:	e01a      	b.n	800b046 <UART_SetConfig+0x1136>
 800b010:	a419      	add	r4, pc, #100	; (adr r4, 800b078 <UART_SetConfig+0x1168>)
 800b012:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b016:	e016      	b.n	800b046 <UART_SetConfig+0x1136>
 800b018:	4b22      	ldr	r3, [pc, #136]	; (800b0a4 <UART_SetConfig+0x1194>)
 800b01a:	f04f 0400 	mov.w	r4, #0
 800b01e:	e012      	b.n	800b046 <UART_SetConfig+0x1136>
 800b020:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <UART_SetConfig+0x1198>)
 800b022:	f04f 0400 	mov.w	r4, #0
 800b026:	e00e      	b.n	800b046 <UART_SetConfig+0x1136>
 800b028:	a415      	add	r4, pc, #84	; (adr r4, 800b080 <UART_SetConfig+0x1170>)
 800b02a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b02e:	e00a      	b.n	800b046 <UART_SetConfig+0x1136>
 800b030:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <UART_SetConfig+0x119c>)
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	e006      	b.n	800b046 <UART_SetConfig+0x1136>
 800b038:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <UART_SetConfig+0x11a0>)
 800b03a:	f04f 0401 	mov.w	r4, #1
 800b03e:	e002      	b.n	800b046 <UART_SetConfig+0x1136>
 800b040:	4b13      	ldr	r3, [pc, #76]	; (800b090 <UART_SetConfig+0x1180>)
 800b042:	f04f 0403 	mov.w	r4, #3
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6852      	ldr	r2, [r2, #4]
 800b04a:	0852      	lsrs	r2, r2, #1
 800b04c:	4611      	mov	r1, r2
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	eb13 0b01 	adds.w	fp, r3, r1
 800b056:	eb44 0c02 	adc.w	ip, r4, r2
 800b05a:	4658      	mov	r0, fp
 800b05c:	4661      	mov	r1, ip
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f04f 0400 	mov.w	r4, #0
 800b066:	461a      	mov	r2, r3
 800b068:	4623      	mov	r3, r4
 800b06a:	f7f5 f935 	bl	80002d8 <__aeabi_uldivmod>
 800b06e:	4603      	mov	r3, r0
 800b070:	460c      	mov	r4, r1
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b074:	e122      	b.n	800b2bc <UART_SetConfig+0x13ac>
 800b076:	bf00      	nop
 800b078:	51615500 	.word	0x51615500
 800b07c:	00000000 	.word	0x00000000
 800b080:	a2c2aa00 	.word	0xa2c2aa00
 800b084:	00000000 	.word	0x00000000
 800b088:	58024400 	.word	0x58024400
 800b08c:	03d09000 	.word	0x03d09000
 800b090:	d0900000 	.word	0xd0900000
 800b094:	07a12000 	.word	0x07a12000
 800b098:	0f424000 	.word	0x0f424000
 800b09c:	1e848000 	.word	0x1e848000
 800b0a0:	3d090000 	.word	0x3d090000
 800b0a4:	61a80000 	.word	0x61a80000
 800b0a8:	7a120000 	.word	0x7a120000
 800b0ac:	f4240000 	.word	0xf4240000
 800b0b0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d05b      	beq.n	800b174 <UART_SetConfig+0x1264>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d053      	beq.n	800b16c <UART_SetConfig+0x125c>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d04b      	beq.n	800b164 <UART_SetConfig+0x1254>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d043      	beq.n	800b15c <UART_SetConfig+0x124c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d03b      	beq.n	800b154 <UART_SetConfig+0x1244>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b05      	cmp	r3, #5
 800b0e2:	d033      	beq.n	800b14c <UART_SetConfig+0x123c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b06      	cmp	r3, #6
 800b0ea:	d02b      	beq.n	800b144 <UART_SetConfig+0x1234>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b07      	cmp	r3, #7
 800b0f2:	d023      	beq.n	800b13c <UART_SetConfig+0x122c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d01b      	beq.n	800b134 <UART_SetConfig+0x1224>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b09      	cmp	r3, #9
 800b102:	d013      	beq.n	800b12c <UART_SetConfig+0x121c>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b0a      	cmp	r3, #10
 800b10a:	d00b      	beq.n	800b124 <UART_SetConfig+0x1214>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b0b      	cmp	r3, #11
 800b112:	d103      	bne.n	800b11c <UART_SetConfig+0x120c>
 800b114:	4bc0      	ldr	r3, [pc, #768]	; (800b418 <UART_SetConfig+0x1508>)
 800b116:	f04f 0400 	mov.w	r4, #0
 800b11a:	e02e      	b.n	800b17a <UART_SetConfig+0x126a>
 800b11c:	4bbf      	ldr	r3, [pc, #764]	; (800b41c <UART_SetConfig+0x150c>)
 800b11e:	f04f 0400 	mov.w	r4, #0
 800b122:	e02a      	b.n	800b17a <UART_SetConfig+0x126a>
 800b124:	4bbe      	ldr	r3, [pc, #760]	; (800b420 <UART_SetConfig+0x1510>)
 800b126:	f04f 0400 	mov.w	r4, #0
 800b12a:	e026      	b.n	800b17a <UART_SetConfig+0x126a>
 800b12c:	4bbd      	ldr	r3, [pc, #756]	; (800b424 <UART_SetConfig+0x1514>)
 800b12e:	f04f 0400 	mov.w	r4, #0
 800b132:	e022      	b.n	800b17a <UART_SetConfig+0x126a>
 800b134:	4bbc      	ldr	r3, [pc, #752]	; (800b428 <UART_SetConfig+0x1518>)
 800b136:	f04f 0400 	mov.w	r4, #0
 800b13a:	e01e      	b.n	800b17a <UART_SetConfig+0x126a>
 800b13c:	4bbb      	ldr	r3, [pc, #748]	; (800b42c <UART_SetConfig+0x151c>)
 800b13e:	f04f 0400 	mov.w	r4, #0
 800b142:	e01a      	b.n	800b17a <UART_SetConfig+0x126a>
 800b144:	a4b0      	add	r4, pc, #704	; (adr r4, 800b408 <UART_SetConfig+0x14f8>)
 800b146:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b14a:	e016      	b.n	800b17a <UART_SetConfig+0x126a>
 800b14c:	4bb8      	ldr	r3, [pc, #736]	; (800b430 <UART_SetConfig+0x1520>)
 800b14e:	f04f 0400 	mov.w	r4, #0
 800b152:	e012      	b.n	800b17a <UART_SetConfig+0x126a>
 800b154:	4bb7      	ldr	r3, [pc, #732]	; (800b434 <UART_SetConfig+0x1524>)
 800b156:	f04f 0400 	mov.w	r4, #0
 800b15a:	e00e      	b.n	800b17a <UART_SetConfig+0x126a>
 800b15c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b410 <UART_SetConfig+0x1500>)
 800b15e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b162:	e00a      	b.n	800b17a <UART_SetConfig+0x126a>
 800b164:	4bb4      	ldr	r3, [pc, #720]	; (800b438 <UART_SetConfig+0x1528>)
 800b166:	f04f 0400 	mov.w	r4, #0
 800b16a:	e006      	b.n	800b17a <UART_SetConfig+0x126a>
 800b16c:	4bb3      	ldr	r3, [pc, #716]	; (800b43c <UART_SetConfig+0x152c>)
 800b16e:	f04f 0400 	mov.w	r4, #0
 800b172:	e002      	b.n	800b17a <UART_SetConfig+0x126a>
 800b174:	4ba9      	ldr	r3, [pc, #676]	; (800b41c <UART_SetConfig+0x150c>)
 800b176:	f04f 0400 	mov.w	r4, #0
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6852      	ldr	r2, [r2, #4]
 800b17e:	0852      	lsrs	r2, r2, #1
 800b180:	4611      	mov	r1, r2
 800b182:	f04f 0200 	mov.w	r2, #0
 800b186:	eb13 0b01 	adds.w	fp, r3, r1
 800b18a:	eb44 0c02 	adc.w	ip, r4, r2
 800b18e:	4658      	mov	r0, fp
 800b190:	4661      	mov	r1, ip
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f04f 0400 	mov.w	r4, #0
 800b19a:	461a      	mov	r2, r3
 800b19c:	4623      	mov	r3, r4
 800b19e:	f7f5 f89b 	bl	80002d8 <__aeabi_uldivmod>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b1a8:	e088      	b.n	800b2bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d064      	beq.n	800b27c <UART_SetConfig+0x136c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d05b      	beq.n	800b272 <UART_SetConfig+0x1362>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d052      	beq.n	800b268 <UART_SetConfig+0x1358>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d04a      	beq.n	800b260 <UART_SetConfig+0x1350>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d041      	beq.n	800b256 <UART_SetConfig+0x1346>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	d039      	beq.n	800b24e <UART_SetConfig+0x133e>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	2b06      	cmp	r3, #6
 800b1e0:	d031      	beq.n	800b246 <UART_SetConfig+0x1336>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b07      	cmp	r3, #7
 800b1e8:	d028      	beq.n	800b23c <UART_SetConfig+0x132c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d01f      	beq.n	800b232 <UART_SetConfig+0x1322>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d016      	beq.n	800b228 <UART_SetConfig+0x1318>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b0a      	cmp	r3, #10
 800b200:	d00d      	beq.n	800b21e <UART_SetConfig+0x130e>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b0b      	cmp	r3, #11
 800b208:	d104      	bne.n	800b214 <UART_SetConfig+0x1304>
 800b20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b20e:	f04f 0400 	mov.w	r4, #0
 800b212:	e037      	b.n	800b284 <UART_SetConfig+0x1374>
 800b214:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b218:	f04f 0400 	mov.w	r4, #0
 800b21c:	e032      	b.n	800b284 <UART_SetConfig+0x1374>
 800b21e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b222:	f04f 0400 	mov.w	r4, #0
 800b226:	e02d      	b.n	800b284 <UART_SetConfig+0x1374>
 800b228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b22c:	f04f 0400 	mov.w	r4, #0
 800b230:	e028      	b.n	800b284 <UART_SetConfig+0x1374>
 800b232:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b236:	f04f 0400 	mov.w	r4, #0
 800b23a:	e023      	b.n	800b284 <UART_SetConfig+0x1374>
 800b23c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b240:	f04f 0400 	mov.w	r4, #0
 800b244:	e01e      	b.n	800b284 <UART_SetConfig+0x1374>
 800b246:	4b7e      	ldr	r3, [pc, #504]	; (800b440 <UART_SetConfig+0x1530>)
 800b248:	f04f 0400 	mov.w	r4, #0
 800b24c:	e01a      	b.n	800b284 <UART_SetConfig+0x1374>
 800b24e:	4b7d      	ldr	r3, [pc, #500]	; (800b444 <UART_SetConfig+0x1534>)
 800b250:	f04f 0400 	mov.w	r4, #0
 800b254:	e016      	b.n	800b284 <UART_SetConfig+0x1374>
 800b256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b25a:	f04f 0400 	mov.w	r4, #0
 800b25e:	e011      	b.n	800b284 <UART_SetConfig+0x1374>
 800b260:	4b79      	ldr	r3, [pc, #484]	; (800b448 <UART_SetConfig+0x1538>)
 800b262:	f04f 0400 	mov.w	r4, #0
 800b266:	e00d      	b.n	800b284 <UART_SetConfig+0x1374>
 800b268:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b26c:	f04f 0400 	mov.w	r4, #0
 800b270:	e008      	b.n	800b284 <UART_SetConfig+0x1374>
 800b272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b276:	f04f 0400 	mov.w	r4, #0
 800b27a:	e003      	b.n	800b284 <UART_SetConfig+0x1374>
 800b27c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b280:	f04f 0400 	mov.w	r4, #0
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	6852      	ldr	r2, [r2, #4]
 800b288:	0852      	lsrs	r2, r2, #1
 800b28a:	4611      	mov	r1, r2
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	eb13 0b01 	adds.w	fp, r3, r1
 800b294:	eb44 0c02 	adc.w	ip, r4, r2
 800b298:	4658      	mov	r0, fp
 800b29a:	4661      	mov	r1, ip
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f04f 0400 	mov.w	r4, #0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	f7f5 f816 	bl	80002d8 <__aeabi_uldivmod>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2b2:	e003      	b.n	800b2bc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b2ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2c2:	d309      	bcc.n	800b2d8 <UART_SetConfig+0x13c8>
 800b2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ca:	d205      	bcs.n	800b2d8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d2:	60da      	str	r2, [r3, #12]
 800b2d4:	f000 bf85 	b.w	800c1e2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	f000 bf80 	b.w	800c1e2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ea:	f040 83da 	bne.w	800baa2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b2ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2f2:	2b40      	cmp	r3, #64	; 0x40
 800b2f4:	f200 83b3 	bhi.w	800ba5e <UART_SetConfig+0x1b4e>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <UART_SetConfig+0x13f0>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b44d 	.word	0x0800b44d
 800b304:	0800b505 	.word	0x0800b505
 800b308:	0800ba5f 	.word	0x0800ba5f
 800b30c:	0800ba5f 	.word	0x0800ba5f
 800b310:	0800b5bd 	.word	0x0800b5bd
 800b314:	0800ba5f 	.word	0x0800ba5f
 800b318:	0800ba5f 	.word	0x0800ba5f
 800b31c:	0800ba5f 	.word	0x0800ba5f
 800b320:	0800b679 	.word	0x0800b679
 800b324:	0800ba5f 	.word	0x0800ba5f
 800b328:	0800ba5f 	.word	0x0800ba5f
 800b32c:	0800ba5f 	.word	0x0800ba5f
 800b330:	0800ba5f 	.word	0x0800ba5f
 800b334:	0800ba5f 	.word	0x0800ba5f
 800b338:	0800ba5f 	.word	0x0800ba5f
 800b33c:	0800ba5f 	.word	0x0800ba5f
 800b340:	0800b735 	.word	0x0800b735
 800b344:	0800ba5f 	.word	0x0800ba5f
 800b348:	0800ba5f 	.word	0x0800ba5f
 800b34c:	0800ba5f 	.word	0x0800ba5f
 800b350:	0800ba5f 	.word	0x0800ba5f
 800b354:	0800ba5f 	.word	0x0800ba5f
 800b358:	0800ba5f 	.word	0x0800ba5f
 800b35c:	0800ba5f 	.word	0x0800ba5f
 800b360:	0800ba5f 	.word	0x0800ba5f
 800b364:	0800ba5f 	.word	0x0800ba5f
 800b368:	0800ba5f 	.word	0x0800ba5f
 800b36c:	0800ba5f 	.word	0x0800ba5f
 800b370:	0800ba5f 	.word	0x0800ba5f
 800b374:	0800ba5f 	.word	0x0800ba5f
 800b378:	0800ba5f 	.word	0x0800ba5f
 800b37c:	0800ba5f 	.word	0x0800ba5f
 800b380:	0800b8a7 	.word	0x0800b8a7
 800b384:	0800ba5f 	.word	0x0800ba5f
 800b388:	0800ba5f 	.word	0x0800ba5f
 800b38c:	0800ba5f 	.word	0x0800ba5f
 800b390:	0800ba5f 	.word	0x0800ba5f
 800b394:	0800ba5f 	.word	0x0800ba5f
 800b398:	0800ba5f 	.word	0x0800ba5f
 800b39c:	0800ba5f 	.word	0x0800ba5f
 800b3a0:	0800ba5f 	.word	0x0800ba5f
 800b3a4:	0800ba5f 	.word	0x0800ba5f
 800b3a8:	0800ba5f 	.word	0x0800ba5f
 800b3ac:	0800ba5f 	.word	0x0800ba5f
 800b3b0:	0800ba5f 	.word	0x0800ba5f
 800b3b4:	0800ba5f 	.word	0x0800ba5f
 800b3b8:	0800ba5f 	.word	0x0800ba5f
 800b3bc:	0800ba5f 	.word	0x0800ba5f
 800b3c0:	0800ba5f 	.word	0x0800ba5f
 800b3c4:	0800ba5f 	.word	0x0800ba5f
 800b3c8:	0800ba5f 	.word	0x0800ba5f
 800b3cc:	0800ba5f 	.word	0x0800ba5f
 800b3d0:	0800ba5f 	.word	0x0800ba5f
 800b3d4:	0800ba5f 	.word	0x0800ba5f
 800b3d8:	0800ba5f 	.word	0x0800ba5f
 800b3dc:	0800ba5f 	.word	0x0800ba5f
 800b3e0:	0800ba5f 	.word	0x0800ba5f
 800b3e4:	0800ba5f 	.word	0x0800ba5f
 800b3e8:	0800ba5f 	.word	0x0800ba5f
 800b3ec:	0800ba5f 	.word	0x0800ba5f
 800b3f0:	0800ba5f 	.word	0x0800ba5f
 800b3f4:	0800ba5f 	.word	0x0800ba5f
 800b3f8:	0800ba5f 	.word	0x0800ba5f
 800b3fc:	0800ba5f 	.word	0x0800ba5f
 800b400:	0800b99d 	.word	0x0800b99d
 800b404:	f3af 8000 	nop.w
 800b408:	05161500 	.word	0x05161500
 800b40c:	00000000 	.word	0x00000000
 800b410:	0a2c2a00 	.word	0x0a2c2a00
 800b414:	00000000 	.word	0x00000000
 800b418:	003d0900 	.word	0x003d0900
 800b41c:	3d090000 	.word	0x3d090000
 800b420:	007a1200 	.word	0x007a1200
 800b424:	00f42400 	.word	0x00f42400
 800b428:	01e84800 	.word	0x01e84800
 800b42c:	03d09000 	.word	0x03d09000
 800b430:	061a8000 	.word	0x061a8000
 800b434:	07a12000 	.word	0x07a12000
 800b438:	0f424000 	.word	0x0f424000
 800b43c:	1e848000 	.word	0x1e848000
 800b440:	000aaa00 	.word	0x000aaa00
 800b444:	000ccc00 	.word	0x000ccc00
 800b448:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b44c:	f7fb ff44 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800b450:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	d044      	beq.n	800b4e4 <UART_SetConfig+0x15d4>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d03e      	beq.n	800b4e0 <UART_SetConfig+0x15d0>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b02      	cmp	r3, #2
 800b468:	d038      	beq.n	800b4dc <UART_SetConfig+0x15cc>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d032      	beq.n	800b4d8 <UART_SetConfig+0x15c8>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b04      	cmp	r3, #4
 800b478:	d02c      	beq.n	800b4d4 <UART_SetConfig+0x15c4>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b05      	cmp	r3, #5
 800b480:	d026      	beq.n	800b4d0 <UART_SetConfig+0x15c0>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b06      	cmp	r3, #6
 800b488:	d020      	beq.n	800b4cc <UART_SetConfig+0x15bc>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b07      	cmp	r3, #7
 800b490:	d01a      	beq.n	800b4c8 <UART_SetConfig+0x15b8>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b08      	cmp	r3, #8
 800b498:	d014      	beq.n	800b4c4 <UART_SetConfig+0x15b4>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b09      	cmp	r3, #9
 800b4a0:	d00e      	beq.n	800b4c0 <UART_SetConfig+0x15b0>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b0a      	cmp	r3, #10
 800b4a8:	d008      	beq.n	800b4bc <UART_SetConfig+0x15ac>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b0b      	cmp	r3, #11
 800b4b0:	d102      	bne.n	800b4b8 <UART_SetConfig+0x15a8>
 800b4b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b6:	e016      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e014      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4bc:	2380      	movs	r3, #128	; 0x80
 800b4be:	e012      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	e010      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	e00e      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	e00c      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4cc:	230c      	movs	r3, #12
 800b4ce:	e00a      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4d0:	230a      	movs	r3, #10
 800b4d2:	e008      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	e006      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4d8:	2306      	movs	r3, #6
 800b4da:	e004      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	e002      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e000      	b.n	800b4e6 <UART_SetConfig+0x15d6>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ec:	005a      	lsls	r2, r3, #1
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	085b      	lsrs	r3, r3, #1
 800b4f4:	441a      	add	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b502:	e2b0      	b.n	800ba66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b504:	f7fb fefe 	bl	8007304 <HAL_RCC_GetPCLK2Freq>
 800b508:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d044      	beq.n	800b59c <UART_SetConfig+0x168c>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	2b01      	cmp	r3, #1
 800b518:	d03e      	beq.n	800b598 <UART_SetConfig+0x1688>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d038      	beq.n	800b594 <UART_SetConfig+0x1684>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b03      	cmp	r3, #3
 800b528:	d032      	beq.n	800b590 <UART_SetConfig+0x1680>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d02c      	beq.n	800b58c <UART_SetConfig+0x167c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b05      	cmp	r3, #5
 800b538:	d026      	beq.n	800b588 <UART_SetConfig+0x1678>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d020      	beq.n	800b584 <UART_SetConfig+0x1674>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b07      	cmp	r3, #7
 800b548:	d01a      	beq.n	800b580 <UART_SetConfig+0x1670>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d014      	beq.n	800b57c <UART_SetConfig+0x166c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b09      	cmp	r3, #9
 800b558:	d00e      	beq.n	800b578 <UART_SetConfig+0x1668>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	2b0a      	cmp	r3, #10
 800b560:	d008      	beq.n	800b574 <UART_SetConfig+0x1664>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	2b0b      	cmp	r3, #11
 800b568:	d102      	bne.n	800b570 <UART_SetConfig+0x1660>
 800b56a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b56e:	e016      	b.n	800b59e <UART_SetConfig+0x168e>
 800b570:	2301      	movs	r3, #1
 800b572:	e014      	b.n	800b59e <UART_SetConfig+0x168e>
 800b574:	2380      	movs	r3, #128	; 0x80
 800b576:	e012      	b.n	800b59e <UART_SetConfig+0x168e>
 800b578:	2340      	movs	r3, #64	; 0x40
 800b57a:	e010      	b.n	800b59e <UART_SetConfig+0x168e>
 800b57c:	2320      	movs	r3, #32
 800b57e:	e00e      	b.n	800b59e <UART_SetConfig+0x168e>
 800b580:	2310      	movs	r3, #16
 800b582:	e00c      	b.n	800b59e <UART_SetConfig+0x168e>
 800b584:	230c      	movs	r3, #12
 800b586:	e00a      	b.n	800b59e <UART_SetConfig+0x168e>
 800b588:	230a      	movs	r3, #10
 800b58a:	e008      	b.n	800b59e <UART_SetConfig+0x168e>
 800b58c:	2308      	movs	r3, #8
 800b58e:	e006      	b.n	800b59e <UART_SetConfig+0x168e>
 800b590:	2306      	movs	r3, #6
 800b592:	e004      	b.n	800b59e <UART_SetConfig+0x168e>
 800b594:	2304      	movs	r3, #4
 800b596:	e002      	b.n	800b59e <UART_SetConfig+0x168e>
 800b598:	2302      	movs	r3, #2
 800b59a:	e000      	b.n	800b59e <UART_SetConfig+0x168e>
 800b59c:	2301      	movs	r3, #1
 800b59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a4:	005a      	lsls	r2, r3, #1
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	085b      	lsrs	r3, r3, #1
 800b5ac:	441a      	add	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ba:	e254      	b.n	800ba66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5bc:	f107 0318 	add.w	r3, r7, #24
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fd f821 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d044      	beq.n	800b65a <UART_SetConfig+0x174a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d03e      	beq.n	800b656 <UART_SetConfig+0x1746>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d038      	beq.n	800b652 <UART_SetConfig+0x1742>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d032      	beq.n	800b64e <UART_SetConfig+0x173e>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d02c      	beq.n	800b64a <UART_SetConfig+0x173a>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	2b05      	cmp	r3, #5
 800b5f6:	d026      	beq.n	800b646 <UART_SetConfig+0x1736>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	2b06      	cmp	r3, #6
 800b5fe:	d020      	beq.n	800b642 <UART_SetConfig+0x1732>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	2b07      	cmp	r3, #7
 800b606:	d01a      	beq.n	800b63e <UART_SetConfig+0x172e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	2b08      	cmp	r3, #8
 800b60e:	d014      	beq.n	800b63a <UART_SetConfig+0x172a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b09      	cmp	r3, #9
 800b616:	d00e      	beq.n	800b636 <UART_SetConfig+0x1726>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b0a      	cmp	r3, #10
 800b61e:	d008      	beq.n	800b632 <UART_SetConfig+0x1722>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b0b      	cmp	r3, #11
 800b626:	d102      	bne.n	800b62e <UART_SetConfig+0x171e>
 800b628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b62c:	e016      	b.n	800b65c <UART_SetConfig+0x174c>
 800b62e:	2301      	movs	r3, #1
 800b630:	e014      	b.n	800b65c <UART_SetConfig+0x174c>
 800b632:	2380      	movs	r3, #128	; 0x80
 800b634:	e012      	b.n	800b65c <UART_SetConfig+0x174c>
 800b636:	2340      	movs	r3, #64	; 0x40
 800b638:	e010      	b.n	800b65c <UART_SetConfig+0x174c>
 800b63a:	2320      	movs	r3, #32
 800b63c:	e00e      	b.n	800b65c <UART_SetConfig+0x174c>
 800b63e:	2310      	movs	r3, #16
 800b640:	e00c      	b.n	800b65c <UART_SetConfig+0x174c>
 800b642:	230c      	movs	r3, #12
 800b644:	e00a      	b.n	800b65c <UART_SetConfig+0x174c>
 800b646:	230a      	movs	r3, #10
 800b648:	e008      	b.n	800b65c <UART_SetConfig+0x174c>
 800b64a:	2308      	movs	r3, #8
 800b64c:	e006      	b.n	800b65c <UART_SetConfig+0x174c>
 800b64e:	2306      	movs	r3, #6
 800b650:	e004      	b.n	800b65c <UART_SetConfig+0x174c>
 800b652:	2304      	movs	r3, #4
 800b654:	e002      	b.n	800b65c <UART_SetConfig+0x174c>
 800b656:	2302      	movs	r3, #2
 800b658:	e000      	b.n	800b65c <UART_SetConfig+0x174c>
 800b65a:	2301      	movs	r3, #1
 800b65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b660:	005a      	lsls	r2, r3, #1
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	085b      	lsrs	r3, r3, #1
 800b668:	441a      	add	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b672:	b29b      	uxth	r3, r3
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b676:	e1f6      	b.n	800ba66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b678:	f107 030c 	add.w	r3, r7, #12
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fd f90f 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d044      	beq.n	800b716 <UART_SetConfig+0x1806>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b01      	cmp	r3, #1
 800b692:	d03e      	beq.n	800b712 <UART_SetConfig+0x1802>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d038      	beq.n	800b70e <UART_SetConfig+0x17fe>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d032      	beq.n	800b70a <UART_SetConfig+0x17fa>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d02c      	beq.n	800b706 <UART_SetConfig+0x17f6>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b05      	cmp	r3, #5
 800b6b2:	d026      	beq.n	800b702 <UART_SetConfig+0x17f2>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	d020      	beq.n	800b6fe <UART_SetConfig+0x17ee>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b07      	cmp	r3, #7
 800b6c2:	d01a      	beq.n	800b6fa <UART_SetConfig+0x17ea>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b08      	cmp	r3, #8
 800b6ca:	d014      	beq.n	800b6f6 <UART_SetConfig+0x17e6>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b09      	cmp	r3, #9
 800b6d2:	d00e      	beq.n	800b6f2 <UART_SetConfig+0x17e2>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b0a      	cmp	r3, #10
 800b6da:	d008      	beq.n	800b6ee <UART_SetConfig+0x17de>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b0b      	cmp	r3, #11
 800b6e2:	d102      	bne.n	800b6ea <UART_SetConfig+0x17da>
 800b6e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e8:	e016      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e014      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6ee:	2380      	movs	r3, #128	; 0x80
 800b6f0:	e012      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6f2:	2340      	movs	r3, #64	; 0x40
 800b6f4:	e010      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6f6:	2320      	movs	r3, #32
 800b6f8:	e00e      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6fa:	2310      	movs	r3, #16
 800b6fc:	e00c      	b.n	800b718 <UART_SetConfig+0x1808>
 800b6fe:	230c      	movs	r3, #12
 800b700:	e00a      	b.n	800b718 <UART_SetConfig+0x1808>
 800b702:	230a      	movs	r3, #10
 800b704:	e008      	b.n	800b718 <UART_SetConfig+0x1808>
 800b706:	2308      	movs	r3, #8
 800b708:	e006      	b.n	800b718 <UART_SetConfig+0x1808>
 800b70a:	2306      	movs	r3, #6
 800b70c:	e004      	b.n	800b718 <UART_SetConfig+0x1808>
 800b70e:	2304      	movs	r3, #4
 800b710:	e002      	b.n	800b718 <UART_SetConfig+0x1808>
 800b712:	2302      	movs	r3, #2
 800b714:	e000      	b.n	800b718 <UART_SetConfig+0x1808>
 800b716:	2301      	movs	r3, #1
 800b718:	fbb2 f3f3 	udiv	r3, r2, r3
 800b71c:	005a      	lsls	r2, r3, #1
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	085b      	lsrs	r3, r3, #1
 800b724:	441a      	add	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b72e:	b29b      	uxth	r3, r3
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b732:	e198      	b.n	800ba66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b734:	4b87      	ldr	r3, [pc, #540]	; (800b954 <UART_SetConfig+0x1a44>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d05e      	beq.n	800b7fe <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b740:	4b84      	ldr	r3, [pc, #528]	; (800b954 <UART_SetConfig+0x1a44>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	08db      	lsrs	r3, r3, #3
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	4a83      	ldr	r2, [pc, #524]	; (800b958 <UART_SetConfig+0x1a48>)
 800b74c:	40da      	lsrs	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b752:	2b00      	cmp	r3, #0
 800b754:	d044      	beq.n	800b7e0 <UART_SetConfig+0x18d0>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d03e      	beq.n	800b7dc <UART_SetConfig+0x18cc>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	2b02      	cmp	r3, #2
 800b764:	d038      	beq.n	800b7d8 <UART_SetConfig+0x18c8>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d032      	beq.n	800b7d4 <UART_SetConfig+0x18c4>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	2b04      	cmp	r3, #4
 800b774:	d02c      	beq.n	800b7d0 <UART_SetConfig+0x18c0>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	d026      	beq.n	800b7cc <UART_SetConfig+0x18bc>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b06      	cmp	r3, #6
 800b784:	d020      	beq.n	800b7c8 <UART_SetConfig+0x18b8>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b07      	cmp	r3, #7
 800b78c:	d01a      	beq.n	800b7c4 <UART_SetConfig+0x18b4>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2b08      	cmp	r3, #8
 800b794:	d014      	beq.n	800b7c0 <UART_SetConfig+0x18b0>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2b09      	cmp	r3, #9
 800b79c:	d00e      	beq.n	800b7bc <UART_SetConfig+0x18ac>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	2b0a      	cmp	r3, #10
 800b7a4:	d008      	beq.n	800b7b8 <UART_SetConfig+0x18a8>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b0b      	cmp	r3, #11
 800b7ac:	d102      	bne.n	800b7b4 <UART_SetConfig+0x18a4>
 800b7ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b2:	e016      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e014      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7b8:	2380      	movs	r3, #128	; 0x80
 800b7ba:	e012      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7bc:	2340      	movs	r3, #64	; 0x40
 800b7be:	e010      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	e00e      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7c4:	2310      	movs	r3, #16
 800b7c6:	e00c      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	e00a      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7cc:	230a      	movs	r3, #10
 800b7ce:	e008      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	e006      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7d4:	2306      	movs	r3, #6
 800b7d6:	e004      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7d8:	2304      	movs	r3, #4
 800b7da:	e002      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e000      	b.n	800b7e2 <UART_SetConfig+0x18d2>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e6:	005a      	lsls	r2, r3, #1
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	441a      	add	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b7fc:	e133      	b.n	800ba66 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	2b00      	cmp	r3, #0
 800b804:	d043      	beq.n	800b88e <UART_SetConfig+0x197e>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d03d      	beq.n	800b88a <UART_SetConfig+0x197a>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b02      	cmp	r3, #2
 800b814:	d037      	beq.n	800b886 <UART_SetConfig+0x1976>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d031      	beq.n	800b882 <UART_SetConfig+0x1972>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b04      	cmp	r3, #4
 800b824:	d02b      	beq.n	800b87e <UART_SetConfig+0x196e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b05      	cmp	r3, #5
 800b82c:	d025      	beq.n	800b87a <UART_SetConfig+0x196a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b06      	cmp	r3, #6
 800b834:	d01f      	beq.n	800b876 <UART_SetConfig+0x1966>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b07      	cmp	r3, #7
 800b83c:	d019      	beq.n	800b872 <UART_SetConfig+0x1962>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b08      	cmp	r3, #8
 800b844:	d013      	beq.n	800b86e <UART_SetConfig+0x195e>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b09      	cmp	r3, #9
 800b84c:	d00d      	beq.n	800b86a <UART_SetConfig+0x195a>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b0a      	cmp	r3, #10
 800b854:	d007      	beq.n	800b866 <UART_SetConfig+0x1956>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b0b      	cmp	r3, #11
 800b85c:	d101      	bne.n	800b862 <UART_SetConfig+0x1952>
 800b85e:	4b3f      	ldr	r3, [pc, #252]	; (800b95c <UART_SetConfig+0x1a4c>)
 800b860:	e016      	b.n	800b890 <UART_SetConfig+0x1980>
 800b862:	4b3f      	ldr	r3, [pc, #252]	; (800b960 <UART_SetConfig+0x1a50>)
 800b864:	e014      	b.n	800b890 <UART_SetConfig+0x1980>
 800b866:	4b3f      	ldr	r3, [pc, #252]	; (800b964 <UART_SetConfig+0x1a54>)
 800b868:	e012      	b.n	800b890 <UART_SetConfig+0x1980>
 800b86a:	4b3f      	ldr	r3, [pc, #252]	; (800b968 <UART_SetConfig+0x1a58>)
 800b86c:	e010      	b.n	800b890 <UART_SetConfig+0x1980>
 800b86e:	4b3f      	ldr	r3, [pc, #252]	; (800b96c <UART_SetConfig+0x1a5c>)
 800b870:	e00e      	b.n	800b890 <UART_SetConfig+0x1980>
 800b872:	4b3f      	ldr	r3, [pc, #252]	; (800b970 <UART_SetConfig+0x1a60>)
 800b874:	e00c      	b.n	800b890 <UART_SetConfig+0x1980>
 800b876:	4b3f      	ldr	r3, [pc, #252]	; (800b974 <UART_SetConfig+0x1a64>)
 800b878:	e00a      	b.n	800b890 <UART_SetConfig+0x1980>
 800b87a:	4b3f      	ldr	r3, [pc, #252]	; (800b978 <UART_SetConfig+0x1a68>)
 800b87c:	e008      	b.n	800b890 <UART_SetConfig+0x1980>
 800b87e:	4b3f      	ldr	r3, [pc, #252]	; (800b97c <UART_SetConfig+0x1a6c>)
 800b880:	e006      	b.n	800b890 <UART_SetConfig+0x1980>
 800b882:	4b3f      	ldr	r3, [pc, #252]	; (800b980 <UART_SetConfig+0x1a70>)
 800b884:	e004      	b.n	800b890 <UART_SetConfig+0x1980>
 800b886:	4b3f      	ldr	r3, [pc, #252]	; (800b984 <UART_SetConfig+0x1a74>)
 800b888:	e002      	b.n	800b890 <UART_SetConfig+0x1980>
 800b88a:	4b33      	ldr	r3, [pc, #204]	; (800b958 <UART_SetConfig+0x1a48>)
 800b88c:	e000      	b.n	800b890 <UART_SetConfig+0x1980>
 800b88e:	4b34      	ldr	r3, [pc, #208]	; (800b960 <UART_SetConfig+0x1a50>)
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	6852      	ldr	r2, [r2, #4]
 800b894:	0852      	lsrs	r2, r2, #1
 800b896:	441a      	add	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8a4:	e0df      	b.n	800ba66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d045      	beq.n	800b93a <UART_SetConfig+0x1a2a>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d03f      	beq.n	800b936 <UART_SetConfig+0x1a26>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d039      	beq.n	800b932 <UART_SetConfig+0x1a22>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d033      	beq.n	800b92e <UART_SetConfig+0x1a1e>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d02d      	beq.n	800b92a <UART_SetConfig+0x1a1a>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	d027      	beq.n	800b926 <UART_SetConfig+0x1a16>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d021      	beq.n	800b922 <UART_SetConfig+0x1a12>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b07      	cmp	r3, #7
 800b8e4:	d01b      	beq.n	800b91e <UART_SetConfig+0x1a0e>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d015      	beq.n	800b91a <UART_SetConfig+0x1a0a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d00f      	beq.n	800b916 <UART_SetConfig+0x1a06>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b0a      	cmp	r3, #10
 800b8fc:	d008      	beq.n	800b910 <UART_SetConfig+0x1a00>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b0b      	cmp	r3, #11
 800b904:	d102      	bne.n	800b90c <UART_SetConfig+0x19fc>
 800b906:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b90a:	e017      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b90c:	4b18      	ldr	r3, [pc, #96]	; (800b970 <UART_SetConfig+0x1a60>)
 800b90e:	e015      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b910:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b914:	e012      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b916:	4b1c      	ldr	r3, [pc, #112]	; (800b988 <UART_SetConfig+0x1a78>)
 800b918:	e010      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b91a:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <UART_SetConfig+0x1a7c>)
 800b91c:	e00e      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <UART_SetConfig+0x1a4c>)
 800b920:	e00c      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b922:	4b1b      	ldr	r3, [pc, #108]	; (800b990 <UART_SetConfig+0x1a80>)
 800b924:	e00a      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b926:	4b1b      	ldr	r3, [pc, #108]	; (800b994 <UART_SetConfig+0x1a84>)
 800b928:	e008      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b92a:	4b0e      	ldr	r3, [pc, #56]	; (800b964 <UART_SetConfig+0x1a54>)
 800b92c:	e006      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b92e:	4b1a      	ldr	r3, [pc, #104]	; (800b998 <UART_SetConfig+0x1a88>)
 800b930:	e004      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b932:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <UART_SetConfig+0x1a58>)
 800b934:	e002      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b936:	4b0d      	ldr	r3, [pc, #52]	; (800b96c <UART_SetConfig+0x1a5c>)
 800b938:	e000      	b.n	800b93c <UART_SetConfig+0x1a2c>
 800b93a:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <UART_SetConfig+0x1a60>)
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6852      	ldr	r2, [r2, #4]
 800b940:	0852      	lsrs	r2, r2, #1
 800b942:	441a      	add	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	fbb2 f3f3 	udiv	r3, r2, r3
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b950:	e089      	b.n	800ba66 <UART_SetConfig+0x1b56>
 800b952:	bf00      	nop
 800b954:	58024400 	.word	0x58024400
 800b958:	03d09000 	.word	0x03d09000
 800b95c:	0007a120 	.word	0x0007a120
 800b960:	07a12000 	.word	0x07a12000
 800b964:	000f4240 	.word	0x000f4240
 800b968:	001e8480 	.word	0x001e8480
 800b96c:	003d0900 	.word	0x003d0900
 800b970:	007a1200 	.word	0x007a1200
 800b974:	00a2c2aa 	.word	0x00a2c2aa
 800b978:	00c35000 	.word	0x00c35000
 800b97c:	00f42400 	.word	0x00f42400
 800b980:	01458554 	.word	0x01458554
 800b984:	01e84800 	.word	0x01e84800
 800b988:	0001e848 	.word	0x0001e848
 800b98c:	0003d090 	.word	0x0003d090
 800b990:	000a2c2a 	.word	0x000a2c2a
 800b994:	000c3500 	.word	0x000c3500
 800b998:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d04f      	beq.n	800ba44 <UART_SetConfig+0x1b34>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d048      	beq.n	800ba3e <UART_SetConfig+0x1b2e>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d041      	beq.n	800ba38 <UART_SetConfig+0x1b28>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d03a      	beq.n	800ba32 <UART_SetConfig+0x1b22>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d033      	beq.n	800ba2c <UART_SetConfig+0x1b1c>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d02c      	beq.n	800ba26 <UART_SetConfig+0x1b16>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b06      	cmp	r3, #6
 800b9d2:	d025      	beq.n	800ba20 <UART_SetConfig+0x1b10>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b07      	cmp	r3, #7
 800b9da:	d01e      	beq.n	800ba1a <UART_SetConfig+0x1b0a>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d017      	beq.n	800ba14 <UART_SetConfig+0x1b04>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b09      	cmp	r3, #9
 800b9ea:	d010      	beq.n	800ba0e <UART_SetConfig+0x1afe>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	2b0a      	cmp	r3, #10
 800b9f2:	d009      	beq.n	800ba08 <UART_SetConfig+0x1af8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b0b      	cmp	r3, #11
 800b9fa:	d102      	bne.n	800ba02 <UART_SetConfig+0x1af2>
 800b9fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba00:	e022      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba06:	e01f      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba0c:	e01c      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba12:	e019      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba18:	e016      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba1e:	e013      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba20:	f241 5354 	movw	r3, #5460	; 0x1554
 800ba24:	e010      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba26:	f641 1398 	movw	r3, #6552	; 0x1998
 800ba2a:	e00d      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba30:	e00a      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba32:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ba36:	e007      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba3c:	e004      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba42:	e001      	b.n	800ba48 <UART_SetConfig+0x1b38>
 800ba44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	6852      	ldr	r2, [r2, #4]
 800ba4c:	0852      	lsrs	r2, r2, #1
 800ba4e:	441a      	add	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba5c:	e003      	b.n	800ba66 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ba64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba68:	2b0f      	cmp	r3, #15
 800ba6a:	d916      	bls.n	800ba9a <UART_SetConfig+0x1b8a>
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba72:	d212      	bcs.n	800ba9a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f023 030f 	bic.w	r3, r3, #15
 800ba7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba80:	085b      	lsrs	r3, r3, #1
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ba96:	60da      	str	r2, [r3, #12]
 800ba98:	e3a3      	b.n	800c1e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa0:	e39f      	b.n	800c1e2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800baa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800baa6:	2b40      	cmp	r3, #64	; 0x40
 800baa8:	f200 8388 	bhi.w	800c1bc <UART_SetConfig+0x22ac>
 800baac:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <UART_SetConfig+0x1ba4>)
 800baae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab2:	bf00      	nop
 800bab4:	0800bbb9 	.word	0x0800bbb9
 800bab8:	0800bc6f 	.word	0x0800bc6f
 800babc:	0800c1bd 	.word	0x0800c1bd
 800bac0:	0800c1bd 	.word	0x0800c1bd
 800bac4:	0800bd25 	.word	0x0800bd25
 800bac8:	0800c1bd 	.word	0x0800c1bd
 800bacc:	0800c1bd 	.word	0x0800c1bd
 800bad0:	0800c1bd 	.word	0x0800c1bd
 800bad4:	0800bddf 	.word	0x0800bddf
 800bad8:	0800c1bd 	.word	0x0800c1bd
 800badc:	0800c1bd 	.word	0x0800c1bd
 800bae0:	0800c1bd 	.word	0x0800c1bd
 800bae4:	0800c1bd 	.word	0x0800c1bd
 800bae8:	0800c1bd 	.word	0x0800c1bd
 800baec:	0800c1bd 	.word	0x0800c1bd
 800baf0:	0800c1bd 	.word	0x0800c1bd
 800baf4:	0800be99 	.word	0x0800be99
 800baf8:	0800c1bd 	.word	0x0800c1bd
 800bafc:	0800c1bd 	.word	0x0800c1bd
 800bb00:	0800c1bd 	.word	0x0800c1bd
 800bb04:	0800c1bd 	.word	0x0800c1bd
 800bb08:	0800c1bd 	.word	0x0800c1bd
 800bb0c:	0800c1bd 	.word	0x0800c1bd
 800bb10:	0800c1bd 	.word	0x0800c1bd
 800bb14:	0800c1bd 	.word	0x0800c1bd
 800bb18:	0800c1bd 	.word	0x0800c1bd
 800bb1c:	0800c1bd 	.word	0x0800c1bd
 800bb20:	0800c1bd 	.word	0x0800c1bd
 800bb24:	0800c1bd 	.word	0x0800c1bd
 800bb28:	0800c1bd 	.word	0x0800c1bd
 800bb2c:	0800c1bd 	.word	0x0800c1bd
 800bb30:	0800c1bd 	.word	0x0800c1bd
 800bb34:	0800c009 	.word	0x0800c009
 800bb38:	0800c1bd 	.word	0x0800c1bd
 800bb3c:	0800c1bd 	.word	0x0800c1bd
 800bb40:	0800c1bd 	.word	0x0800c1bd
 800bb44:	0800c1bd 	.word	0x0800c1bd
 800bb48:	0800c1bd 	.word	0x0800c1bd
 800bb4c:	0800c1bd 	.word	0x0800c1bd
 800bb50:	0800c1bd 	.word	0x0800c1bd
 800bb54:	0800c1bd 	.word	0x0800c1bd
 800bb58:	0800c1bd 	.word	0x0800c1bd
 800bb5c:	0800c1bd 	.word	0x0800c1bd
 800bb60:	0800c1bd 	.word	0x0800c1bd
 800bb64:	0800c1bd 	.word	0x0800c1bd
 800bb68:	0800c1bd 	.word	0x0800c1bd
 800bb6c:	0800c1bd 	.word	0x0800c1bd
 800bb70:	0800c1bd 	.word	0x0800c1bd
 800bb74:	0800c1bd 	.word	0x0800c1bd
 800bb78:	0800c1bd 	.word	0x0800c1bd
 800bb7c:	0800c1bd 	.word	0x0800c1bd
 800bb80:	0800c1bd 	.word	0x0800c1bd
 800bb84:	0800c1bd 	.word	0x0800c1bd
 800bb88:	0800c1bd 	.word	0x0800c1bd
 800bb8c:	0800c1bd 	.word	0x0800c1bd
 800bb90:	0800c1bd 	.word	0x0800c1bd
 800bb94:	0800c1bd 	.word	0x0800c1bd
 800bb98:	0800c1bd 	.word	0x0800c1bd
 800bb9c:	0800c1bd 	.word	0x0800c1bd
 800bba0:	0800c1bd 	.word	0x0800c1bd
 800bba4:	0800c1bd 	.word	0x0800c1bd
 800bba8:	0800c1bd 	.word	0x0800c1bd
 800bbac:	0800c1bd 	.word	0x0800c1bd
 800bbb0:	0800c1bd 	.word	0x0800c1bd
 800bbb4:	0800c0fd 	.word	0x0800c0fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbb8:	f7fb fb8e 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800bbbc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d044      	beq.n	800bc50 <UART_SetConfig+0x1d40>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d03e      	beq.n	800bc4c <UART_SetConfig+0x1d3c>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d038      	beq.n	800bc48 <UART_SetConfig+0x1d38>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d032      	beq.n	800bc44 <UART_SetConfig+0x1d34>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	d02c      	beq.n	800bc40 <UART_SetConfig+0x1d30>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b05      	cmp	r3, #5
 800bbec:	d026      	beq.n	800bc3c <UART_SetConfig+0x1d2c>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b06      	cmp	r3, #6
 800bbf4:	d020      	beq.n	800bc38 <UART_SetConfig+0x1d28>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	2b07      	cmp	r3, #7
 800bbfc:	d01a      	beq.n	800bc34 <UART_SetConfig+0x1d24>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d014      	beq.n	800bc30 <UART_SetConfig+0x1d20>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	2b09      	cmp	r3, #9
 800bc0c:	d00e      	beq.n	800bc2c <UART_SetConfig+0x1d1c>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	2b0a      	cmp	r3, #10
 800bc14:	d008      	beq.n	800bc28 <UART_SetConfig+0x1d18>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	2b0b      	cmp	r3, #11
 800bc1c:	d102      	bne.n	800bc24 <UART_SetConfig+0x1d14>
 800bc1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc22:	e016      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e014      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc28:	2380      	movs	r3, #128	; 0x80
 800bc2a:	e012      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	e010      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc30:	2320      	movs	r3, #32
 800bc32:	e00e      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc34:	2310      	movs	r3, #16
 800bc36:	e00c      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc38:	230c      	movs	r3, #12
 800bc3a:	e00a      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc3c:	230a      	movs	r3, #10
 800bc3e:	e008      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc40:	2308      	movs	r3, #8
 800bc42:	e006      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc44:	2306      	movs	r3, #6
 800bc46:	e004      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc48:	2304      	movs	r3, #4
 800bc4a:	e002      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	e000      	b.n	800bc52 <UART_SetConfig+0x1d42>
 800bc50:	2301      	movs	r3, #1
 800bc52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc54:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	085b      	lsrs	r3, r3, #1
 800bc5e:	441a      	add	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc6c:	e2aa      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc6e:	f7fb fb49 	bl	8007304 <HAL_RCC_GetPCLK2Freq>
 800bc72:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d044      	beq.n	800bd06 <UART_SetConfig+0x1df6>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d03e      	beq.n	800bd02 <UART_SetConfig+0x1df2>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d038      	beq.n	800bcfe <UART_SetConfig+0x1dee>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d032      	beq.n	800bcfa <UART_SetConfig+0x1dea>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d02c      	beq.n	800bcf6 <UART_SetConfig+0x1de6>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b05      	cmp	r3, #5
 800bca2:	d026      	beq.n	800bcf2 <UART_SetConfig+0x1de2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b06      	cmp	r3, #6
 800bcaa:	d020      	beq.n	800bcee <UART_SetConfig+0x1dde>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b07      	cmp	r3, #7
 800bcb2:	d01a      	beq.n	800bcea <UART_SetConfig+0x1dda>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d014      	beq.n	800bce6 <UART_SetConfig+0x1dd6>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b09      	cmp	r3, #9
 800bcc2:	d00e      	beq.n	800bce2 <UART_SetConfig+0x1dd2>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b0a      	cmp	r3, #10
 800bcca:	d008      	beq.n	800bcde <UART_SetConfig+0x1dce>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b0b      	cmp	r3, #11
 800bcd2:	d102      	bne.n	800bcda <UART_SetConfig+0x1dca>
 800bcd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd8:	e016      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e014      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcde:	2380      	movs	r3, #128	; 0x80
 800bce0:	e012      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bce2:	2340      	movs	r3, #64	; 0x40
 800bce4:	e010      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bce6:	2320      	movs	r3, #32
 800bce8:	e00e      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcea:	2310      	movs	r3, #16
 800bcec:	e00c      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	e00a      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcf2:	230a      	movs	r3, #10
 800bcf4:	e008      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcf6:	2308      	movs	r3, #8
 800bcf8:	e006      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcfa:	2306      	movs	r3, #6
 800bcfc:	e004      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bcfe:	2304      	movs	r3, #4
 800bd00:	e002      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e000      	b.n	800bd08 <UART_SetConfig+0x1df8>
 800bd06:	2301      	movs	r3, #1
 800bd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	085b      	lsrs	r3, r3, #1
 800bd14:	441a      	add	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd22:	e24f      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd24:	f107 0318 	add.w	r3, r7, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fc fc6d 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd2e:	69fa      	ldr	r2, [r7, #28]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d044      	beq.n	800bdc2 <UART_SetConfig+0x1eb2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d03e      	beq.n	800bdbe <UART_SetConfig+0x1eae>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d038      	beq.n	800bdba <UART_SetConfig+0x1eaa>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d032      	beq.n	800bdb6 <UART_SetConfig+0x1ea6>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d02c      	beq.n	800bdb2 <UART_SetConfig+0x1ea2>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b05      	cmp	r3, #5
 800bd5e:	d026      	beq.n	800bdae <UART_SetConfig+0x1e9e>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b06      	cmp	r3, #6
 800bd66:	d020      	beq.n	800bdaa <UART_SetConfig+0x1e9a>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b07      	cmp	r3, #7
 800bd6e:	d01a      	beq.n	800bda6 <UART_SetConfig+0x1e96>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b08      	cmp	r3, #8
 800bd76:	d014      	beq.n	800bda2 <UART_SetConfig+0x1e92>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	d00e      	beq.n	800bd9e <UART_SetConfig+0x1e8e>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	2b0a      	cmp	r3, #10
 800bd86:	d008      	beq.n	800bd9a <UART_SetConfig+0x1e8a>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b0b      	cmp	r3, #11
 800bd8e:	d102      	bne.n	800bd96 <UART_SetConfig+0x1e86>
 800bd90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd94:	e016      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e014      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bd9a:	2380      	movs	r3, #128	; 0x80
 800bd9c:	e012      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bd9e:	2340      	movs	r3, #64	; 0x40
 800bda0:	e010      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bda2:	2320      	movs	r3, #32
 800bda4:	e00e      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bda6:	2310      	movs	r3, #16
 800bda8:	e00c      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	e00a      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdae:	230a      	movs	r3, #10
 800bdb0:	e008      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdb2:	2308      	movs	r3, #8
 800bdb4:	e006      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdb6:	2306      	movs	r3, #6
 800bdb8:	e004      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdba:	2304      	movs	r3, #4
 800bdbc:	e002      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e000      	b.n	800bdc4 <UART_SetConfig+0x1eb4>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	085b      	lsrs	r3, r3, #1
 800bdce:	441a      	add	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bddc:	e1f2      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdde:	f107 030c 	add.w	r3, r7, #12
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fc fd5c 	bl	80088a0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d044      	beq.n	800be7c <UART_SetConfig+0x1f6c>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d03e      	beq.n	800be78 <UART_SetConfig+0x1f68>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d038      	beq.n	800be74 <UART_SetConfig+0x1f64>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be06:	2b03      	cmp	r3, #3
 800be08:	d032      	beq.n	800be70 <UART_SetConfig+0x1f60>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d02c      	beq.n	800be6c <UART_SetConfig+0x1f5c>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be16:	2b05      	cmp	r3, #5
 800be18:	d026      	beq.n	800be68 <UART_SetConfig+0x1f58>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1e:	2b06      	cmp	r3, #6
 800be20:	d020      	beq.n	800be64 <UART_SetConfig+0x1f54>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	2b07      	cmp	r3, #7
 800be28:	d01a      	beq.n	800be60 <UART_SetConfig+0x1f50>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	2b08      	cmp	r3, #8
 800be30:	d014      	beq.n	800be5c <UART_SetConfig+0x1f4c>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	2b09      	cmp	r3, #9
 800be38:	d00e      	beq.n	800be58 <UART_SetConfig+0x1f48>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	2b0a      	cmp	r3, #10
 800be40:	d008      	beq.n	800be54 <UART_SetConfig+0x1f44>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	2b0b      	cmp	r3, #11
 800be48:	d102      	bne.n	800be50 <UART_SetConfig+0x1f40>
 800be4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be4e:	e016      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be50:	2301      	movs	r3, #1
 800be52:	e014      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be54:	2380      	movs	r3, #128	; 0x80
 800be56:	e012      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be58:	2340      	movs	r3, #64	; 0x40
 800be5a:	e010      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be5c:	2320      	movs	r3, #32
 800be5e:	e00e      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be60:	2310      	movs	r3, #16
 800be62:	e00c      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be64:	230c      	movs	r3, #12
 800be66:	e00a      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be68:	230a      	movs	r3, #10
 800be6a:	e008      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be6c:	2308      	movs	r3, #8
 800be6e:	e006      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be70:	2306      	movs	r3, #6
 800be72:	e004      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be74:	2304      	movs	r3, #4
 800be76:	e002      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be78:	2302      	movs	r3, #2
 800be7a:	e000      	b.n	800be7e <UART_SetConfig+0x1f6e>
 800be7c:	2301      	movs	r3, #1
 800be7e:	fbb2 f2f3 	udiv	r2, r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	085b      	lsrs	r3, r3, #1
 800be88:	441a      	add	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be92:	b29b      	uxth	r3, r3
 800be94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be96:	e195      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be98:	4b87      	ldr	r3, [pc, #540]	; (800c0b8 <UART_SetConfig+0x21a8>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d05d      	beq.n	800bf60 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bea4:	4b84      	ldr	r3, [pc, #528]	; (800c0b8 <UART_SetConfig+0x21a8>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	08db      	lsrs	r3, r3, #3
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	4a83      	ldr	r2, [pc, #524]	; (800c0bc <UART_SetConfig+0x21ac>)
 800beb0:	40da      	lsrs	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d044      	beq.n	800bf44 <UART_SetConfig+0x2034>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d03e      	beq.n	800bf40 <UART_SetConfig+0x2030>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d038      	beq.n	800bf3c <UART_SetConfig+0x202c>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d032      	beq.n	800bf38 <UART_SetConfig+0x2028>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d02c      	beq.n	800bf34 <UART_SetConfig+0x2024>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b05      	cmp	r3, #5
 800bee0:	d026      	beq.n	800bf30 <UART_SetConfig+0x2020>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b06      	cmp	r3, #6
 800bee8:	d020      	beq.n	800bf2c <UART_SetConfig+0x201c>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b07      	cmp	r3, #7
 800bef0:	d01a      	beq.n	800bf28 <UART_SetConfig+0x2018>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b08      	cmp	r3, #8
 800bef8:	d014      	beq.n	800bf24 <UART_SetConfig+0x2014>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b09      	cmp	r3, #9
 800bf00:	d00e      	beq.n	800bf20 <UART_SetConfig+0x2010>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b0a      	cmp	r3, #10
 800bf08:	d008      	beq.n	800bf1c <UART_SetConfig+0x200c>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b0b      	cmp	r3, #11
 800bf10:	d102      	bne.n	800bf18 <UART_SetConfig+0x2008>
 800bf12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf16:	e016      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e014      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	e012      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	e010      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf24:	2320      	movs	r3, #32
 800bf26:	e00e      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf28:	2310      	movs	r3, #16
 800bf2a:	e00c      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf2c:	230c      	movs	r3, #12
 800bf2e:	e00a      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf30:	230a      	movs	r3, #10
 800bf32:	e008      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf34:	2308      	movs	r3, #8
 800bf36:	e006      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	e004      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf3c:	2304      	movs	r3, #4
 800bf3e:	e002      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf40:	2302      	movs	r3, #2
 800bf42:	e000      	b.n	800bf46 <UART_SetConfig+0x2036>
 800bf44:	2301      	movs	r3, #1
 800bf46:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	085b      	lsrs	r3, r3, #1
 800bf50:	441a      	add	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bf5e:	e131      	b.n	800c1c4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d043      	beq.n	800bff0 <UART_SetConfig+0x20e0>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d03d      	beq.n	800bfec <UART_SetConfig+0x20dc>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d037      	beq.n	800bfe8 <UART_SetConfig+0x20d8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d031      	beq.n	800bfe4 <UART_SetConfig+0x20d4>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	d02b      	beq.n	800bfe0 <UART_SetConfig+0x20d0>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b05      	cmp	r3, #5
 800bf8e:	d025      	beq.n	800bfdc <UART_SetConfig+0x20cc>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	2b06      	cmp	r3, #6
 800bf96:	d01f      	beq.n	800bfd8 <UART_SetConfig+0x20c8>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b07      	cmp	r3, #7
 800bf9e:	d019      	beq.n	800bfd4 <UART_SetConfig+0x20c4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	2b08      	cmp	r3, #8
 800bfa6:	d013      	beq.n	800bfd0 <UART_SetConfig+0x20c0>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	2b09      	cmp	r3, #9
 800bfae:	d00d      	beq.n	800bfcc <UART_SetConfig+0x20bc>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	2b0a      	cmp	r3, #10
 800bfb6:	d007      	beq.n	800bfc8 <UART_SetConfig+0x20b8>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	2b0b      	cmp	r3, #11
 800bfbe:	d101      	bne.n	800bfc4 <UART_SetConfig+0x20b4>
 800bfc0:	4b3f      	ldr	r3, [pc, #252]	; (800c0c0 <UART_SetConfig+0x21b0>)
 800bfc2:	e016      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfc4:	4b3d      	ldr	r3, [pc, #244]	; (800c0bc <UART_SetConfig+0x21ac>)
 800bfc6:	e014      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfc8:	4b3e      	ldr	r3, [pc, #248]	; (800c0c4 <UART_SetConfig+0x21b4>)
 800bfca:	e012      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfcc:	4b3e      	ldr	r3, [pc, #248]	; (800c0c8 <UART_SetConfig+0x21b8>)
 800bfce:	e010      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfd0:	4b3e      	ldr	r3, [pc, #248]	; (800c0cc <UART_SetConfig+0x21bc>)
 800bfd2:	e00e      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfd4:	4b3e      	ldr	r3, [pc, #248]	; (800c0d0 <UART_SetConfig+0x21c0>)
 800bfd6:	e00c      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfd8:	4b3e      	ldr	r3, [pc, #248]	; (800c0d4 <UART_SetConfig+0x21c4>)
 800bfda:	e00a      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfdc:	4b3e      	ldr	r3, [pc, #248]	; (800c0d8 <UART_SetConfig+0x21c8>)
 800bfde:	e008      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfe0:	4b3e      	ldr	r3, [pc, #248]	; (800c0dc <UART_SetConfig+0x21cc>)
 800bfe2:	e006      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfe4:	4b3e      	ldr	r3, [pc, #248]	; (800c0e0 <UART_SetConfig+0x21d0>)
 800bfe6:	e004      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfe8:	4b3e      	ldr	r3, [pc, #248]	; (800c0e4 <UART_SetConfig+0x21d4>)
 800bfea:	e002      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bfec:	4b3e      	ldr	r3, [pc, #248]	; (800c0e8 <UART_SetConfig+0x21d8>)
 800bfee:	e000      	b.n	800bff2 <UART_SetConfig+0x20e2>
 800bff0:	4b32      	ldr	r3, [pc, #200]	; (800c0bc <UART_SetConfig+0x21ac>)
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6852      	ldr	r2, [r2, #4]
 800bff6:	0852      	lsrs	r2, r2, #1
 800bff8:	441a      	add	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c002:	b29b      	uxth	r3, r3
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c006:	e0dd      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d046      	beq.n	800c09e <UART_SetConfig+0x218e>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	2b01      	cmp	r3, #1
 800c016:	d040      	beq.n	800c09a <UART_SetConfig+0x218a>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d03a      	beq.n	800c096 <UART_SetConfig+0x2186>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	2b03      	cmp	r3, #3
 800c026:	d034      	beq.n	800c092 <UART_SetConfig+0x2182>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d02e      	beq.n	800c08e <UART_SetConfig+0x217e>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b05      	cmp	r3, #5
 800c036:	d028      	beq.n	800c08a <UART_SetConfig+0x217a>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b06      	cmp	r3, #6
 800c03e:	d022      	beq.n	800c086 <UART_SetConfig+0x2176>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b07      	cmp	r3, #7
 800c046:	d01c      	beq.n	800c082 <UART_SetConfig+0x2172>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	d016      	beq.n	800c07e <UART_SetConfig+0x216e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b09      	cmp	r3, #9
 800c056:	d00f      	beq.n	800c078 <UART_SetConfig+0x2168>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b0a      	cmp	r3, #10
 800c05e:	d008      	beq.n	800c072 <UART_SetConfig+0x2162>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b0b      	cmp	r3, #11
 800c066:	d102      	bne.n	800c06e <UART_SetConfig+0x215e>
 800c068:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c06c:	e018      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c06e:	4b18      	ldr	r3, [pc, #96]	; (800c0d0 <UART_SetConfig+0x21c0>)
 800c070:	e016      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c072:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c076:	e013      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c078:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c07c:	e010      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c07e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <UART_SetConfig+0x21dc>)
 800c080:	e00e      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c082:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <UART_SetConfig+0x21b0>)
 800c084:	e00c      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c086:	4b1a      	ldr	r3, [pc, #104]	; (800c0f0 <UART_SetConfig+0x21e0>)
 800c088:	e00a      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c08a:	4b1a      	ldr	r3, [pc, #104]	; (800c0f4 <UART_SetConfig+0x21e4>)
 800c08c:	e008      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <UART_SetConfig+0x21b4>)
 800c090:	e006      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c092:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <UART_SetConfig+0x21e8>)
 800c094:	e004      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c096:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <UART_SetConfig+0x21b8>)
 800c098:	e002      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c09a:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <UART_SetConfig+0x21bc>)
 800c09c:	e000      	b.n	800c0a0 <UART_SetConfig+0x2190>
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <UART_SetConfig+0x21c0>)
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6852      	ldr	r2, [r2, #4]
 800c0a4:	0852      	lsrs	r2, r2, #1
 800c0a6:	441a      	add	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0b4:	e086      	b.n	800c1c4 <UART_SetConfig+0x22b4>
 800c0b6:	bf00      	nop
 800c0b8:	58024400 	.word	0x58024400
 800c0bc:	03d09000 	.word	0x03d09000
 800c0c0:	0003d090 	.word	0x0003d090
 800c0c4:	0007a120 	.word	0x0007a120
 800c0c8:	000f4240 	.word	0x000f4240
 800c0cc:	001e8480 	.word	0x001e8480
 800c0d0:	003d0900 	.word	0x003d0900
 800c0d4:	00516155 	.word	0x00516155
 800c0d8:	0061a800 	.word	0x0061a800
 800c0dc:	007a1200 	.word	0x007a1200
 800c0e0:	00a2c2aa 	.word	0x00a2c2aa
 800c0e4:	00f42400 	.word	0x00f42400
 800c0e8:	01e84800 	.word	0x01e84800
 800c0ec:	0001e848 	.word	0x0001e848
 800c0f0:	00051615 	.word	0x00051615
 800c0f4:	00061a80 	.word	0x00061a80
 800c0f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d04e      	beq.n	800c1a2 <UART_SetConfig+0x2292>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d047      	beq.n	800c19c <UART_SetConfig+0x228c>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	2b02      	cmp	r3, #2
 800c112:	d040      	beq.n	800c196 <UART_SetConfig+0x2286>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d039      	beq.n	800c190 <UART_SetConfig+0x2280>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	2b04      	cmp	r3, #4
 800c122:	d032      	beq.n	800c18a <UART_SetConfig+0x227a>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	2b05      	cmp	r3, #5
 800c12a:	d02b      	beq.n	800c184 <UART_SetConfig+0x2274>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b06      	cmp	r3, #6
 800c132:	d024      	beq.n	800c17e <UART_SetConfig+0x226e>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d01d      	beq.n	800c178 <UART_SetConfig+0x2268>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	2b08      	cmp	r3, #8
 800c142:	d016      	beq.n	800c172 <UART_SetConfig+0x2262>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	2b09      	cmp	r3, #9
 800c14a:	d00f      	beq.n	800c16c <UART_SetConfig+0x225c>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b0a      	cmp	r3, #10
 800c152:	d008      	beq.n	800c166 <UART_SetConfig+0x2256>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	2b0b      	cmp	r3, #11
 800c15a:	d101      	bne.n	800c160 <UART_SetConfig+0x2250>
 800c15c:	2380      	movs	r3, #128	; 0x80
 800c15e:	e022      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c164:	e01f      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c16a:	e01c      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c16c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c170:	e019      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c176:	e016      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c17c:	e013      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c17e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c182:	e010      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c184:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c188:	e00d      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c18a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c18e:	e00a      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c190:	f241 5355 	movw	r3, #5461	; 0x1555
 800c194:	e007      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c19a:	e004      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c19c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1a0:	e001      	b.n	800c1a6 <UART_SetConfig+0x2296>
 800c1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6852      	ldr	r2, [r2, #4]
 800c1aa:	0852      	lsrs	r2, r2, #1
 800c1ac:	441a      	add	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1ba:	e003      	b.n	800c1c4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c1c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	2b0f      	cmp	r3, #15
 800c1c8:	d908      	bls.n	800c1dc <UART_SetConfig+0x22cc>
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d0:	d204      	bcs.n	800c1dc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	e002      	b.n	800c1e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c1fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c202:	4618      	mov	r0, r3
 800c204:	3740      	adds	r7, #64	; 0x40
 800c206:	46bd      	mov	sp, r7
 800c208:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00a      	beq.n	800c236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23a:	f003 0302 	and.w	r3, r3, #2
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25c:	f003 0304 	and.w	r3, r3, #4
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27e:	f003 0308 	and.w	r3, r3, #8
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a0:	f003 0310 	and.w	r3, r3, #16
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f003 0320 	and.w	r3, r3, #32
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01a      	beq.n	800c322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c30a:	d10a      	bne.n	800c322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	605a      	str	r2, [r3, #4]
  }
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af02      	add	r7, sp, #8
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c360:	f7f6 f86e 	bl	8002440 <HAL_GetTick>
 800c364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 0308 	and.w	r3, r3, #8
 800c370:	2b08      	cmp	r3, #8
 800c372:	d10e      	bne.n	800c392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f82c 	bl	800c3e0 <UART_WaitOnFlagUntilTimeout>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	e022      	b.n	800c3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b04      	cmp	r3, #4
 800c39e:	d10e      	bne.n	800c3be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f816 	bl	800c3e0 <UART_WaitOnFlagUntilTimeout>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e00c      	b.n	800c3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3f0:	e062      	b.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f8:	d05e      	beq.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3fa:	f7f6 f821 	bl	8002440 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	69ba      	ldr	r2, [r7, #24]
 800c406:	429a      	cmp	r2, r3
 800c408:	d302      	bcc.n	800c410 <UART_WaitOnFlagUntilTimeout+0x30>
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d11d      	bne.n	800c44c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c41e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0201 	bic.w	r2, r2, #1
 800c42e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2220      	movs	r2, #32
 800c434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e045      	b.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 0304 	and.w	r3, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	d02e      	beq.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69db      	ldr	r3, [r3, #28]
 800c460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c468:	d126      	bne.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c472:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c482:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689a      	ldr	r2, [r3, #8]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f022 0201 	bic.w	r2, r2, #1
 800c492:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2220      	movs	r2, #32
 800c498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2220      	movs	r2, #32
 800c4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e00f      	b.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	69da      	ldr	r2, [r3, #28]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	bf0c      	ite	eq
 800c4c8:	2301      	moveq	r3, #1
 800c4ca:	2300      	movne	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d08d      	beq.n	800c3f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c4f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c506:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c532:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6899      	ldr	r1, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b08      	ldr	r3, [pc, #32]	; (800c560 <UART_EndRxTransfer+0x44>)
 800c540:	400b      	ands	r3, r1
 800c542:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2220      	movs	r2, #32
 800c548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c552:	bf00      	nop
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	effffffe 	.word	0xeffffffe

0800c564 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c570:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c57a:	d01f      	beq.n	800c5bc <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c592:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689a      	ldr	r2, [r3, #8]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f022 0201 	bic.w	r2, r2, #1
 800c5a2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5b2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7f4 f8c3 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7fd fc85 	bl	8009ee8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5de:	bf00      	nop
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b086      	sub	sp, #24
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c602:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c60e:	2b80      	cmp	r3, #128	; 0x80
 800c610:	d109      	bne.n	800c626 <UART_DMAError+0x40>
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b21      	cmp	r3, #33	; 0x21
 800c616:	d106      	bne.n	800c626 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c620:	6978      	ldr	r0, [r7, #20]
 800c622:	f7ff ff5d 	bl	800c4e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c630:	2b40      	cmp	r3, #64	; 0x40
 800c632:	d109      	bne.n	800c648 <UART_DMAError+0x62>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b22      	cmp	r3, #34	; 0x22
 800c638:	d106      	bne.n	800c648 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c642:	6978      	ldr	r0, [r7, #20]
 800c644:	f7ff ff6a 	bl	800c51c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c64e:	f043 0210 	orr.w	r2, r3, #16
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c658:	6978      	ldr	r0, [r7, #20]
 800c65a:	f7fd fc4f 	bl	8009efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c65e:	bf00      	nop
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f7fd fc39 	bl	8009efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c68a:	bf00      	nop
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a0:	2b21      	cmp	r3, #33	; 0x21
 800c6a2:	d12a      	bne.n	800c6fa <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d110      	bne.n	800c6d2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6be:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6ce:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c6d0:	e013      	b.n	800c6fa <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e2:	1c5a      	adds	r2, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c706:	b480      	push	{r7}
 800c708:	b085      	sub	sp, #20
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c714:	2b21      	cmp	r3, #33	; 0x21
 800c716:	d12f      	bne.n	800c778 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c71e:	b29b      	uxth	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d110      	bne.n	800c746 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c732:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c742:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c744:	e018      	b.n	800c778 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c74a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c75a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c760:	1c9a      	adds	r2, r3, #2
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3b01      	subs	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c778:	bf00      	nop
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c792:	2b21      	cmp	r3, #33	; 0x21
 800c794:	d13d      	bne.n	800c812 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c79c:	81fb      	strh	r3, [r7, #14]
 800c79e:	e035      	b.n	800c80c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d111      	bne.n	800c7d0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	689a      	ldr	r2, [r3, #8]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c7ba:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ca:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c7cc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c7ce:	e020      	b.n	800c812 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d013      	beq.n	800c806 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e2:	781a      	ldrb	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ee:	1c5a      	adds	r2, r3, #1
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c806:	89fb      	ldrh	r3, [r7, #14]
 800c808:	3b01      	subs	r3, #1
 800c80a:	81fb      	strh	r3, [r7, #14]
 800c80c:	89fb      	ldrh	r3, [r7, #14]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1c6      	bne.n	800c7a0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c812:	bf00      	nop
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c82c:	2b21      	cmp	r3, #33	; 0x21
 800c82e:	d142      	bne.n	800c8b6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c836:	81fb      	strh	r3, [r7, #14]
 800c838:	e03a      	b.n	800c8b0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c840:	b29b      	uxth	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d111      	bne.n	800c86a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c854:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c864:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c866:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c868:	e025      	b.n	800c8b6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c874:	2b00      	cmp	r3, #0
 800c876:	d018      	beq.n	800c8aa <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c88c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c892:	1c9a      	adds	r2, r3, #2
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8aa:	89fb      	ldrh	r3, [r7, #14]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	81fb      	strh	r3, [r7, #14]
 800c8b0:	89fb      	ldrh	r3, [r7, #14]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1c1      	bne.n	800c83a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c8b6:	bf00      	nop
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7f3 feeb 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ee:	bf00      	nop
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c904:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c90c:	2b22      	cmp	r3, #34	; 0x22
 800c90e:	d13b      	bne.n	800c988 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c918:	89bb      	ldrh	r3, [r7, #12]
 800c91a:	b2d9      	uxtb	r1, r3
 800c91c:	89fb      	ldrh	r3, [r7, #14]
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c924:	400a      	ands	r2, r1
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	3b01      	subs	r3, #1
 800c93e:	b29a      	uxth	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d122      	bne.n	800c998 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c960:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689a      	ldr	r2, [r3, #8]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f022 0201 	bic.w	r2, r2, #1
 800c970:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2220      	movs	r2, #32
 800c976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7f3 fee1 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c986:	e007      	b.n	800c998 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f042 0208 	orr.w	r2, r2, #8
 800c996:	619a      	str	r2, [r3, #24]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b6:	2b22      	cmp	r3, #34	; 0x22
 800c9b8:	d13b      	bne.n	800ca32 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9c6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9c8:	89ba      	ldrh	r2, [r7, #12]
 800c9ca:	89fb      	ldrh	r3, [r7, #14]
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d8:	1c9a      	adds	r2, r3, #2
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d122      	bne.n	800ca42 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca0a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	689a      	ldr	r2, [r3, #8]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f022 0201 	bic.w	r2, r2, #1
 800ca1a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2220      	movs	r2, #32
 800ca20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7f3 fe8c 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca30:	e007      	b.n	800ca42 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	699a      	ldr	r2, [r3, #24]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f042 0208 	orr.w	r2, r2, #8
 800ca40:	619a      	str	r2, [r3, #24]
}
 800ca42:	bf00      	nop
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca5a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca62:	2b22      	cmp	r3, #34	; 0x22
 800ca64:	d166      	bne.n	800cb34 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca6c:	81fb      	strh	r3, [r7, #14]
 800ca6e:	e03d      	b.n	800caec <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca76:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca78:	893b      	ldrh	r3, [r7, #8]
 800ca7a:	b2d9      	uxtb	r1, r3
 800ca7c:	89bb      	ldrh	r3, [r7, #12]
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca84:	400a      	ands	r2, r1
 800ca86:	b2d2      	uxtb	r2, r2
 800ca88:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caac:	b29b      	uxth	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d119      	bne.n	800cae6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cac0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6899      	ldr	r1, [r3, #8]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	4b1f      	ldr	r3, [pc, #124]	; (800cb4c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800cace:	400b      	ands	r3, r1
 800cad0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2220      	movs	r2, #32
 800cad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7f3 fe31 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cae6:	89fb      	ldrh	r3, [r7, #14]
 800cae8:	3b01      	subs	r3, #1
 800caea:	81fb      	strh	r3, [r7, #14]
 800caec:	89fb      	ldrh	r3, [r7, #14]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1be      	bne.n	800ca70 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caf8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cafa:	897b      	ldrh	r3, [r7, #10]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d021      	beq.n	800cb44 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb06:	897a      	ldrh	r2, [r7, #10]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d21b      	bcs.n	800cb44 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb1a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a0c      	ldr	r2, [pc, #48]	; (800cb50 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cb20:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f042 0220 	orr.w	r2, r2, #32
 800cb30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb32:	e007      	b.n	800cb44 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f042 0208 	orr.w	r2, r2, #8
 800cb42:	619a      	str	r2, [r3, #24]
}
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	effffffe 	.word	0xeffffffe
 800cb50:	0800c8f7 	.word	0x0800c8f7

0800cb54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb62:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb6a:	2b22      	cmp	r3, #34	; 0x22
 800cb6c:	d166      	bne.n	800cc3c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb74:	82fb      	strh	r3, [r7, #22]
 800cb76:	e03d      	b.n	800cbf4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb84:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cb86:	8a3a      	ldrh	r2, [r7, #16]
 800cb88:	8abb      	ldrh	r3, [r7, #20]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb96:	1c9a      	adds	r2, r3, #2
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	3b01      	subs	r3, #1
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d119      	bne.n	800cbee <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbc8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6899      	ldr	r1, [r3, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	4b1f      	ldr	r3, [pc, #124]	; (800cc54 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cbd6:	400b      	ands	r3, r1
 800cbd8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7f3 fdad 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cbee:	8afb      	ldrh	r3, [r7, #22]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	82fb      	strh	r3, [r7, #22]
 800cbf4:	8afb      	ldrh	r3, [r7, #22]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1be      	bne.n	800cb78 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc00:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc02:	8a7b      	ldrh	r3, [r7, #18]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d021      	beq.n	800cc4c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc0e:	8a7a      	ldrh	r2, [r7, #18]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d21b      	bcs.n	800cc4c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	689a      	ldr	r2, [r3, #8]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc22:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cc28:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f042 0220 	orr.w	r2, r2, #32
 800cc38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc3a:	e007      	b.n	800cc4c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	699a      	ldr	r2, [r3, #24]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0208 	orr.w	r2, r2, #8
 800cc4a:	619a      	str	r2, [r3, #24]
}
 800cc4c:	bf00      	nop
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	effffffe 	.word	0xeffffffe
 800cc58:	0800c9a1 	.word	0x0800c9a1

0800cc5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d101      	bne.n	800ccae <HAL_UARTEx_DisableFifoMode+0x16>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	e027      	b.n	800ccfe <HAL_UARTEx_DisableFifoMode+0x66>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2224      	movs	r2, #36	; 0x24
 800ccba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f022 0201 	bic.w	r2, r2, #1
 800ccd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ccdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d101      	bne.n	800cd22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e02d      	b.n	800cd7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2224      	movs	r2, #36	; 0x24
 800cd2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0201 	bic.w	r2, r2, #1
 800cd48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f850 	bl	800ce04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2220      	movs	r2, #32
 800cd70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d101      	bne.n	800cd9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	e02d      	b.n	800cdfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2224      	movs	r2, #36	; 0x24
 800cdaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f022 0201 	bic.w	r2, r2, #1
 800cdc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f812 	bl	800ce04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b089      	sub	sp, #36	; 0x24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ce0c:	4a2f      	ldr	r2, [pc, #188]	; (800cecc <UARTEx_SetNbDataToProcess+0xc8>)
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce16:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ce1a:	4a2d      	ldr	r2, [pc, #180]	; (800ced0 <UARTEx_SetNbDataToProcess+0xcc>)
 800ce1c:	f107 030c 	add.w	r3, r7, #12
 800ce20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce24:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d108      	bne.n	800ce42 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce40:	e03d      	b.n	800cebe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce42:	2308      	movs	r3, #8
 800ce44:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce46:	2308      	movs	r3, #8
 800ce48:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	0e5b      	lsrs	r3, r3, #25
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	f003 0307 	and.w	r3, r3, #7
 800ce58:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	0f5b      	lsrs	r3, r3, #29
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f003 0307 	and.w	r3, r3, #7
 800ce68:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ce6a:	7fbb      	ldrb	r3, [r7, #30]
 800ce6c:	7f3a      	ldrb	r2, [r7, #28]
 800ce6e:	f107 0120 	add.w	r1, r7, #32
 800ce72:	440a      	add	r2, r1
 800ce74:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ce78:	fb02 f303 	mul.w	r3, r2, r3
 800ce7c:	7f3a      	ldrb	r2, [r7, #28]
 800ce7e:	f107 0120 	add.w	r1, r7, #32
 800ce82:	440a      	add	r2, r1
 800ce84:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ce88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ce94:	7ffb      	ldrb	r3, [r7, #31]
 800ce96:	7f7a      	ldrb	r2, [r7, #29]
 800ce98:	f107 0120 	add.w	r1, r7, #32
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cea2:	fb02 f303 	mul.w	r3, r2, r3
 800cea6:	7f7a      	ldrb	r2, [r7, #29]
 800cea8:	f107 0120 	add.w	r1, r7, #32
 800ceac:	440a      	add	r2, r1
 800ceae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ceb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cebe:	bf00      	nop
 800cec0:	3724      	adds	r7, #36	; 0x24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	0800df90 	.word	0x0800df90
 800ced0:	0800df98 	.word	0x0800df98

0800ced4 <__errno>:
 800ced4:	4b01      	ldr	r3, [pc, #4]	; (800cedc <__errno+0x8>)
 800ced6:	6818      	ldr	r0, [r3, #0]
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	24000050 	.word	0x24000050

0800cee0 <__libc_init_array>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	4e0d      	ldr	r6, [pc, #52]	; (800cf18 <__libc_init_array+0x38>)
 800cee4:	4c0d      	ldr	r4, [pc, #52]	; (800cf1c <__libc_init_array+0x3c>)
 800cee6:	1ba4      	subs	r4, r4, r6
 800cee8:	10a4      	asrs	r4, r4, #2
 800ceea:	2500      	movs	r5, #0
 800ceec:	42a5      	cmp	r5, r4
 800ceee:	d109      	bne.n	800cf04 <__libc_init_array+0x24>
 800cef0:	4e0b      	ldr	r6, [pc, #44]	; (800cf20 <__libc_init_array+0x40>)
 800cef2:	4c0c      	ldr	r4, [pc, #48]	; (800cf24 <__libc_init_array+0x44>)
 800cef4:	f001 f83e 	bl	800df74 <_init>
 800cef8:	1ba4      	subs	r4, r4, r6
 800cefa:	10a4      	asrs	r4, r4, #2
 800cefc:	2500      	movs	r5, #0
 800cefe:	42a5      	cmp	r5, r4
 800cf00:	d105      	bne.n	800cf0e <__libc_init_array+0x2e>
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf08:	4798      	blx	r3
 800cf0a:	3501      	adds	r5, #1
 800cf0c:	e7ee      	b.n	800ceec <__libc_init_array+0xc>
 800cf0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf12:	4798      	blx	r3
 800cf14:	3501      	adds	r5, #1
 800cf16:	e7f2      	b.n	800cefe <__libc_init_array+0x1e>
 800cf18:	0800e1e0 	.word	0x0800e1e0
 800cf1c:	0800e1e0 	.word	0x0800e1e0
 800cf20:	0800e1e0 	.word	0x0800e1e0
 800cf24:	0800e1e4 	.word	0x0800e1e4

0800cf28 <memset>:
 800cf28:	4402      	add	r2, r0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d100      	bne.n	800cf32 <memset+0xa>
 800cf30:	4770      	bx	lr
 800cf32:	f803 1b01 	strb.w	r1, [r3], #1
 800cf36:	e7f9      	b.n	800cf2c <memset+0x4>

0800cf38 <cos>:
 800cf38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf3a:	eeb0 7b40 	vmov.f64	d7, d0
 800cf3e:	ee17 3a90 	vmov	r3, s15
 800cf42:	4a19      	ldr	r2, [pc, #100]	; (800cfa8 <cos+0x70>)
 800cf44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	dc04      	bgt.n	800cf56 <cos+0x1e>
 800cf4c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800cfa0 <cos+0x68>
 800cf50:	f000 faa2 	bl	800d498 <__kernel_cos>
 800cf54:	e004      	b.n	800cf60 <cos+0x28>
 800cf56:	4a15      	ldr	r2, [pc, #84]	; (800cfac <cos+0x74>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	dd04      	ble.n	800cf66 <cos+0x2e>
 800cf5c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cf60:	b005      	add	sp, #20
 800cf62:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf66:	4668      	mov	r0, sp
 800cf68:	f000 f956 	bl	800d218 <__ieee754_rem_pio2>
 800cf6c:	f000 0003 	and.w	r0, r0, #3
 800cf70:	2801      	cmp	r0, #1
 800cf72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf76:	ed9d 0b00 	vldr	d0, [sp]
 800cf7a:	d007      	beq.n	800cf8c <cos+0x54>
 800cf7c:	2802      	cmp	r0, #2
 800cf7e:	d00a      	beq.n	800cf96 <cos+0x5e>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d0e5      	beq.n	800cf50 <cos+0x18>
 800cf84:	2001      	movs	r0, #1
 800cf86:	f000 fd8f 	bl	800daa8 <__kernel_sin>
 800cf8a:	e7e9      	b.n	800cf60 <cos+0x28>
 800cf8c:	f000 fd8c 	bl	800daa8 <__kernel_sin>
 800cf90:	eeb1 0b40 	vneg.f64	d0, d0
 800cf94:	e7e4      	b.n	800cf60 <cos+0x28>
 800cf96:	f000 fa7f 	bl	800d498 <__kernel_cos>
 800cf9a:	e7f9      	b.n	800cf90 <cos+0x58>
 800cf9c:	f3af 8000 	nop.w
	...
 800cfa8:	3fe921fb 	.word	0x3fe921fb
 800cfac:	7fefffff 	.word	0x7fefffff

0800cfb0 <atan2>:
 800cfb0:	f000 b84e 	b.w	800d050 <__ieee754_atan2>
 800cfb4:	0000      	movs	r0, r0
	...

0800cfb8 <sqrt>:
 800cfb8:	b500      	push	{lr}
 800cfba:	ed2d 8b02 	vpush	{d8}
 800cfbe:	eeb0 8b40 	vmov.f64	d8, d0
 800cfc2:	b08b      	sub	sp, #44	; 0x2c
 800cfc4:	f000 fa64 	bl	800d490 <__ieee754_sqrt>
 800cfc8:	4b1f      	ldr	r3, [pc, #124]	; (800d048 <sqrt+0x90>)
 800cfca:	f993 3000 	ldrsb.w	r3, [r3]
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	d024      	beq.n	800d01c <sqrt+0x64>
 800cfd2:	eeb4 8b48 	vcmp.f64	d8, d8
 800cfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfda:	d61f      	bvs.n	800d01c <sqrt+0x64>
 800cfdc:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d040 <sqrt+0x88>
 800cfe0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe8:	d518      	bpl.n	800d01c <sqrt+0x64>
 800cfea:	2201      	movs	r2, #1
 800cfec:	9200      	str	r2, [sp, #0]
 800cfee:	4a17      	ldr	r2, [pc, #92]	; (800d04c <sqrt+0x94>)
 800cff0:	9201      	str	r2, [sp, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	9208      	str	r2, [sp, #32]
 800cff6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cffa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cffe:	b993      	cbnz	r3, 800d026 <sqrt+0x6e>
 800d000:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d004:	4668      	mov	r0, sp
 800d006:	f000 ff23 	bl	800de50 <matherr>
 800d00a:	b190      	cbz	r0, 800d032 <sqrt+0x7a>
 800d00c:	9b08      	ldr	r3, [sp, #32]
 800d00e:	b11b      	cbz	r3, 800d018 <sqrt+0x60>
 800d010:	f7ff ff60 	bl	800ced4 <__errno>
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	6003      	str	r3, [r0, #0]
 800d018:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d01c:	b00b      	add	sp, #44	; 0x2c
 800d01e:	ecbd 8b02 	vpop	{d8}
 800d022:	f85d fb04 	ldr.w	pc, [sp], #4
 800d026:	2b02      	cmp	r3, #2
 800d028:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d02c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d030:	d1e8      	bne.n	800d004 <sqrt+0x4c>
 800d032:	f7ff ff4f 	bl	800ced4 <__errno>
 800d036:	2321      	movs	r3, #33	; 0x21
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	e7e7      	b.n	800d00c <sqrt+0x54>
 800d03c:	f3af 8000 	nop.w
	...
 800d048:	240000b4 	.word	0x240000b4
 800d04c:	0800dfb8 	.word	0x0800dfb8

0800d050 <__ieee754_atan2>:
 800d050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d052:	ee11 6a10 	vmov	r6, s2
 800d056:	ee11 0a90 	vmov	r0, s3
 800d05a:	4273      	negs	r3, r6
 800d05c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d060:	4333      	orrs	r3, r6
 800d062:	4f6b      	ldr	r7, [pc, #428]	; (800d210 <__ieee754_atan2+0x1c0>)
 800d064:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d068:	42bb      	cmp	r3, r7
 800d06a:	ed8d 0b00 	vstr	d0, [sp]
 800d06e:	d80b      	bhi.n	800d088 <__ieee754_atan2+0x38>
 800d070:	e9dd c500 	ldrd	ip, r5, [sp]
 800d074:	f1cc 0100 	rsb	r1, ip, #0
 800d078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d07c:	ea41 010c 	orr.w	r1, r1, ip
 800d080:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800d084:	42b9      	cmp	r1, r7
 800d086:	d906      	bls.n	800d096 <__ieee754_atan2+0x46>
 800d088:	ed9d 7b00 	vldr	d7, [sp]
 800d08c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800d090:	ed8d 7b00 	vstr	d7, [sp]
 800d094:	e063      	b.n	800d15e <__ieee754_atan2+0x10e>
 800d096:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800d09a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800d09e:	4331      	orrs	r1, r6
 800d0a0:	d104      	bne.n	800d0ac <__ieee754_atan2+0x5c>
 800d0a2:	b003      	add	sp, #12
 800d0a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0a8:	f000 bd56 	b.w	800db58 <atan>
 800d0ac:	1784      	asrs	r4, r0, #30
 800d0ae:	f004 0402 	and.w	r4, r4, #2
 800d0b2:	ea53 010c 	orrs.w	r1, r3, ip
 800d0b6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800d0ba:	d109      	bne.n	800d0d0 <__ieee754_atan2+0x80>
 800d0bc:	2c02      	cmp	r4, #2
 800d0be:	d078      	beq.n	800d1b2 <__ieee754_atan2+0x162>
 800d0c0:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800d1b8 <__ieee754_atan2+0x168>
 800d0c4:	ed9d 6b00 	vldr	d6, [sp]
 800d0c8:	2c03      	cmp	r4, #3
 800d0ca:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d0ce:	e7df      	b.n	800d090 <__ieee754_atan2+0x40>
 800d0d0:	ea52 0106 	orrs.w	r1, r2, r6
 800d0d4:	d107      	bne.n	800d0e6 <__ieee754_atan2+0x96>
 800d0d6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d1c0 <__ieee754_atan2+0x170>
 800d0da:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d1c8 <__ieee754_atan2+0x178>
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	fe26 7b07 	vselge.f64	d7, d6, d7
 800d0e4:	e7d4      	b.n	800d090 <__ieee754_atan2+0x40>
 800d0e6:	42ba      	cmp	r2, r7
 800d0e8:	d120      	bne.n	800d12c <__ieee754_atan2+0xdc>
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d111      	bne.n	800d112 <__ieee754_atan2+0xc2>
 800d0ee:	2c02      	cmp	r4, #2
 800d0f0:	d009      	beq.n	800d106 <__ieee754_atan2+0xb6>
 800d0f2:	2c03      	cmp	r4, #3
 800d0f4:	d00a      	beq.n	800d10c <__ieee754_atan2+0xbc>
 800d0f6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d1d0 <__ieee754_atan2+0x180>
 800d0fa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d1d8 <__ieee754_atan2+0x188>
 800d0fe:	2c01      	cmp	r4, #1
 800d100:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d104:	e7c4      	b.n	800d090 <__ieee754_atan2+0x40>
 800d106:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d1e0 <__ieee754_atan2+0x190>
 800d10a:	e7c1      	b.n	800d090 <__ieee754_atan2+0x40>
 800d10c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d1e8 <__ieee754_atan2+0x198>
 800d110:	e7be      	b.n	800d090 <__ieee754_atan2+0x40>
 800d112:	2c02      	cmp	r4, #2
 800d114:	d04d      	beq.n	800d1b2 <__ieee754_atan2+0x162>
 800d116:	2c03      	cmp	r4, #3
 800d118:	d005      	beq.n	800d126 <__ieee754_atan2+0xd6>
 800d11a:	2c01      	cmp	r4, #1
 800d11c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800d1f0 <__ieee754_atan2+0x1a0>
 800d120:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d1f8 <__ieee754_atan2+0x1a8>
 800d124:	e7ec      	b.n	800d100 <__ieee754_atan2+0xb0>
 800d126:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800d1b8 <__ieee754_atan2+0x168>
 800d12a:	e7b1      	b.n	800d090 <__ieee754_atan2+0x40>
 800d12c:	42bb      	cmp	r3, r7
 800d12e:	d0d2      	beq.n	800d0d6 <__ieee754_atan2+0x86>
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	151b      	asrs	r3, r3, #20
 800d134:	2b3c      	cmp	r3, #60	; 0x3c
 800d136:	dc16      	bgt.n	800d166 <__ieee754_atan2+0x116>
 800d138:	2800      	cmp	r0, #0
 800d13a:	da01      	bge.n	800d140 <__ieee754_atan2+0xf0>
 800d13c:	333c      	adds	r3, #60	; 0x3c
 800d13e:	db17      	blt.n	800d170 <__ieee754_atan2+0x120>
 800d140:	ed9d 7b00 	vldr	d7, [sp]
 800d144:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800d148:	f000 fe00 	bl	800dd4c <fabs>
 800d14c:	f000 fd04 	bl	800db58 <atan>
 800d150:	ed8d 0b00 	vstr	d0, [sp]
 800d154:	2c01      	cmp	r4, #1
 800d156:	d00e      	beq.n	800d176 <__ieee754_atan2+0x126>
 800d158:	2c02      	cmp	r4, #2
 800d15a:	d014      	beq.n	800d186 <__ieee754_atan2+0x136>
 800d15c:	b9f4      	cbnz	r4, 800d19c <__ieee754_atan2+0x14c>
 800d15e:	ed9d 0b00 	vldr	d0, [sp]
 800d162:	b003      	add	sp, #12
 800d164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d166:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d1c0 <__ieee754_atan2+0x170>
 800d16a:	ed8d 7b00 	vstr	d7, [sp]
 800d16e:	e7f1      	b.n	800d154 <__ieee754_atan2+0x104>
 800d170:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d1f8 <__ieee754_atan2+0x1a8>
 800d174:	e7f9      	b.n	800d16a <__ieee754_atan2+0x11a>
 800d176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d17a:	9901      	ldr	r1, [sp, #4]
 800d17c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d180:	e9cd 2300 	strd	r2, r3, [sp]
 800d184:	e7eb      	b.n	800d15e <__ieee754_atan2+0x10e>
 800d186:	ed9d 6b00 	vldr	d6, [sp]
 800d18a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800d200 <__ieee754_atan2+0x1b0>
 800d18e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d192:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800d208 <__ieee754_atan2+0x1b8>
 800d196:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d19a:	e779      	b.n	800d090 <__ieee754_atan2+0x40>
 800d19c:	ed9d 6b00 	vldr	d6, [sp]
 800d1a0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d200 <__ieee754_atan2+0x1b0>
 800d1a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1a8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800d208 <__ieee754_atan2+0x1b8>
 800d1ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1b0:	e76e      	b.n	800d090 <__ieee754_atan2+0x40>
 800d1b2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d208 <__ieee754_atan2+0x1b8>
 800d1b6:	e76b      	b.n	800d090 <__ieee754_atan2+0x40>
 800d1b8:	54442d18 	.word	0x54442d18
 800d1bc:	c00921fb 	.word	0xc00921fb
 800d1c0:	54442d18 	.word	0x54442d18
 800d1c4:	3ff921fb 	.word	0x3ff921fb
 800d1c8:	54442d18 	.word	0x54442d18
 800d1cc:	bff921fb 	.word	0xbff921fb
 800d1d0:	54442d18 	.word	0x54442d18
 800d1d4:	bfe921fb 	.word	0xbfe921fb
 800d1d8:	54442d18 	.word	0x54442d18
 800d1dc:	3fe921fb 	.word	0x3fe921fb
 800d1e0:	7f3321d2 	.word	0x7f3321d2
 800d1e4:	4002d97c 	.word	0x4002d97c
 800d1e8:	7f3321d2 	.word	0x7f3321d2
 800d1ec:	c002d97c 	.word	0xc002d97c
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	80000000 	.word	0x80000000
	...
 800d200:	33145c07 	.word	0x33145c07
 800d204:	3ca1a626 	.word	0x3ca1a626
 800d208:	54442d18 	.word	0x54442d18
 800d20c:	400921fb 	.word	0x400921fb
 800d210:	7ff00000 	.word	0x7ff00000
 800d214:	00000000 	.word	0x00000000

0800d218 <__ieee754_rem_pio2>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	eeb0 7b40 	vmov.f64	d7, d0
 800d21e:	ee17 5a90 	vmov	r5, s15
 800d222:	4b95      	ldr	r3, [pc, #596]	; (800d478 <__ieee754_rem_pio2+0x260>)
 800d224:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d228:	429e      	cmp	r6, r3
 800d22a:	b088      	sub	sp, #32
 800d22c:	4604      	mov	r4, r0
 800d22e:	dc07      	bgt.n	800d240 <__ieee754_rem_pio2+0x28>
 800d230:	2200      	movs	r2, #0
 800d232:	2300      	movs	r3, #0
 800d234:	ed84 0b00 	vstr	d0, [r4]
 800d238:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d23c:	2000      	movs	r0, #0
 800d23e:	e01b      	b.n	800d278 <__ieee754_rem_pio2+0x60>
 800d240:	4b8e      	ldr	r3, [pc, #568]	; (800d47c <__ieee754_rem_pio2+0x264>)
 800d242:	429e      	cmp	r6, r3
 800d244:	dc3b      	bgt.n	800d2be <__ieee754_rem_pio2+0xa6>
 800d246:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d24a:	2d00      	cmp	r5, #0
 800d24c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d438 <__ieee754_rem_pio2+0x220>
 800d250:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d254:	dd19      	ble.n	800d28a <__ieee754_rem_pio2+0x72>
 800d256:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d25a:	429e      	cmp	r6, r3
 800d25c:	d00e      	beq.n	800d27c <__ieee754_rem_pio2+0x64>
 800d25e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d440 <__ieee754_rem_pio2+0x228>
 800d262:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d266:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d26a:	ed84 5b00 	vstr	d5, [r4]
 800d26e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d272:	ed84 7b02 	vstr	d7, [r4, #8]
 800d276:	2001      	movs	r0, #1
 800d278:	b008      	add	sp, #32
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d448 <__ieee754_rem_pio2+0x230>
 800d280:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d284:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d450 <__ieee754_rem_pio2+0x238>
 800d288:	e7eb      	b.n	800d262 <__ieee754_rem_pio2+0x4a>
 800d28a:	429e      	cmp	r6, r3
 800d28c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d290:	d00e      	beq.n	800d2b0 <__ieee754_rem_pio2+0x98>
 800d292:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d440 <__ieee754_rem_pio2+0x228>
 800d296:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d29a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d29e:	ed84 5b00 	vstr	d5, [r4]
 800d2a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2aa:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2ae:	e7e3      	b.n	800d278 <__ieee754_rem_pio2+0x60>
 800d2b0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d448 <__ieee754_rem_pio2+0x230>
 800d2b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d2b8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d450 <__ieee754_rem_pio2+0x238>
 800d2bc:	e7eb      	b.n	800d296 <__ieee754_rem_pio2+0x7e>
 800d2be:	4b70      	ldr	r3, [pc, #448]	; (800d480 <__ieee754_rem_pio2+0x268>)
 800d2c0:	429e      	cmp	r6, r3
 800d2c2:	dc6c      	bgt.n	800d39e <__ieee754_rem_pio2+0x186>
 800d2c4:	f000 fd42 	bl	800dd4c <fabs>
 800d2c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d2cc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d458 <__ieee754_rem_pio2+0x240>
 800d2d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d2d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d2d8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d2dc:	ee17 0a90 	vmov	r0, s15
 800d2e0:	eeb1 5b44 	vneg.f64	d5, d4
 800d2e4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d438 <__ieee754_rem_pio2+0x220>
 800d2e8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d2ec:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d440 <__ieee754_rem_pio2+0x228>
 800d2f0:	281f      	cmp	r0, #31
 800d2f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d2f6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d2fa:	dc08      	bgt.n	800d30e <__ieee754_rem_pio2+0xf6>
 800d2fc:	1e42      	subs	r2, r0, #1
 800d2fe:	4b61      	ldr	r3, [pc, #388]	; (800d484 <__ieee754_rem_pio2+0x26c>)
 800d300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d304:	42b3      	cmp	r3, r6
 800d306:	d002      	beq.n	800d30e <__ieee754_rem_pio2+0xf6>
 800d308:	ed84 6b00 	vstr	d6, [r4]
 800d30c:	e022      	b.n	800d354 <__ieee754_rem_pio2+0x13c>
 800d30e:	ee16 3a90 	vmov	r3, s13
 800d312:	1536      	asrs	r6, r6, #20
 800d314:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d318:	1af3      	subs	r3, r6, r3
 800d31a:	2b10      	cmp	r3, #16
 800d31c:	ddf4      	ble.n	800d308 <__ieee754_rem_pio2+0xf0>
 800d31e:	eeb0 6b40 	vmov.f64	d6, d0
 800d322:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d448 <__ieee754_rem_pio2+0x230>
 800d326:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d32a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d32e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d332:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d450 <__ieee754_rem_pio2+0x238>
 800d336:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d33a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d33e:	ee13 3a90 	vmov	r3, s7
 800d342:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d346:	1af6      	subs	r6, r6, r3
 800d348:	2e31      	cmp	r6, #49	; 0x31
 800d34a:	dc17      	bgt.n	800d37c <__ieee754_rem_pio2+0x164>
 800d34c:	eeb0 0b46 	vmov.f64	d0, d6
 800d350:	ed84 3b00 	vstr	d3, [r4]
 800d354:	ed94 6b00 	vldr	d6, [r4]
 800d358:	2d00      	cmp	r5, #0
 800d35a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d35e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d362:	ed84 7b02 	vstr	d7, [r4, #8]
 800d366:	da87      	bge.n	800d278 <__ieee754_rem_pio2+0x60>
 800d368:	eeb1 6b46 	vneg.f64	d6, d6
 800d36c:	ed84 6b00 	vstr	d6, [r4]
 800d370:	eeb1 7b47 	vneg.f64	d7, d7
 800d374:	4240      	negs	r0, r0
 800d376:	ed84 7b02 	vstr	d7, [r4, #8]
 800d37a:	e77d      	b.n	800d278 <__ieee754_rem_pio2+0x60>
 800d37c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d460 <__ieee754_rem_pio2+0x248>
 800d380:	eeb0 0b46 	vmov.f64	d0, d6
 800d384:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d388:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d38c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d468 <__ieee754_rem_pio2+0x250>
 800d390:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d394:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d398:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d39c:	e7b4      	b.n	800d308 <__ieee754_rem_pio2+0xf0>
 800d39e:	4b3a      	ldr	r3, [pc, #232]	; (800d488 <__ieee754_rem_pio2+0x270>)
 800d3a0:	429e      	cmp	r6, r3
 800d3a2:	dd06      	ble.n	800d3b2 <__ieee754_rem_pio2+0x19a>
 800d3a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d3a8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d3ac:	ed80 7b00 	vstr	d7, [r0]
 800d3b0:	e744      	b.n	800d23c <__ieee754_rem_pio2+0x24>
 800d3b2:	1532      	asrs	r2, r6, #20
 800d3b4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d3b8:	ee10 0a10 	vmov	r0, s0
 800d3bc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d3c0:	ec41 0b17 	vmov	d7, r0, r1
 800d3c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d3c8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d470 <__ieee754_rem_pio2+0x258>
 800d3cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d3d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d3d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d3dc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d3e0:	a908      	add	r1, sp, #32
 800d3e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d3e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3ea:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d3ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d3f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	ed31 7b02 	vldmdb	r1!, {d7}
 800d3fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d404:	f103 30ff 	add.w	r0, r3, #4294967295
 800d408:	d013      	beq.n	800d432 <__ieee754_rem_pio2+0x21a>
 800d40a:	4920      	ldr	r1, [pc, #128]	; (800d48c <__ieee754_rem_pio2+0x274>)
 800d40c:	9101      	str	r1, [sp, #4]
 800d40e:	2102      	movs	r1, #2
 800d410:	9100      	str	r1, [sp, #0]
 800d412:	a802      	add	r0, sp, #8
 800d414:	4621      	mov	r1, r4
 800d416:	f000 f8ab 	bl	800d570 <__kernel_rem_pio2>
 800d41a:	2d00      	cmp	r5, #0
 800d41c:	f6bf af2c 	bge.w	800d278 <__ieee754_rem_pio2+0x60>
 800d420:	ed94 7b00 	vldr	d7, [r4]
 800d424:	eeb1 7b47 	vneg.f64	d7, d7
 800d428:	ed84 7b00 	vstr	d7, [r4]
 800d42c:	ed94 7b02 	vldr	d7, [r4, #8]
 800d430:	e79e      	b.n	800d370 <__ieee754_rem_pio2+0x158>
 800d432:	4603      	mov	r3, r0
 800d434:	e7e0      	b.n	800d3f8 <__ieee754_rem_pio2+0x1e0>
 800d436:	bf00      	nop
 800d438:	54400000 	.word	0x54400000
 800d43c:	3ff921fb 	.word	0x3ff921fb
 800d440:	1a626331 	.word	0x1a626331
 800d444:	3dd0b461 	.word	0x3dd0b461
 800d448:	1a600000 	.word	0x1a600000
 800d44c:	3dd0b461 	.word	0x3dd0b461
 800d450:	2e037073 	.word	0x2e037073
 800d454:	3ba3198a 	.word	0x3ba3198a
 800d458:	6dc9c883 	.word	0x6dc9c883
 800d45c:	3fe45f30 	.word	0x3fe45f30
 800d460:	2e000000 	.word	0x2e000000
 800d464:	3ba3198a 	.word	0x3ba3198a
 800d468:	252049c1 	.word	0x252049c1
 800d46c:	397b839a 	.word	0x397b839a
 800d470:	00000000 	.word	0x00000000
 800d474:	41700000 	.word	0x41700000
 800d478:	3fe921fb 	.word	0x3fe921fb
 800d47c:	4002d97b 	.word	0x4002d97b
 800d480:	413921fb 	.word	0x413921fb
 800d484:	0800dfc0 	.word	0x0800dfc0
 800d488:	7fefffff 	.word	0x7fefffff
 800d48c:	0800e040 	.word	0x0800e040

0800d490 <__ieee754_sqrt>:
 800d490:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d494:	4770      	bx	lr
	...

0800d498 <__kernel_cos>:
 800d498:	ee10 1a90 	vmov	r1, s1
 800d49c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d4a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d4a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d4a8:	da05      	bge.n	800d4b6 <__kernel_cos+0x1e>
 800d4aa:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d4ae:	ee16 3a90 	vmov	r3, s13
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d03d      	beq.n	800d532 <__kernel_cos+0x9a>
 800d4b6:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d4ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d4be:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d538 <__kernel_cos+0xa0>
 800d4c2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d4c6:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d4ca:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d540 <__kernel_cos+0xa8>
 800d4ce:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d4d2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d548 <__kernel_cos+0xb0>
 800d4d6:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d4da:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d550 <__kernel_cos+0xb8>
 800d4de:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d4e2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d558 <__kernel_cos+0xc0>
 800d4e6:	4b20      	ldr	r3, [pc, #128]	; (800d568 <__kernel_cos+0xd0>)
 800d4e8:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d4ec:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d560 <__kernel_cos+0xc8>
 800d4f0:	4299      	cmp	r1, r3
 800d4f2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d4f6:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d4fa:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d4fe:	dc04      	bgt.n	800d50a <__kernel_cos+0x72>
 800d500:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d504:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d508:	4770      	bx	lr
 800d50a:	4b18      	ldr	r3, [pc, #96]	; (800d56c <__kernel_cos+0xd4>)
 800d50c:	4299      	cmp	r1, r3
 800d50e:	dc0d      	bgt.n	800d52c <__kernel_cos+0x94>
 800d510:	2200      	movs	r2, #0
 800d512:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d516:	ec43 2b15 	vmov	d5, r2, r3
 800d51a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d51e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d522:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d526:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d52a:	4770      	bx	lr
 800d52c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d530:	e7f3      	b.n	800d51a <__kernel_cos+0x82>
 800d532:	eeb0 0b47 	vmov.f64	d0, d7
 800d536:	4770      	bx	lr
 800d538:	be8838d4 	.word	0xbe8838d4
 800d53c:	bda8fae9 	.word	0xbda8fae9
 800d540:	bdb4b1c4 	.word	0xbdb4b1c4
 800d544:	3e21ee9e 	.word	0x3e21ee9e
 800d548:	809c52ad 	.word	0x809c52ad
 800d54c:	be927e4f 	.word	0xbe927e4f
 800d550:	19cb1590 	.word	0x19cb1590
 800d554:	3efa01a0 	.word	0x3efa01a0
 800d558:	16c15177 	.word	0x16c15177
 800d55c:	bf56c16c 	.word	0xbf56c16c
 800d560:	5555554c 	.word	0x5555554c
 800d564:	3fa55555 	.word	0x3fa55555
 800d568:	3fd33332 	.word	0x3fd33332
 800d56c:	3fe90000 	.word	0x3fe90000

0800d570 <__kernel_rem_pio2>:
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	ed2d 8b06 	vpush	{d8-d10}
 800d578:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d57c:	469b      	mov	fp, r3
 800d57e:	460e      	mov	r6, r1
 800d580:	4bc7      	ldr	r3, [pc, #796]	; (800d8a0 <__kernel_rem_pio2+0x330>)
 800d582:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d584:	9002      	str	r0, [sp, #8]
 800d586:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d58a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d58c:	1ed1      	subs	r1, r2, #3
 800d58e:	2318      	movs	r3, #24
 800d590:	f06f 0417 	mvn.w	r4, #23
 800d594:	fb91 f1f3 	sdiv	r1, r1, r3
 800d598:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d59c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d5a0:	fb01 4404 	mla	r4, r1, r4, r4
 800d5a4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d888 <__kernel_rem_pio2+0x318>
 800d5a8:	4414      	add	r4, r2
 800d5aa:	eba1 050a 	sub.w	r5, r1, sl
 800d5ae:	aa1a      	add	r2, sp, #104	; 0x68
 800d5b0:	eb09 070a 	add.w	r7, r9, sl
 800d5b4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d5b8:	4696      	mov	lr, r2
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	42bb      	cmp	r3, r7
 800d5be:	dd0f      	ble.n	800d5e0 <__kernel_rem_pio2+0x70>
 800d5c0:	af6a      	add	r7, sp, #424	; 0x1a8
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	454a      	cmp	r2, r9
 800d5c6:	dc28      	bgt.n	800d61a <__kernel_rem_pio2+0xaa>
 800d5c8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d5cc:	eb0b 0302 	add.w	r3, fp, r2
 800d5d0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d5d4:	9d02      	ldr	r5, [sp, #8]
 800d5d6:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d888 <__kernel_rem_pio2+0x318>
 800d5da:	f04f 0c00 	mov.w	ip, #0
 800d5de:	e016      	b.n	800d60e <__kernel_rem_pio2+0x9e>
 800d5e0:	42dd      	cmn	r5, r3
 800d5e2:	d409      	bmi.n	800d5f8 <__kernel_rem_pio2+0x88>
 800d5e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d5e8:	ee07 2a90 	vmov	s15, r2
 800d5ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5f0:	ecae 7b02 	vstmia	lr!, {d7}
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	e7e1      	b.n	800d5bc <__kernel_rem_pio2+0x4c>
 800d5f8:	eeb0 7b46 	vmov.f64	d7, d6
 800d5fc:	e7f8      	b.n	800d5f0 <__kernel_rem_pio2+0x80>
 800d5fe:	ecb5 5b02 	vldmia	r5!, {d5}
 800d602:	ed33 6b02 	vldmdb	r3!, {d6}
 800d606:	f10c 0c01 	add.w	ip, ip, #1
 800d60a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d60e:	45d4      	cmp	ip, sl
 800d610:	ddf5      	ble.n	800d5fe <__kernel_rem_pio2+0x8e>
 800d612:	eca7 7b02 	vstmia	r7!, {d7}
 800d616:	3201      	adds	r2, #1
 800d618:	e7d4      	b.n	800d5c4 <__kernel_rem_pio2+0x54>
 800d61a:	ab06      	add	r3, sp, #24
 800d61c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d620:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d890 <__kernel_rem_pio2+0x320>
 800d624:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d898 <__kernel_rem_pio2+0x328>
 800d628:	9304      	str	r3, [sp, #16]
 800d62a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	464d      	mov	r5, r9
 800d632:	ab92      	add	r3, sp, #584	; 0x248
 800d634:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d638:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d63c:	3f01      	subs	r7, #1
 800d63e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d642:	00ff      	lsls	r7, r7, #3
 800d644:	ab92      	add	r3, sp, #584	; 0x248
 800d646:	19da      	adds	r2, r3, r7
 800d648:	3a98      	subs	r2, #152	; 0x98
 800d64a:	2300      	movs	r3, #0
 800d64c:	1ae9      	subs	r1, r5, r3
 800d64e:	2900      	cmp	r1, #0
 800d650:	dc4e      	bgt.n	800d6f0 <__kernel_rem_pio2+0x180>
 800d652:	4620      	mov	r0, r4
 800d654:	f000 fc00 	bl	800de58 <scalbn>
 800d658:	eeb0 8b40 	vmov.f64	d8, d0
 800d65c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d660:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d664:	f000 fb7c 	bl	800dd60 <floor>
 800d668:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d66c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d670:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d674:	2c00      	cmp	r4, #0
 800d676:	edcd 7a01 	vstr	s15, [sp, #4]
 800d67a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d67e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d682:	dd4a      	ble.n	800d71a <__kernel_rem_pio2+0x1aa>
 800d684:	1e69      	subs	r1, r5, #1
 800d686:	ab06      	add	r3, sp, #24
 800d688:	f1c4 0018 	rsb	r0, r4, #24
 800d68c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d690:	9a01      	ldr	r2, [sp, #4]
 800d692:	fa4c f300 	asr.w	r3, ip, r0
 800d696:	441a      	add	r2, r3
 800d698:	4083      	lsls	r3, r0
 800d69a:	9201      	str	r2, [sp, #4]
 800d69c:	ebac 0203 	sub.w	r2, ip, r3
 800d6a0:	ab06      	add	r3, sp, #24
 800d6a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d6a6:	f1c4 0317 	rsb	r3, r4, #23
 800d6aa:	fa42 f803 	asr.w	r8, r2, r3
 800d6ae:	f1b8 0f00 	cmp.w	r8, #0
 800d6b2:	dd43      	ble.n	800d73c <__kernel_rem_pio2+0x1cc>
 800d6b4:	9b01      	ldr	r3, [sp, #4]
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	4601      	mov	r1, r0
 800d6be:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d6c2:	4285      	cmp	r5, r0
 800d6c4:	dc6e      	bgt.n	800d7a4 <__kernel_rem_pio2+0x234>
 800d6c6:	2c00      	cmp	r4, #0
 800d6c8:	dd04      	ble.n	800d6d4 <__kernel_rem_pio2+0x164>
 800d6ca:	2c01      	cmp	r4, #1
 800d6cc:	d07f      	beq.n	800d7ce <__kernel_rem_pio2+0x25e>
 800d6ce:	2c02      	cmp	r4, #2
 800d6d0:	f000 8087 	beq.w	800d7e2 <__kernel_rem_pio2+0x272>
 800d6d4:	f1b8 0f02 	cmp.w	r8, #2
 800d6d8:	d130      	bne.n	800d73c <__kernel_rem_pio2+0x1cc>
 800d6da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d6de:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d6e2:	b359      	cbz	r1, 800d73c <__kernel_rem_pio2+0x1cc>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fbb7 	bl	800de58 <scalbn>
 800d6ea:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d6ee:	e025      	b.n	800d73c <__kernel_rem_pio2+0x1cc>
 800d6f0:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d6f4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d6f8:	a806      	add	r0, sp, #24
 800d6fa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d6fe:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d702:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d706:	ee10 1a10 	vmov	r1, s0
 800d70a:	ed32 0b02 	vldmdb	r2!, {d0}
 800d70e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d712:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d716:	3301      	adds	r3, #1
 800d718:	e798      	b.n	800d64c <__kernel_rem_pio2+0xdc>
 800d71a:	d106      	bne.n	800d72a <__kernel_rem_pio2+0x1ba>
 800d71c:	1e6b      	subs	r3, r5, #1
 800d71e:	aa06      	add	r2, sp, #24
 800d720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d724:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d728:	e7c1      	b.n	800d6ae <__kernel_rem_pio2+0x13e>
 800d72a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d72e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d736:	da32      	bge.n	800d79e <__kernel_rem_pio2+0x22e>
 800d738:	f04f 0800 	mov.w	r8, #0
 800d73c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	f040 80b0 	bne.w	800d8a8 <__kernel_rem_pio2+0x338>
 800d748:	1e6b      	subs	r3, r5, #1
 800d74a:	4618      	mov	r0, r3
 800d74c:	2200      	movs	r2, #0
 800d74e:	4548      	cmp	r0, r9
 800d750:	da4e      	bge.n	800d7f0 <__kernel_rem_pio2+0x280>
 800d752:	2a00      	cmp	r2, #0
 800d754:	f000 8088 	beq.w	800d868 <__kernel_rem_pio2+0x2f8>
 800d758:	aa06      	add	r2, sp, #24
 800d75a:	3c18      	subs	r4, #24
 800d75c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d760:	2900      	cmp	r1, #0
 800d762:	f000 808e 	beq.w	800d882 <__kernel_rem_pio2+0x312>
 800d766:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d76a:	4620      	mov	r0, r4
 800d76c:	9302      	str	r3, [sp, #8]
 800d76e:	f000 fb73 	bl	800de58 <scalbn>
 800d772:	9b02      	ldr	r3, [sp, #8]
 800d774:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d776:	00d9      	lsls	r1, r3, #3
 800d778:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d890 <__kernel_rem_pio2+0x320>
 800d77c:	1850      	adds	r0, r2, r1
 800d77e:	f100 0508 	add.w	r5, r0, #8
 800d782:	461c      	mov	r4, r3
 800d784:	2c00      	cmp	r4, #0
 800d786:	f280 80bd 	bge.w	800d904 <__kernel_rem_pio2+0x394>
 800d78a:	2500      	movs	r5, #0
 800d78c:	1b5c      	subs	r4, r3, r5
 800d78e:	2c00      	cmp	r4, #0
 800d790:	f2c0 80dd 	blt.w	800d94e <__kernel_rem_pio2+0x3de>
 800d794:	4f43      	ldr	r7, [pc, #268]	; (800d8a4 <__kernel_rem_pio2+0x334>)
 800d796:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d888 <__kernel_rem_pio2+0x318>
 800d79a:	2400      	movs	r4, #0
 800d79c:	e0cb      	b.n	800d936 <__kernel_rem_pio2+0x3c6>
 800d79e:	f04f 0802 	mov.w	r8, #2
 800d7a2:	e787      	b.n	800d6b4 <__kernel_rem_pio2+0x144>
 800d7a4:	ab06      	add	r3, sp, #24
 800d7a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7aa:	b949      	cbnz	r1, 800d7c0 <__kernel_rem_pio2+0x250>
 800d7ac:	b12b      	cbz	r3, 800d7ba <__kernel_rem_pio2+0x24a>
 800d7ae:	aa06      	add	r2, sp, #24
 800d7b0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d7b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	4619      	mov	r1, r3
 800d7be:	e780      	b.n	800d6c2 <__kernel_rem_pio2+0x152>
 800d7c0:	aa06      	add	r2, sp, #24
 800d7c2:	ebac 0303 	sub.w	r3, ip, r3
 800d7c6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	e7f5      	b.n	800d7ba <__kernel_rem_pio2+0x24a>
 800d7ce:	1e68      	subs	r0, r5, #1
 800d7d0:	ab06      	add	r3, sp, #24
 800d7d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d7da:	aa06      	add	r2, sp, #24
 800d7dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7e0:	e778      	b.n	800d6d4 <__kernel_rem_pio2+0x164>
 800d7e2:	1e68      	subs	r0, r5, #1
 800d7e4:	ab06      	add	r3, sp, #24
 800d7e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7ee:	e7f4      	b.n	800d7da <__kernel_rem_pio2+0x26a>
 800d7f0:	a906      	add	r1, sp, #24
 800d7f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d7f6:	3801      	subs	r0, #1
 800d7f8:	430a      	orrs	r2, r1
 800d7fa:	e7a8      	b.n	800d74e <__kernel_rem_pio2+0x1de>
 800d7fc:	f10c 0c01 	add.w	ip, ip, #1
 800d800:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d804:	2a00      	cmp	r2, #0
 800d806:	d0f9      	beq.n	800d7fc <__kernel_rem_pio2+0x28c>
 800d808:	eb0b 0305 	add.w	r3, fp, r5
 800d80c:	aa1a      	add	r2, sp, #104	; 0x68
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	1898      	adds	r0, r3, r2
 800d812:	3008      	adds	r0, #8
 800d814:	1c69      	adds	r1, r5, #1
 800d816:	3708      	adds	r7, #8
 800d818:	2200      	movs	r2, #0
 800d81a:	4465      	add	r5, ip
 800d81c:	9005      	str	r0, [sp, #20]
 800d81e:	428d      	cmp	r5, r1
 800d820:	f6ff af07 	blt.w	800d632 <__kernel_rem_pio2+0xc2>
 800d824:	a81a      	add	r0, sp, #104	; 0x68
 800d826:	eb02 0c03 	add.w	ip, r2, r3
 800d82a:	4484      	add	ip, r0
 800d82c:	9803      	ldr	r0, [sp, #12]
 800d82e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d832:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d836:	9001      	str	r0, [sp, #4]
 800d838:	ee07 0a90 	vmov	s15, r0
 800d83c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d840:	9805      	ldr	r0, [sp, #20]
 800d842:	ed8c 7b00 	vstr	d7, [ip]
 800d846:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d888 <__kernel_rem_pio2+0x318>
 800d84a:	eb00 0802 	add.w	r8, r0, r2
 800d84e:	f04f 0c00 	mov.w	ip, #0
 800d852:	45d4      	cmp	ip, sl
 800d854:	dd0c      	ble.n	800d870 <__kernel_rem_pio2+0x300>
 800d856:	eb02 0c07 	add.w	ip, r2, r7
 800d85a:	a86a      	add	r0, sp, #424	; 0x1a8
 800d85c:	4484      	add	ip, r0
 800d85e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d862:	3101      	adds	r1, #1
 800d864:	3208      	adds	r2, #8
 800d866:	e7da      	b.n	800d81e <__kernel_rem_pio2+0x2ae>
 800d868:	9b04      	ldr	r3, [sp, #16]
 800d86a:	f04f 0c01 	mov.w	ip, #1
 800d86e:	e7c7      	b.n	800d800 <__kernel_rem_pio2+0x290>
 800d870:	ecbe 5b02 	vldmia	lr!, {d5}
 800d874:	ed38 6b02 	vldmdb	r8!, {d6}
 800d878:	f10c 0c01 	add.w	ip, ip, #1
 800d87c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d880:	e7e7      	b.n	800d852 <__kernel_rem_pio2+0x2e2>
 800d882:	3b01      	subs	r3, #1
 800d884:	e768      	b.n	800d758 <__kernel_rem_pio2+0x1e8>
 800d886:	bf00      	nop
	...
 800d894:	3e700000 	.word	0x3e700000
 800d898:	00000000 	.word	0x00000000
 800d89c:	41700000 	.word	0x41700000
 800d8a0:	0800e188 	.word	0x0800e188
 800d8a4:	0800e148 	.word	0x0800e148
 800d8a8:	4260      	negs	r0, r4
 800d8aa:	eeb0 0b48 	vmov.f64	d0, d8
 800d8ae:	f000 fad3 	bl	800de58 <scalbn>
 800d8b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800da90 <__kernel_rem_pio2+0x520>
 800d8b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8be:	db18      	blt.n	800d8f2 <__kernel_rem_pio2+0x382>
 800d8c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800da98 <__kernel_rem_pio2+0x528>
 800d8c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d8c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d8cc:	aa06      	add	r2, sp, #24
 800d8ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d8d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d8d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8da:	a906      	add	r1, sp, #24
 800d8dc:	ee10 3a10 	vmov	r3, s0
 800d8e0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8e4:	1c6b      	adds	r3, r5, #1
 800d8e6:	ee17 2a10 	vmov	r2, s14
 800d8ea:	3418      	adds	r4, #24
 800d8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8f0:	e739      	b.n	800d766 <__kernel_rem_pio2+0x1f6>
 800d8f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8f6:	aa06      	add	r2, sp, #24
 800d8f8:	ee10 3a10 	vmov	r3, s0
 800d8fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d900:	462b      	mov	r3, r5
 800d902:	e730      	b.n	800d766 <__kernel_rem_pio2+0x1f6>
 800d904:	aa06      	add	r2, sp, #24
 800d906:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d90a:	9202      	str	r2, [sp, #8]
 800d90c:	ee07 2a90 	vmov	s15, r2
 800d910:	3c01      	subs	r4, #1
 800d912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d916:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d91a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d91e:	ed25 7b02 	vstmdb	r5!, {d7}
 800d922:	e72f      	b.n	800d784 <__kernel_rem_pio2+0x214>
 800d924:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d928:	ecb7 5b02 	vldmia	r7!, {d5}
 800d92c:	ed9c 6b00 	vldr	d6, [ip]
 800d930:	3401      	adds	r4, #1
 800d932:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d936:	454c      	cmp	r4, r9
 800d938:	dc01      	bgt.n	800d93e <__kernel_rem_pio2+0x3ce>
 800d93a:	42a5      	cmp	r5, r4
 800d93c:	daf2      	bge.n	800d924 <__kernel_rem_pio2+0x3b4>
 800d93e:	aa42      	add	r2, sp, #264	; 0x108
 800d940:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d944:	ed84 7b00 	vstr	d7, [r4]
 800d948:	3501      	adds	r5, #1
 800d94a:	3808      	subs	r0, #8
 800d94c:	e71e      	b.n	800d78c <__kernel_rem_pio2+0x21c>
 800d94e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d950:	2a03      	cmp	r2, #3
 800d952:	d84e      	bhi.n	800d9f2 <__kernel_rem_pio2+0x482>
 800d954:	e8df f002 	tbb	[pc, r2]
 800d958:	021f1f3e 	.word	0x021f1f3e
 800d95c:	3108      	adds	r1, #8
 800d95e:	aa42      	add	r2, sp, #264	; 0x108
 800d960:	4411      	add	r1, r2
 800d962:	4608      	mov	r0, r1
 800d964:	461c      	mov	r4, r3
 800d966:	2c00      	cmp	r4, #0
 800d968:	dc61      	bgt.n	800da2e <__kernel_rem_pio2+0x4be>
 800d96a:	4608      	mov	r0, r1
 800d96c:	461c      	mov	r4, r3
 800d96e:	2c01      	cmp	r4, #1
 800d970:	dc6d      	bgt.n	800da4e <__kernel_rem_pio2+0x4de>
 800d972:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800daa0 <__kernel_rem_pio2+0x530>
 800d976:	2b01      	cmp	r3, #1
 800d978:	dc79      	bgt.n	800da6e <__kernel_rem_pio2+0x4fe>
 800d97a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d97e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d982:	f1b8 0f00 	cmp.w	r8, #0
 800d986:	d178      	bne.n	800da7a <__kernel_rem_pio2+0x50a>
 800d988:	ed86 5b00 	vstr	d5, [r6]
 800d98c:	ed86 6b02 	vstr	d6, [r6, #8]
 800d990:	ed86 7b04 	vstr	d7, [r6, #16]
 800d994:	e02d      	b.n	800d9f2 <__kernel_rem_pio2+0x482>
 800d996:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800daa0 <__kernel_rem_pio2+0x530>
 800d99a:	3108      	adds	r1, #8
 800d99c:	aa42      	add	r2, sp, #264	; 0x108
 800d99e:	4411      	add	r1, r2
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	da34      	bge.n	800da10 <__kernel_rem_pio2+0x4a0>
 800d9a6:	f1b8 0f00 	cmp.w	r8, #0
 800d9aa:	d037      	beq.n	800da1c <__kernel_rem_pio2+0x4ac>
 800d9ac:	eeb1 7b46 	vneg.f64	d7, d6
 800d9b0:	ed86 7b00 	vstr	d7, [r6]
 800d9b4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d9b8:	a844      	add	r0, sp, #272	; 0x110
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9c0:	428b      	cmp	r3, r1
 800d9c2:	da2e      	bge.n	800da22 <__kernel_rem_pio2+0x4b2>
 800d9c4:	f1b8 0f00 	cmp.w	r8, #0
 800d9c8:	d001      	beq.n	800d9ce <__kernel_rem_pio2+0x45e>
 800d9ca:	eeb1 7b47 	vneg.f64	d7, d7
 800d9ce:	ed86 7b02 	vstr	d7, [r6, #8]
 800d9d2:	e00e      	b.n	800d9f2 <__kernel_rem_pio2+0x482>
 800d9d4:	aa92      	add	r2, sp, #584	; 0x248
 800d9d6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800daa0 <__kernel_rem_pio2+0x530>
 800d9da:	4411      	add	r1, r2
 800d9dc:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	da0f      	bge.n	800da04 <__kernel_rem_pio2+0x494>
 800d9e4:	f1b8 0f00 	cmp.w	r8, #0
 800d9e8:	d001      	beq.n	800d9ee <__kernel_rem_pio2+0x47e>
 800d9ea:	eeb1 7b47 	vneg.f64	d7, d7
 800d9ee:	ed86 7b00 	vstr	d7, [r6]
 800d9f2:	9b01      	ldr	r3, [sp, #4]
 800d9f4:	f003 0007 	and.w	r0, r3, #7
 800d9f8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d9fc:	ecbd 8b06 	vpop	{d8-d10}
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	ed31 6b02 	vldmdb	r1!, {d6}
 800da08:	3b01      	subs	r3, #1
 800da0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da0e:	e7e7      	b.n	800d9e0 <__kernel_rem_pio2+0x470>
 800da10:	ed31 7b02 	vldmdb	r1!, {d7}
 800da14:	3801      	subs	r0, #1
 800da16:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da1a:	e7c2      	b.n	800d9a2 <__kernel_rem_pio2+0x432>
 800da1c:	eeb0 7b46 	vmov.f64	d7, d6
 800da20:	e7c6      	b.n	800d9b0 <__kernel_rem_pio2+0x440>
 800da22:	ecb0 6b02 	vldmia	r0!, {d6}
 800da26:	3101      	adds	r1, #1
 800da28:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da2c:	e7c8      	b.n	800d9c0 <__kernel_rem_pio2+0x450>
 800da2e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da32:	ed30 5b02 	vldmdb	r0!, {d5}
 800da36:	3c01      	subs	r4, #1
 800da38:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da40:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da44:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da48:	ed80 7b00 	vstr	d7, [r0]
 800da4c:	e78b      	b.n	800d966 <__kernel_rem_pio2+0x3f6>
 800da4e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da52:	ed30 5b02 	vldmdb	r0!, {d5}
 800da56:	3c01      	subs	r4, #1
 800da58:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da60:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da64:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da68:	ed80 7b00 	vstr	d7, [r0]
 800da6c:	e77f      	b.n	800d96e <__kernel_rem_pio2+0x3fe>
 800da6e:	ed31 6b02 	vldmdb	r1!, {d6}
 800da72:	3b01      	subs	r3, #1
 800da74:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da78:	e77d      	b.n	800d976 <__kernel_rem_pio2+0x406>
 800da7a:	eeb1 5b45 	vneg.f64	d5, d5
 800da7e:	eeb1 6b46 	vneg.f64	d6, d6
 800da82:	ed86 5b00 	vstr	d5, [r6]
 800da86:	eeb1 7b47 	vneg.f64	d7, d7
 800da8a:	ed86 6b02 	vstr	d6, [r6, #8]
 800da8e:	e77f      	b.n	800d990 <__kernel_rem_pio2+0x420>
 800da90:	00000000 	.word	0x00000000
 800da94:	41700000 	.word	0x41700000
 800da98:	00000000 	.word	0x00000000
 800da9c:	3e700000 	.word	0x3e700000
	...

0800daa8 <__kernel_sin>:
 800daa8:	ee10 3a90 	vmov	r3, s1
 800daac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dab0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dab4:	da04      	bge.n	800dac0 <__kernel_sin+0x18>
 800dab6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800daba:	ee17 3a90 	vmov	r3, s15
 800dabe:	b35b      	cbz	r3, 800db18 <__kernel_sin+0x70>
 800dac0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dac4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dac8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800db20 <__kernel_sin+0x78>
 800dacc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db28 <__kernel_sin+0x80>
 800dad0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dad4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db30 <__kernel_sin+0x88>
 800dad8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dadc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db38 <__kernel_sin+0x90>
 800dae0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dae4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db40 <__kernel_sin+0x98>
 800dae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800daec:	b930      	cbnz	r0, 800dafc <__kernel_sin+0x54>
 800daee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db48 <__kernel_sin+0xa0>
 800daf2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800daf6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dafa:	4770      	bx	lr
 800dafc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800db00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800db04:	eea1 7b04 	vfma.f64	d7, d1, d4
 800db08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800db0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800db50 <__kernel_sin+0xa8>
 800db10:	eea5 1b07 	vfma.f64	d1, d5, d7
 800db14:	ee30 0b41 	vsub.f64	d0, d0, d1
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	5acfd57c 	.word	0x5acfd57c
 800db24:	3de5d93a 	.word	0x3de5d93a
 800db28:	8a2b9ceb 	.word	0x8a2b9ceb
 800db2c:	be5ae5e6 	.word	0xbe5ae5e6
 800db30:	57b1fe7d 	.word	0x57b1fe7d
 800db34:	3ec71de3 	.word	0x3ec71de3
 800db38:	19c161d5 	.word	0x19c161d5
 800db3c:	bf2a01a0 	.word	0xbf2a01a0
 800db40:	1110f8a6 	.word	0x1110f8a6
 800db44:	3f811111 	.word	0x3f811111
 800db48:	55555549 	.word	0x55555549
 800db4c:	bfc55555 	.word	0xbfc55555
 800db50:	55555549 	.word	0x55555549
 800db54:	3fc55555 	.word	0x3fc55555

0800db58 <atan>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	eeb0 7b40 	vmov.f64	d7, d0
 800db5e:	ee17 5a90 	vmov	r5, s15
 800db62:	4b73      	ldr	r3, [pc, #460]	; (800dd30 <atan+0x1d8>)
 800db64:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800db68:	429c      	cmp	r4, r3
 800db6a:	dd13      	ble.n	800db94 <atan+0x3c>
 800db6c:	4b71      	ldr	r3, [pc, #452]	; (800dd34 <atan+0x1dc>)
 800db6e:	429c      	cmp	r4, r3
 800db70:	dc03      	bgt.n	800db7a <atan+0x22>
 800db72:	d107      	bne.n	800db84 <atan+0x2c>
 800db74:	ee10 3a10 	vmov	r3, s0
 800db78:	b123      	cbz	r3, 800db84 <atan+0x2c>
 800db7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800db7e:	eeb0 0b47 	vmov.f64	d0, d7
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800dcc0 <atan+0x168>
 800db88:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800dcc8 <atan+0x170>
 800db8c:	2d00      	cmp	r5, #0
 800db8e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800db92:	e7f4      	b.n	800db7e <atan+0x26>
 800db94:	4b68      	ldr	r3, [pc, #416]	; (800dd38 <atan+0x1e0>)
 800db96:	429c      	cmp	r4, r3
 800db98:	dc11      	bgt.n	800dbbe <atan+0x66>
 800db9a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db9e:	429c      	cmp	r4, r3
 800dba0:	dc0a      	bgt.n	800dbb8 <atan+0x60>
 800dba2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800dba6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800dcd0 <atan+0x178>
 800dbaa:	ee30 6b06 	vadd.f64	d6, d0, d6
 800dbae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb6:	dce2      	bgt.n	800db7e <atan+0x26>
 800dbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbbc:	e013      	b.n	800dbe6 <atan+0x8e>
 800dbbe:	f000 f8c5 	bl	800dd4c <fabs>
 800dbc2:	4b5e      	ldr	r3, [pc, #376]	; (800dd3c <atan+0x1e4>)
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	dc4f      	bgt.n	800dc68 <atan+0x110>
 800dbc8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	dc41      	bgt.n	800dc54 <atan+0xfc>
 800dbd0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800dbd4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dbd8:	2300      	movs	r3, #0
 800dbda:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dbde:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dbe2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dbe6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dcd8 <atan+0x180>
 800dbea:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dbee:	ee24 5b04 	vmul.f64	d5, d4, d4
 800dbf2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dce0 <atan+0x188>
 800dbf6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800dbfa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dce8 <atan+0x190>
 800dbfe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc02:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dcf0 <atan+0x198>
 800dc06:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dc0a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dcf8 <atan+0x1a0>
 800dc0e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc12:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dd00 <atan+0x1a8>
 800dc16:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dd08 <atan+0x1b0>
 800dc1a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dc1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd10 <atan+0x1b8>
 800dc22:	eea5 2b06 	vfma.f64	d2, d5, d6
 800dc26:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd18 <atan+0x1c0>
 800dc2a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dc2e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dd20 <atan+0x1c8>
 800dc32:	eea6 2b05 	vfma.f64	d2, d6, d5
 800dc36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd28 <atan+0x1d0>
 800dc3a:	1c5a      	adds	r2, r3, #1
 800dc3c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dc40:	ee26 6b05 	vmul.f64	d6, d6, d5
 800dc44:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dc48:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dc4c:	d121      	bne.n	800dc92 <atan+0x13a>
 800dc4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc52:	e794      	b.n	800db7e <atan+0x26>
 800dc54:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dc58:	2301      	movs	r3, #1
 800dc5a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dc5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc62:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc66:	e7be      	b.n	800dbe6 <atan+0x8e>
 800dc68:	4b35      	ldr	r3, [pc, #212]	; (800dd40 <atan+0x1e8>)
 800dc6a:	429c      	cmp	r4, r3
 800dc6c:	dc0b      	bgt.n	800dc86 <atan+0x12e>
 800dc6e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dc72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dc76:	ee30 5b47 	vsub.f64	d5, d0, d7
 800dc7a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dc7e:	2302      	movs	r3, #2
 800dc80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dc84:	e7af      	b.n	800dbe6 <atan+0x8e>
 800dc86:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc90:	e7a9      	b.n	800dbe6 <atan+0x8e>
 800dc92:	4a2c      	ldr	r2, [pc, #176]	; (800dd44 <atan+0x1ec>)
 800dc94:	492c      	ldr	r1, [pc, #176]	; (800dd48 <atan+0x1f0>)
 800dc96:	00db      	lsls	r3, r3, #3
 800dc98:	441a      	add	r2, r3
 800dc9a:	440b      	add	r3, r1
 800dc9c:	ed93 5b00 	vldr	d5, [r3]
 800dca0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dca4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dca8:	ed92 6b00 	vldr	d6, [r2]
 800dcac:	2d00      	cmp	r5, #0
 800dcae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dcb2:	bfb8      	it	lt
 800dcb4:	eeb1 7b47 	vneglt.f64	d7, d7
 800dcb8:	e761      	b.n	800db7e <atan+0x26>
 800dcba:	bf00      	nop
 800dcbc:	f3af 8000 	nop.w
 800dcc0:	54442d18 	.word	0x54442d18
 800dcc4:	bff921fb 	.word	0xbff921fb
 800dcc8:	54442d18 	.word	0x54442d18
 800dccc:	3ff921fb 	.word	0x3ff921fb
 800dcd0:	8800759c 	.word	0x8800759c
 800dcd4:	7e37e43c 	.word	0x7e37e43c
 800dcd8:	e322da11 	.word	0xe322da11
 800dcdc:	3f90ad3a 	.word	0x3f90ad3a
 800dce0:	24760deb 	.word	0x24760deb
 800dce4:	3fa97b4b 	.word	0x3fa97b4b
 800dce8:	a0d03d51 	.word	0xa0d03d51
 800dcec:	3fb10d66 	.word	0x3fb10d66
 800dcf0:	c54c206e 	.word	0xc54c206e
 800dcf4:	3fb745cd 	.word	0x3fb745cd
 800dcf8:	920083ff 	.word	0x920083ff
 800dcfc:	3fc24924 	.word	0x3fc24924
 800dd00:	5555550d 	.word	0x5555550d
 800dd04:	3fd55555 	.word	0x3fd55555
 800dd08:	52defd9a 	.word	0x52defd9a
 800dd0c:	bfadde2d 	.word	0xbfadde2d
 800dd10:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd14:	bfa2b444 	.word	0xbfa2b444
 800dd18:	af749a6d 	.word	0xaf749a6d
 800dd1c:	bfb3b0f2 	.word	0xbfb3b0f2
 800dd20:	fe231671 	.word	0xfe231671
 800dd24:	bfbc71c6 	.word	0xbfbc71c6
 800dd28:	9998ebc4 	.word	0x9998ebc4
 800dd2c:	bfc99999 	.word	0xbfc99999
 800dd30:	440fffff 	.word	0x440fffff
 800dd34:	7ff00000 	.word	0x7ff00000
 800dd38:	3fdbffff 	.word	0x3fdbffff
 800dd3c:	3ff2ffff 	.word	0x3ff2ffff
 800dd40:	40037fff 	.word	0x40037fff
 800dd44:	0800e198 	.word	0x0800e198
 800dd48:	0800e1b8 	.word	0x0800e1b8

0800dd4c <fabs>:
 800dd4c:	ec51 0b10 	vmov	r0, r1, d0
 800dd50:	ee10 2a10 	vmov	r2, s0
 800dd54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd58:	ec43 2b10 	vmov	d0, r2, r3
 800dd5c:	4770      	bx	lr
	...

0800dd60 <floor>:
 800dd60:	ee10 1a90 	vmov	r1, s1
 800dd64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dd68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dd6c:	2b13      	cmp	r3, #19
 800dd6e:	b530      	push	{r4, r5, lr}
 800dd70:	ee10 0a10 	vmov	r0, s0
 800dd74:	ee10 5a10 	vmov	r5, s0
 800dd78:	dc33      	bgt.n	800dde2 <floor+0x82>
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da17      	bge.n	800ddae <floor+0x4e>
 800dd7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800de40 <floor+0xe0>
 800dd82:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8e:	dd09      	ble.n	800dda4 <floor+0x44>
 800dd90:	2900      	cmp	r1, #0
 800dd92:	da50      	bge.n	800de36 <floor+0xd6>
 800dd94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd98:	4a2b      	ldr	r2, [pc, #172]	; (800de48 <floor+0xe8>)
 800dd9a:	4303      	orrs	r3, r0
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	4283      	cmp	r3, r0
 800dda0:	bf18      	it	ne
 800dda2:	4611      	movne	r1, r2
 800dda4:	460b      	mov	r3, r1
 800dda6:	4602      	mov	r2, r0
 800dda8:	ec43 2b10 	vmov	d0, r2, r3
 800ddac:	e020      	b.n	800ddf0 <floor+0x90>
 800ddae:	4a27      	ldr	r2, [pc, #156]	; (800de4c <floor+0xec>)
 800ddb0:	411a      	asrs	r2, r3
 800ddb2:	ea01 0402 	and.w	r4, r1, r2
 800ddb6:	4304      	orrs	r4, r0
 800ddb8:	d01a      	beq.n	800ddf0 <floor+0x90>
 800ddba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800de40 <floor+0xe0>
 800ddbe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ddc2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	ddeb      	ble.n	800dda4 <floor+0x44>
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	bfbe      	ittt	lt
 800ddd0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ddd4:	fa40 f303 	asrlt.w	r3, r0, r3
 800ddd8:	18c9      	addlt	r1, r1, r3
 800ddda:	ea21 0102 	bic.w	r1, r1, r2
 800ddde:	2000      	movs	r0, #0
 800dde0:	e7e0      	b.n	800dda4 <floor+0x44>
 800dde2:	2b33      	cmp	r3, #51	; 0x33
 800dde4:	dd05      	ble.n	800ddf2 <floor+0x92>
 800dde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddea:	d101      	bne.n	800ddf0 <floor+0x90>
 800ddec:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ddf0:	bd30      	pop	{r4, r5, pc}
 800ddf2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ddf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfa:	40e2      	lsrs	r2, r4
 800ddfc:	4202      	tst	r2, r0
 800ddfe:	d0f7      	beq.n	800ddf0 <floor+0x90>
 800de00:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800de40 <floor+0xe0>
 800de04:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de10:	ddc8      	ble.n	800dda4 <floor+0x44>
 800de12:	2900      	cmp	r1, #0
 800de14:	da02      	bge.n	800de1c <floor+0xbc>
 800de16:	2b14      	cmp	r3, #20
 800de18:	d103      	bne.n	800de22 <floor+0xc2>
 800de1a:	3101      	adds	r1, #1
 800de1c:	ea20 0002 	bic.w	r0, r0, r2
 800de20:	e7c0      	b.n	800dda4 <floor+0x44>
 800de22:	2401      	movs	r4, #1
 800de24:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800de28:	fa04 f303 	lsl.w	r3, r4, r3
 800de2c:	4418      	add	r0, r3
 800de2e:	42a8      	cmp	r0, r5
 800de30:	bf38      	it	cc
 800de32:	1909      	addcc	r1, r1, r4
 800de34:	e7f2      	b.n	800de1c <floor+0xbc>
 800de36:	2000      	movs	r0, #0
 800de38:	4601      	mov	r1, r0
 800de3a:	e7b3      	b.n	800dda4 <floor+0x44>
 800de3c:	f3af 8000 	nop.w
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	bff00000 	.word	0xbff00000
 800de4c:	000fffff 	.word	0x000fffff

0800de50 <matherr>:
 800de50:	2000      	movs	r0, #0
 800de52:	4770      	bx	lr
 800de54:	0000      	movs	r0, r0
	...

0800de58 <scalbn>:
 800de58:	b500      	push	{lr}
 800de5a:	ed2d 8b02 	vpush	{d8}
 800de5e:	b083      	sub	sp, #12
 800de60:	ed8d 0b00 	vstr	d0, [sp]
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800de6a:	b9a2      	cbnz	r2, 800de96 <scalbn+0x3e>
 800de6c:	9a00      	ldr	r2, [sp, #0]
 800de6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de72:	4313      	orrs	r3, r2
 800de74:	d03a      	beq.n	800deec <scalbn+0x94>
 800de76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800df30 <scalbn+0xd8>
 800de7a:	4b35      	ldr	r3, [pc, #212]	; (800df50 <scalbn+0xf8>)
 800de7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800de80:	4298      	cmp	r0, r3
 800de82:	ed8d 7b00 	vstr	d7, [sp]
 800de86:	da11      	bge.n	800deac <scalbn+0x54>
 800de88:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800df38 <scalbn+0xe0>
 800de8c:	ed9d 6b00 	vldr	d6, [sp]
 800de90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de94:	e007      	b.n	800dea6 <scalbn+0x4e>
 800de96:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800de9a:	428a      	cmp	r2, r1
 800de9c:	d10a      	bne.n	800deb4 <scalbn+0x5c>
 800de9e:	ed9d 7b00 	vldr	d7, [sp]
 800dea2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dea6:	ed8d 7b00 	vstr	d7, [sp]
 800deaa:	e01f      	b.n	800deec <scalbn+0x94>
 800deac:	9b01      	ldr	r3, [sp, #4]
 800deae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800deb2:	3a36      	subs	r2, #54	; 0x36
 800deb4:	4402      	add	r2, r0
 800deb6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800deba:	428a      	cmp	r2, r1
 800debc:	dd0a      	ble.n	800ded4 <scalbn+0x7c>
 800debe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800df40 <scalbn+0xe8>
 800dec2:	eeb0 0b48 	vmov.f64	d0, d8
 800dec6:	ed9d 1b00 	vldr	d1, [sp]
 800deca:	f000 f843 	bl	800df54 <copysign>
 800dece:	ee20 7b08 	vmul.f64	d7, d0, d8
 800ded2:	e7e8      	b.n	800dea6 <scalbn+0x4e>
 800ded4:	2a00      	cmp	r2, #0
 800ded6:	dd10      	ble.n	800defa <scalbn+0xa2>
 800ded8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dedc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dee4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dee8:	e9cd 0100 	strd	r0, r1, [sp]
 800deec:	ed9d 0b00 	vldr	d0, [sp]
 800def0:	b003      	add	sp, #12
 800def2:	ecbd 8b02 	vpop	{d8}
 800def6:	f85d fb04 	ldr.w	pc, [sp], #4
 800defa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800defe:	da06      	bge.n	800df0e <scalbn+0xb6>
 800df00:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df04:	4298      	cmp	r0, r3
 800df06:	dcda      	bgt.n	800debe <scalbn+0x66>
 800df08:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800df38 <scalbn+0xe0>
 800df0c:	e7d9      	b.n	800dec2 <scalbn+0x6a>
 800df0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df16:	3236      	adds	r2, #54	; 0x36
 800df18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df1c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df20:	ec41 0b17 	vmov	d7, r0, r1
 800df24:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800df48 <scalbn+0xf0>
 800df28:	e7b2      	b.n	800de90 <scalbn+0x38>
 800df2a:	bf00      	nop
 800df2c:	f3af 8000 	nop.w
 800df30:	00000000 	.word	0x00000000
 800df34:	43500000 	.word	0x43500000
 800df38:	c2f8f359 	.word	0xc2f8f359
 800df3c:	01a56e1f 	.word	0x01a56e1f
 800df40:	8800759c 	.word	0x8800759c
 800df44:	7e37e43c 	.word	0x7e37e43c
 800df48:	00000000 	.word	0x00000000
 800df4c:	3c900000 	.word	0x3c900000
 800df50:	ffff3cb0 	.word	0xffff3cb0

0800df54 <copysign>:
 800df54:	ec51 0b10 	vmov	r0, r1, d0
 800df58:	ee11 0a90 	vmov	r0, s3
 800df5c:	ee10 2a10 	vmov	r2, s0
 800df60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800df64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800df68:	ea41 0300 	orr.w	r3, r1, r0
 800df6c:	ec43 2b10 	vmov	d0, r2, r3
 800df70:	4770      	bx	lr
	...

0800df74 <_init>:
 800df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df76:	bf00      	nop
 800df78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7a:	bc08      	pop	{r3}
 800df7c:	469e      	mov	lr, r3
 800df7e:	4770      	bx	lr

0800df80 <_fini>:
 800df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df82:	bf00      	nop
 800df84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df86:	bc08      	pop	{r3}
 800df88:	469e      	mov	lr, r3
 800df8a:	4770      	bx	lr
