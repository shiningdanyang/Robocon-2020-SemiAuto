
spinalCord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004140  08004140  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08004154  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004154  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b471  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192e  00000000  00000000  0002b4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002097f  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085bd  00000000  00000000  0004eed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9031  00000000  00000000  00057494  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001204c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  00120540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004100 	.word	0x08004100

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004100 	.word	0x08004100

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <peripheralUART_Init>:
uint8_t brainCheckbyteCount = 0, brainData[5], brainDataIndex;
char* controlData;

#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&brain, brainRxPacket, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	4903      	ldr	r1, [pc, #12]	; (80004dc <peripheralUART_Init+0x14>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <peripheralUART_Init+0x18>)
 80004d2:	f002 ff15 	bl	8003300 <HAL_UART_Receive_DMA>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000230 	.word	0x20000230
 80004e0:	20000194 	.word	0x20000194

080004e4 <brainDMA_ProcessingData>:
}

#ifdef SPINAL_CORD_MODE_ONEWAY
//put in function handles DMA stream global interrupt of brainDMA Rx in stm32f4xx_it.c
void brainDMA_ProcessingData(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
		if(brainCheckbyteCount == 4 )
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <brainDMA_ProcessingData+0x64>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d114      	bne.n	800051a <brainDMA_ProcessingData+0x36>
		{
		  brainData[brainDataIndex++] = brainRxPacket[0];
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <brainDMA_ProcessingData+0x68>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	b2d1      	uxtb	r1, r2
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <brainDMA_ProcessingData+0x68>)
 80004fa:	7011      	strb	r1, [r2, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <brainDMA_ProcessingData+0x6c>)
 8000500:	7819      	ldrb	r1, [r3, #0]
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <brainDMA_ProcessingData+0x70>)
 8000504:	5499      	strb	r1, [r3, r2]
			if(brainDataIndex > 5)
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <brainDMA_ProcessingData+0x68>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b05      	cmp	r3, #5
 800050c:	d905      	bls.n	800051a <brainDMA_ProcessingData+0x36>
			{
				brainDataIndex = 0;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <brainDMA_ProcessingData+0x68>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
				brainCheckbyteCount = 0;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
			}
		}
		if(brainRxPacket[0] == 0xAA)
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <brainDMA_ProcessingData+0x6c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2baa      	cmp	r3, #170	; 0xaa
 8000520:	d106      	bne.n	8000530 <brainDMA_ProcessingData+0x4c>
			brainCheckbyteCount++;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <brainDMA_ProcessingData+0x64>)
 800052c:	701a      	strb	r2, [r3, #0]
		else
			if(brainCheckbyteCount != 4)
				brainCheckbyteCount = 0;
}
 800052e:	e006      	b.n	800053e <brainDMA_ProcessingData+0x5a>
			if(brainCheckbyteCount != 4)
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d002      	beq.n	800053e <brainDMA_ProcessingData+0x5a>
				brainCheckbyteCount = 0;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <brainDMA_ProcessingData+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	2000002c 	.word	0x2000002c
 800054c:	200001da 	.word	0x200001da
 8000550:	20000230 	.word	0x20000230
 8000554:	200001d4 	.word	0x200001d4

08000558 <peripheralPWM_Init>:
uint8_t motor2Dir;
uint8_t motor3Dir;
uint8_t motor4Dir;

void peripheralPWM_Init()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 800055c:	2100      	movs	r1, #0
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <peripheralPWM_Init+0x28>)
 8000560:	f002 f938 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8000564:	2100      	movs	r1, #0
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <peripheralPWM_Init+0x2c>)
 8000568:	f002 f934 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 800056c:	2100      	movs	r1, #0
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <peripheralPWM_Init+0x30>)
 8000570:	f002 f930 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8000574:	2100      	movs	r1, #0
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <peripheralPWM_Init+0x34>)
 8000578:	f002 f92c 	bl	80027d4 <HAL_TIM_PWM_Start>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200001e8 	.word	0x200001e8
 8000584:	200000e0 	.word	0x200000e0
 8000588:	20000044 	.word	0x20000044
 800058c:	2000009c 	.word	0x2000009c

08000590 <HAL_UART_RxCpltCallback>:
//include sau DNL_Slave_Peripheral_UART.h
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(huart->Instance == brain.Instance)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_UART_RxCpltCallback+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d102      	bne.n	80005aa <HAL_UART_RxCpltCallback+0x1a>
	{
		brainRxCplt = 1;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_UART_RxCpltCallback+0x2c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
		// HAL_UART_Receive_IT(&master, dataFromMaster, 4);
	}
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000194 	.word	0x20000194
 80005bc:	20000086 	.word	0x20000086

080005c0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == brain.Instance)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_UART_TxCpltCallback+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d102      	bne.n	80005da <HAL_UART_TxCpltCallback+0x1a>
	{
		brainTxCplt = 1;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_UART_TxCpltCallback+0x2c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
		// HAL_UART_Receive_IT(&master, dataFromMaster, 4);
	}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000194 	.word	0x20000194
 80005ec:	20000088 	.word	0x20000088

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fd68 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f818 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 faa0 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 fa7e 	bl	8000b00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fa52 	bl	8000aac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000608:	f000 f87a 	bl	8000700 <MX_TIM2_Init>
  MX_TIM3_Init();
 800060c:	f000 f8ec 	bl	80007e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000610:	f000 f960 	bl	80008d4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000614:	f000 f9d4 	bl	80009c0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralPWM_Init();
 8000618:	f7ff ff9e 	bl	8000558 <peripheralPWM_Init>
  peripheralUART_Init();
 800061c:	f7ff ff54 	bl	80004c8 <peripheralUART_Init>
  HAL_Delay(INIT_TIME);
 8000620:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000624:	f000 fdc2 	bl	80011ac <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x38>
	...

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fd58 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	; 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fbf3 	bl	8001e9c <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 fabc 	bl	8000c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe4c 	bl	800237c <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 faa5 	bl	8000c38 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_TIM2_Init+0xe4>)
 800073a:	2253      	movs	r2, #83	; 0x53
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000746:	22ff      	movs	r2, #255	; 0xff
 8000748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_TIM2_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000756:	4823      	ldr	r0, [pc, #140]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000758:	f001 ffdc 	bl	8002714 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000762:	f000 fa69 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000770:	4619      	mov	r1, r3
 8000772:	481c      	ldr	r0, [pc, #112]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000774:	f002 f932 	bl	80029dc <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800077e:	f000 fa5b 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <MX_TIM2_Init+0xe4>)
 8000784:	f001 fff1 	bl	800276a <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 fa53 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4619      	mov	r1, r3
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_TIM2_Init+0xe4>)
 80007a2:	f002 fce3 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007ac:	f000 fa44 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM2_Init+0xe4>)
 80007c8:	f002 f842 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007d2:	f000 fa31 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM2_Init+0xe4>)
 80007d8:	f000 fac0 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3738      	adds	r7, #56	; 0x38
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001e8 	.word	0x200001e8

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_TIM3_Init+0xe4>)
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_TIM3_Init+0xe8>)
 800081c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_TIM3_Init+0xe4>)
 8000820:	2253      	movs	r2, #83	; 0x53
 8000822:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_TIM3_Init+0xe4>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_TIM3_Init+0xe4>)
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_TIM3_Init+0xe4>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_TIM3_Init+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <MX_TIM3_Init+0xe4>)
 800083e:	f001 ff69 	bl	8002714 <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000848:	f000 f9f6 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	4619      	mov	r1, r3
 8000858:	481c      	ldr	r0, [pc, #112]	; (80008cc <MX_TIM3_Init+0xe4>)
 800085a:	f002 f8bf 	bl	80029dc <HAL_TIM_ConfigClockSource>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000864:	f000 f9e8 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_TIM3_Init+0xe4>)
 800086a:	f001 ff7e 	bl	800276a <HAL_TIM_PWM_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000874:	f000 f9e0 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4619      	mov	r1, r3
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_TIM3_Init+0xe4>)
 8000888:	f002 fc70 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000892:	f000 f9d1 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	2360      	movs	r3, #96	; 0x60
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_TIM3_Init+0xe4>)
 80008ae:	f001 ffcf 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80008b8:	f000 f9be 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_TIM3_Init+0xe4>)
 80008be:	f000 fa4d 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3738      	adds	r7, #56	; 0x38
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e0 	.word	0x200000e0
 80008d0:	40000400 	.word	0x40000400

080008d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000906:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <MX_TIM4_Init+0xe8>)
 8000908:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <MX_TIM4_Init+0xe4>)
 800090c:	2253      	movs	r2, #83	; 0x53
 800090e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <MX_TIM4_Init+0xe4>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000928:	4823      	ldr	r0, [pc, #140]	; (80009b8 <MX_TIM4_Init+0xe4>)
 800092a:	f001 fef3 	bl	8002714 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000934:	f000 f980 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4619      	mov	r1, r3
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000946:	f002 f849 	bl	80029dc <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000950:	f000 f972 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000956:	f001 ff08 	bl	800276a <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000960:	f000 f96a 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4619      	mov	r1, r3
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_TIM4_Init+0xe4>)
 8000974:	f002 fbfa 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800097e:	f000 f95b 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800098a:	2302      	movs	r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_TIM4_Init+0xe4>)
 800099a:	f001 ff59 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009a4:	f000 f948 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <MX_TIM4_Init+0xe4>)
 80009aa:	f000 f9d7 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000044 	.word	0x20000044
 80009bc:	40000800 	.word	0x40000800

080009c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <MX_TIM5_Init+0xe8>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009f8:	2253      	movs	r2, #83	; 0x53
 80009fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a04:	22ff      	movs	r2, #255	; 0xff
 8000a06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a14:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a16:	f001 fe7d 	bl	8002714 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000a20:	f000 f90a 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a32:	f001 ffd3 	bl	80029dc <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000a3c:	f000 f8fc 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a42:	f001 fe92 	bl	800276a <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a4c:	f000 f8f4 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a60:	f002 fb84 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000a6a:	f000 f8e5 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a86:	f001 fee3 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000a90:	f000 f8d2 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a96:	f000 f961 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	; 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000009c 	.word	0x2000009c
 8000aa8:	40000c00 	.word	0x40000c00

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART1_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f002 fbbe 	bl	8003264 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f8a3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000194 	.word	0x20000194
 8000afc:	40011000 	.word	0x40011000

08000b00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_DMA_Init+0x3c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <MX_DMA_Init+0x3c>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_DMA_Init+0x3c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	203a      	movs	r0, #58	; 0x3a
 8000b28:	f000 fc3d 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b2c:	203a      	movs	r0, #58	; 0x3a
 8000b2e:	f000 fc56 	bl	80013de <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xe8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xec>)
 8000bb0:	f001 f95a 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xf0>)
 8000bbc:	f001 f954 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor1Dir_Pin|motor2Dir_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2128      	movs	r1, #40	; 0x28
 8000bc4:	481b      	ldr	r0, [pc, #108]	; (8000c34 <MX_GPIO_Init+0xf4>)
 8000bc6:	f001 f94f 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor4Dir_Pin;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor4Dir_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_GPIO_Init+0xec>)
 8000be2:	f000 ffa7 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor3Dir_Pin */
  GPIO_InitStruct.Pin = motor3Dir_Pin;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor3Dir_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0xf0>)
 8000c00:	f000 ff98 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin;
 8000c04:	2328      	movs	r3, #40	; 0x28
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_GPIO_Init+0xf4>)
 8000c1c:	f000 ff8a 	bl	8001b34 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020400 	.word	0x40020400

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000cc6:	e03a      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_TIM_Base_MspInit+0xb8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10e      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
}
 8000cee:	e026      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_TIM_Base_MspInit+0xbc>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10e      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	e012      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_TIM_Base_MspInit+0xc0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10d      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_Base_MspInit+0xb4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
}
 8000d3e:	bf00      	nop
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40000400 	.word	0x40000400
 8000d54:	40000800 	.word	0x40000800
 8000d58:	40000c00 	.word	0x40000c00

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d7c:	d11f      	bne.n	8000dbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a46      	ldr	r2, [pc, #280]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = motor1PWM_Pin;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor1PWM_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	483b      	ldr	r0, [pc, #236]	; (8000ea4 <HAL_TIM_MspPostInit+0x148>)
 8000db8:	f000 febc 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000dbc:	e06b      	b.n	8000e96 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <HAL_TIM_MspPostInit+0x14c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11e      	bne.n	8000e06 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a33      	ldr	r2, [pc, #204]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = motor2PWM_Pin;
 8000de4:	2310      	movs	r3, #16
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor2PWM_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482b      	ldr	r0, [pc, #172]	; (8000eac <HAL_TIM_MspPostInit+0x150>)
 8000e00:	f000 fe98 	bl	8001b34 <HAL_GPIO_Init>
}
 8000e04:	e047      	b.n	8000e96 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_TIM_MspPostInit+0x154>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d11f      	bne.n	8000e50 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3PWM_Pin;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor3PWM_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <HAL_TIM_MspPostInit+0x158>)
 8000e4a:	f000 fe73 	bl	8001b34 <HAL_GPIO_Init>
}
 8000e4e:	e022      	b.n	8000e96 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM5)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_TIM_MspPostInit+0x15c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11d      	bne.n	8000e96 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_TIM_MspPostInit+0x144>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor4PWM_Pin;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor4PWM_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <HAL_TIM_MspPostInit+0x148>)
 8000e92:	f000 fe4f 	bl	8001b34 <HAL_GPIO_Init>
}
 8000e96:	bf00      	nop
 8000e98:	3730      	adds	r7, #48	; 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40000800 	.word	0x40000800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40000c00 	.word	0x40000c00

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a34      	ldr	r2, [pc, #208]	; (8000fac <HAL_UART_MspInit+0xf0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d162      	bne.n	8000fa4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23c0      	movs	r3, #192	; 0xc0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <HAL_UART_MspInit+0xf8>)
 8000f32:	f000 fdff 	bl	8001b34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <HAL_UART_MspInit+0x100>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f7a:	f000 fa4b 	bl	8001414 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f84:	f7ff fe58 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2025      	movs	r0, #37	; 0x25
 8000f9a:	f000 fa04 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f9e:	2025      	movs	r0, #37	; 0x25
 8000fa0:	f000 fa1d 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	20000130 	.word	0x20000130
 8000fbc:	40026440 	.word	0x40026440

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f8aa 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <USART1_IRQHandler+0x10>)
 8001022:	f002 f9ed 	bl	8003400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000194 	.word	0x20000194

08001030 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	brainDMA_ProcessingData();
 8001034:	f7ff fa56 	bl	80004e4 <brainDMA_ProcessingData>
//		brainCheckbyteCount++;
//	else
//		if(brainCheckbyteCount != 4)
//			brainCheckbyteCount = 0;
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA2_Stream2_IRQHandler+0x14>)
 800103a:	f000 fb13 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000130 	.word	0x20000130

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SystemInit+0x28>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <SystemInit+0x28>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SystemInit+0x28>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	609a      	str	r2, [r3, #8]
#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800107a:	e003      	b.n	8001084 <LoopCopyDataInit>

0800107c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800107e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001082:	3104      	adds	r1, #4

08001084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800108a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800108c:	d3f6      	bcc.n	800107c <CopyDataInit>
  ldr  r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001090:	e002      	b.n	8001098 <LoopFillZerobss>

08001092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001094:	f842 3b04 	str.w	r3, [r2], #4

08001098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800109a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800109c:	d3f9      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800109e:	f7ff ffd3 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f003 f801 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff faa3 	bl	80005f0 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010b0:	08004148 	.word	0x08004148
  ldr  r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010b8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80010bc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010c0:	20000240 	.word	0x20000240

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94d 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fda4 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f965 	bl	80013fa <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92d 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	2000023c 	.word	0x2000023c

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	2000023c 	.word	0x2000023c

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_Delay+0x40>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000008 	.word	0x20000008

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff feb8 	bl	8001194 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e099      	b.n	8001564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001450:	e00f      	b.n	8001472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001452:	f7ff fe9f 	bl	8001194 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b05      	cmp	r3, #5
 800145e:	d908      	bls.n	8001472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e078      	b.n	8001564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e8      	bne.n	8001452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_DMA_Init+0x158>)
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4313      	orrs	r3, r2
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f023 0307 	bic.w	r3, r3, #7
 80014f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2b04      	cmp	r3, #4
 8001504:	d117      	bne.n	8001536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fa91 	bl	8001a40 <DMA_CheckFifoParam>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001532:	2301      	movs	r3, #1
 8001534:	e016      	b.n	8001564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fa48 	bl	80019d4 <DMA_CalcBaseAndBitshift>
 8001544:	4603      	mov	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	223f      	movs	r2, #63	; 0x3f
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	f010803f 	.word	0xf010803f

08001570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_DMA_Start_IT+0x26>
 8001592:	2302      	movs	r3, #2
 8001594:	e040      	b.n	8001618 <HAL_DMA_Start_IT+0xa8>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d12f      	bne.n	800160a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 f9da 	bl	8001978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	223f      	movs	r2, #63	; 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0216 	orr.w	r2, r2, #22
 80015de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0208 	orr.w	r2, r2, #8
 80015f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e005      	b.n	8001616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001612:	2302      	movs	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d004      	beq.n	800163e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00c      	b.n	8001658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_DMA_IRQHandler+0x258>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <HAL_DMA_IRQHandler+0x25c>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0a9b      	lsrs	r3, r3, #10
 800167c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2208      	movs	r2, #8
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01a      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0204 	bic.w	r2, r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2208      	movs	r2, #8
 80016be:	409a      	lsls	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d012      	beq.n	8001706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f043 0202 	orr.w	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	2204      	movs	r2, #4
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d012      	beq.n	800173c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2204      	movs	r2, #4
 800172a:	409a      	lsls	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0204 	orr.w	r2, r3, #4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	2210      	movs	r2, #16
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d043      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03c      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2210      	movs	r2, #16
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d018      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d108      	bne.n	8001794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
 8001792:	e01f      	b.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
 80017a4:	e016      	b.n	80017d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0208 	bic.w	r2, r2, #8
 80017c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2220      	movs	r2, #32
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 808e 	beq.w	8001902 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8086 	beq.w	8001902 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2220      	movs	r2, #32
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b05      	cmp	r3, #5
 800180c:	d136      	bne.n	800187c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0216 	bic.w	r2, r2, #22
 800181c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_DMA_IRQHandler+0x1da>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0208 	bic.w	r2, r2, #8
 800184c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001852:	223f      	movs	r2, #63	; 0x3f
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186e:	2b00      	cmp	r3, #0
 8001870:	d07d      	beq.n	800196e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
        }
        return;
 800187a:	e078      	b.n	800196e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01c      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d108      	bne.n	80018aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	2b00      	cmp	r3, #0
 800189e:	d030      	beq.n	8001902 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	e02b      	b.n	8001902 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d027      	beq.n	8001902 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
 80018ba:	e022      	b.n	8001902 <HAL_DMA_IRQHandler+0x29e>
 80018bc:	20000000 	.word	0x20000000
 80018c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0210 	bic.w	r2, r2, #16
 80018e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	2b00      	cmp	r3, #0
 8001908:	d032      	beq.n	8001970 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d022      	beq.n	800195c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2205      	movs	r2, #5
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	429a      	cmp	r2, r3
 8001938:	d307      	bcc.n	800194a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f2      	bne.n	800192e <HAL_DMA_IRQHandler+0x2ca>
 8001948:	e000      	b.n	800194c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800194a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
 800196c:	e000      	b.n	8001970 <HAL_DMA_IRQHandler+0x30c>
        return;
 800196e:	bf00      	nop
    }
  }
}
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d108      	bne.n	80019b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019b6:	e007      	b.n	80019c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3b10      	subs	r3, #16
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <DMA_CalcBaseAndBitshift+0x64>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <DMA_CalcBaseAndBitshift+0x68>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d909      	bls.n	8001a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	1d1a      	adds	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
 8001a14:	e007      	b.n	8001a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	aaaaaaab 	.word	0xaaaaaaab
 8001a3c:	08004130 	.word	0x08004130

08001a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d855      	bhi.n	8001b0c <DMA_CheckFifoParam+0xcc>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <DMA_CheckFifoParam+0x28>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a8b 	.word	0x08001a8b
 8001a70:	08001a79 	.word	0x08001a79
 8001a74:	08001b0d 	.word	0x08001b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d045      	beq.n	8001b10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a88:	e042      	b.n	8001b10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a92:	d13f      	bne.n	8001b14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a98:	e03c      	b.n	8001b14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa2:	d121      	bne.n	8001ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d836      	bhi.n	8001b18 <DMA_CheckFifoParam+0xd8>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <DMA_CheckFifoParam+0x70>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ac7 	.word	0x08001ac7
 8001ab8:	08001ac1 	.word	0x08001ac1
 8001abc:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e02f      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d024      	beq.n	8001b1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad6:	e021      	b.n	8001b1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ae0:	d11e      	bne.n	8001b20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ae6:	e01b      	b.n	8001b20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d902      	bls.n	8001af4 <DMA_CheckFifoParam+0xb4>
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d003      	beq.n	8001afa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001af2:	e018      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      break;
 8001af8:	e015      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00e      	beq.n	8001b24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0a:	e00b      	b.n	8001b24 <DMA_CheckFifoParam+0xe4>
      break;
 8001b0c:	bf00      	nop
 8001b0e:	e00a      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b10:	bf00      	nop
 8001b12:	e008      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b14:	bf00      	nop
 8001b16:	e006      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b18:	bf00      	nop
 8001b1a:	e004      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1c:	bf00      	nop
 8001b1e:	e002      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b24:	bf00      	nop
    }
  } 
  
  return status; 
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e16b      	b.n	8001e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 815a 	bne.w	8001e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d00b      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b82:	2b11      	cmp	r3, #17
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0xfc>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80b4 	beq.w	8001e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x314>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x318>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_GPIO_Init+0x328>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x20a>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00e      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae90 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	3724      	adds	r7, #36	; 0x24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e25b      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4ba3      	ldr	r3, [pc, #652]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b9d      	ldr	r3, [pc, #628]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b99      	ldr	r3, [pc, #612]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e236      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b91      	ldr	r3, [pc, #580]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a90      	ldr	r2, [pc, #576]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b84      	ldr	r3, [pc, #528]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a83      	ldr	r2, [pc, #524]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a80      	ldr	r2, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f91e 	bl	8001194 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f91a 	bl	8001194 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1fb      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f90a 	bl	8001194 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f906 	bl	8001194 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1e7      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1bb      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b56      	ldr	r3, [pc, #344]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4952      	ldr	r1, [pc, #328]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_OscConfig+0x2b0>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f8bf 	bl	8001194 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f8bb 	bl	8001194 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e19c      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4940      	ldr	r1, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x2b0>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f89e 	bl	8001194 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f89a 	bl	8001194 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e17b      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x2b4>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f87e 	bl	8001194 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff f87a 	bl	8001194 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e15b      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x2b4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f867 	bl	8001194 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff f863 	bl	8001194 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e144      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a0 	beq.w	8002236 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d121      	bne.n	8002176 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff f829 	bl	8001194 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e011      	b.n	800216a <HAL_RCC_OscConfig+0x2ce>
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
 8002154:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7ff f81c 	bl	8001194 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0fd      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x4d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x2f0>
 800217e:	4b7d      	ldr	r3, [pc, #500]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a7c      	ldr	r2, [pc, #496]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x32a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 8002194:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a76      	ldr	r2, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b74      	ldr	r3, [pc, #464]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a73      	ldr	r2, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x32a>
 80021ae:	4b71      	ldr	r3, [pc, #452]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a70      	ldr	r2, [pc, #448]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a6d      	ldr	r2, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7fe ffe1 	bl	8001194 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe ffdd 	bl	8001194 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0bc      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x33a>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe ffcb 	bl	8001194 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe ffc7 	bl	8001194 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0a6      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a51      	ldr	r2, [pc, #324]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8092 	beq.w	8002364 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d05c      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d141      	bne.n	80022d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe ff9b 	bl	8001194 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe ff97 	bl	8001194 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e078      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	4933      	ldr	r1, [pc, #204]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff70 	bl	8001194 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe ff6c 	bl	8001194 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e04d      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x41c>
 80022d6:	e045      	b.n	8002364 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe ff59 	bl	8001194 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe ff55 	bl	8001194 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e036      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x44a>
 8002304:	e02e      	b.n	8002364 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e029      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_RCC_OscConfig+0x4d8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	429a      	cmp	r2, r3
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d115      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002340:	4293      	cmp	r3, r2
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000
 8002374:	40023800 	.word	0x40023800
 8002378:	42470060 	.word	0x42470060

0800237c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0cc      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d90c      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b65      	ldr	r3, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d044      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d119      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d003      	beq.n	800243a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e067      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7fe fe92 	bl	8001194 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe fe8e 	bl	8001194 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e04f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d20c      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4601      	mov	r1, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	fa21 f303 	lsr.w	r3, r1, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fdf2 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00
 8002538:	40023800 	.word	0x40023800
 800253c:	08004118 	.word	0x08004118
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d007      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x32>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d008      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x38>
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 808d 	bne.w	800268e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002576:	60bb      	str	r3, [r7, #8]
       break;
 8002578:	e08c      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800257c:	60bb      	str	r3, [r7, #8]
      break;
 800257e:	e089      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002588:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258a:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d023      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	ea03 0501 	and.w	r5, r3, r1
 80025ac:	ea04 0602 	and.w	r6, r4, r2
 80025b0:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025b2:	fb02 f106 	mul.w	r1, r2, r6
 80025b6:	2200      	movs	r2, #0
 80025b8:	fb02 f205 	mul.w	r2, r2, r5
 80025bc:	440a      	add	r2, r1
 80025be:	493a      	ldr	r1, [pc, #232]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025c0:	fba5 0101 	umull	r0, r1, r5, r1
 80025c4:	1853      	adds	r3, r2, r1
 80025c6:	4619      	mov	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	f7fd fdf9 	bl	80001c8 <__aeabi_uldivmod>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e049      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	f04f 0400 	mov.w	r4, #0
 80025e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	ea03 0501 	and.w	r5, r3, r1
 80025f4:	ea04 0602 	and.w	r6, r4, r2
 80025f8:	4629      	mov	r1, r5
 80025fa:	4632      	mov	r2, r6
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	0154      	lsls	r4, r2, #5
 8002606:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800260a:	014b      	lsls	r3, r1, #5
 800260c:	4619      	mov	r1, r3
 800260e:	4622      	mov	r2, r4
 8002610:	1b49      	subs	r1, r1, r5
 8002612:	eb62 0206 	sbc.w	r2, r2, r6
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	f04f 0400 	mov.w	r4, #0
 800261e:	0194      	lsls	r4, r2, #6
 8002620:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002624:	018b      	lsls	r3, r1, #6
 8002626:	1a5b      	subs	r3, r3, r1
 8002628:	eb64 0402 	sbc.w	r4, r4, r2
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	00e2      	lsls	r2, r4, #3
 8002636:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800263a:	00d9      	lsls	r1, r3, #3
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	195b      	adds	r3, r3, r5
 8002642:	eb44 0406 	adc.w	r4, r4, r6
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	02a2      	lsls	r2, r4, #10
 8002650:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002654:	0299      	lsls	r1, r3, #10
 8002656:	460b      	mov	r3, r1
 8002658:	4614      	mov	r4, r2
 800265a:	4618      	mov	r0, r3
 800265c:	4621      	mov	r1, r4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	461a      	mov	r2, r3
 8002666:	4623      	mov	r3, r4
 8002668:	f7fd fdae 	bl	80001c8 <__aeabi_uldivmod>
 800266c:	4603      	mov	r3, r0
 800266e:	460c      	mov	r4, r1
 8002670:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	3301      	adds	r3, #1
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	60bb      	str	r3, [r7, #8]
      break;
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002690:	60bb      	str	r3, [r7, #8]
      break;
 8002692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002694:	68bb      	ldr	r3, [r7, #8]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	017d7840 	.word	0x017d7840

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4601      	mov	r1, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08004128 	.word	0x08004128

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08004128 	.word	0x08004128

08002714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e01d      	b.n	8002762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe faac 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 f9fa 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e01d      	b.n	80027b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f815 	bl	80027c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f000 f9cf 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fc9a 	bl	8003120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_TIM_PWM_Start+0x74>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_TIM_PWM_Start+0x2c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIM_PWM_Start+0x78>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_TIM_PWM_Start+0x30>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_TIM_PWM_Start+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d007      	beq.n	800283c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002866:	2302      	movs	r3, #2
 8002868:	e0b4      	b.n	80029d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	f200 809f 	bhi.w	80029c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028bd 	.word	0x080028bd
 800288c:	080029c1 	.word	0x080029c1
 8002890:	080029c1 	.word	0x080029c1
 8002894:	080029c1 	.word	0x080029c1
 8002898:	080028fd 	.word	0x080028fd
 800289c:	080029c1 	.word	0x080029c1
 80028a0:	080029c1 	.word	0x080029c1
 80028a4:	080029c1 	.word	0x080029c1
 80028a8:	0800293f 	.word	0x0800293f
 80028ac:	080029c1 	.word	0x080029c1
 80028b0:	080029c1 	.word	0x080029c1
 80028b4:	080029c1 	.word	0x080029c1
 80028b8:	0800297f 	.word	0x0800297f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f9e2 	bl	8002c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0208 	orr.w	r2, r2, #8
 80028d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6999      	ldr	r1, [r3, #24]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	619a      	str	r2, [r3, #24]
      break;
 80028fa:	e062      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa32 	bl	8002d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	021a      	lsls	r2, r3, #8
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	619a      	str	r2, [r3, #24]
      break;
 800293c:	e041      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fa87 	bl	8002e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0208 	orr.w	r2, r2, #8
 8002958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0204 	bic.w	r2, r2, #4
 8002968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69d9      	ldr	r1, [r3, #28]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	61da      	str	r2, [r3, #28]
      break;
 800297c:	e021      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fadb 	bl	8002f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69d9      	ldr	r1, [r3, #28]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	61da      	str	r2, [r3, #28]
      break;
 80029be:	e000      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80029c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIM_ConfigClockSource+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0a6      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x166>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d067      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0x120>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d80b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x6c>
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d073      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x140>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d802      	bhi.n	8002a3e <HAL_TIM_ConfigClockSource+0x62>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d06f      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a3c:	e078      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d06c      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x140>
 8002a42:	2b30      	cmp	r3, #48	; 0x30
 8002a44:	d06a      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a46:	e073      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d00d      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x8c>
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d804      	bhi.n	8002a5a <HAL_TIM_ConfigClockSource+0x7e>
 8002a50:	2b50      	cmp	r3, #80	; 0x50
 8002a52:	d033      	beq.n	8002abc <HAL_TIM_ConfigClockSource+0xe0>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d041      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a58:	e06a      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	d066      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x152>
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d017      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a66:	e063      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f000 fb32 	bl	80030e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]
      break;
 8002a94:	e04c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f000 fb1b 	bl	80030e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab8:	609a      	str	r2, [r3, #8]
      break;
 8002aba:	e039      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f000 fa8f 	bl	8002fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2150      	movs	r1, #80	; 0x50
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fae8 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002ada:	e029      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f000 faae 	bl	800304a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2160      	movs	r1, #96	; 0x60
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fad8 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002afa:	e019      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f000 fa6f 	bl	8002fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fac8 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002b1a:	e009      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fabf 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d00f      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3d      	ldr	r2, [pc, #244]	; (8002c64 <TIM_Base_SetConfig+0x118>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02b      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d027      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <TIM_Base_SetConfig+0x118>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d023      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01b      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d017      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00f      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TIM_Base_SetConfig+0x130>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <TIM_Base_SetConfig+0x134>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <TIM_Base_SetConfig+0x138>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <TIM_Base_SetConfig+0x13c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	615a      	str	r2, [r3, #20]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40010400 	.word	0x40010400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800
 8002c80:	40001800 	.word	0x40001800
 8002c84:	40001c00 	.word	0x40001c00
 8002c88:	40002000 	.word	0x40002000

08002c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f023 0201 	bic.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f023 0302 	bic.w	r3, r3, #2
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <TIM_OC1_SetConfig+0xd8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_OC1_SetConfig+0x64>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <TIM_OC1_SetConfig+0xdc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10c      	bne.n	8002d0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0308 	bic.w	r3, r3, #8
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <TIM_OC1_SetConfig+0xd8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_OC1_SetConfig+0x8e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <TIM_OC1_SetConfig+0xdc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d111      	bne.n	8002d3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40010400 	.word	0x40010400

08002d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0320 	bic.w	r3, r3, #32
 8002db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <TIM_OC2_SetConfig+0xe4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_OC2_SetConfig+0x68>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <TIM_OC2_SetConfig+0xe8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10d      	bne.n	8002df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <TIM_OC2_SetConfig+0xe4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_OC2_SetConfig+0x94>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <TIM_OC2_SetConfig+0xe8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010400 	.word	0x40010400

08002e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <TIM_OC3_SetConfig+0xe0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_OC3_SetConfig+0x66>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <TIM_OC3_SetConfig+0xe4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <TIM_OC3_SetConfig+0xe0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_OC3_SetConfig+0x92>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <TIM_OC3_SetConfig+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010400 	.word	0x40010400

08002f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	031b      	lsls	r3, r3, #12
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <TIM_OC4_SetConfig+0xa4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_OC4_SetConfig+0x68>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <TIM_OC4_SetConfig+0xa8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d109      	bne.n	8002fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010400 	.word	0x40010400

08002fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0201 	bic.w	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 030a 	bic.w	r3, r3, #10
 8003028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0210 	bic.w	r2, r3, #16
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f043 0307 	orr.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	021a      	lsls	r2, r3, #8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	431a      	orrs	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2201      	movs	r2, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	43db      	mvns	r3, r3
 8003142:	401a      	ands	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003180:	2302      	movs	r3, #2
 8003182:	e05a      	b.n	800323a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a21      	ldr	r2, [pc, #132]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d01d      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10c      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40010400 	.word	0x40010400
 800325c:	40014000 	.word	0x40014000
 8003260:	40001800 	.word	0x40001800

08003264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e03f      	b.n	80032f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fe16 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb81 	bl	80039b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d166      	bne.n	80033e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_UART_Receive_DMA+0x26>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e05f      	b.n	80033ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Receive_DMA+0x38>
 8003334:	2302      	movs	r3, #2
 8003336:	e058      	b.n	80033ea <HAL_UART_Receive_DMA+0xea>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2222      	movs	r2, #34	; 0x22
 8003356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <HAL_UART_Receive_DMA+0xf4>)
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_UART_Receive_DMA+0xf8>)
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_UART_Receive_DMA+0xfc>)
 8003370:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	2200      	movs	r2, #0
 8003378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3304      	adds	r3, #4
 800338a:	4619      	mov	r1, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	f7fe f8ed 	bl	8001570 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	08003629 	.word	0x08003629
 80033f8:	08003691 	.word	0x08003691
 80033fc:	080036ad 	.word	0x080036ad

08003400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x52>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa2e 	bl	80038ac <UART_Receive_IT>
      return;
 8003450:	e0d1      	b.n	80035f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80b0 	beq.w	80035ba <HAL_UART_IRQHandler+0x1ba>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_UART_IRQHandler+0x70>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a5 	beq.w	80035ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_UART_IRQHandler+0x90>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_IRQHandler+0xb0>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f043 0202 	orr.w	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_UART_IRQHandler+0xd0>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00f      	beq.n	80034fa <HAL_UART_IRQHandler+0xfa>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_UART_IRQHandler+0xee>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	f043 0208 	orr.w	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d078      	beq.n	80035f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_UART_IRQHandler+0x11c>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9c8 	bl	80038ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_UART_IRQHandler+0x144>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f911 	bl	800376c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d123      	bne.n	80035a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003566:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <HAL_UART_IRQHandler+0x1fc>)
 8003576:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe f84f 	bl	8001620 <HAL_DMA_Abort_IT>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003592:	4610      	mov	r0, r2
 8003594:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003596:	e00e      	b.n	80035b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f83b 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359e:	e00a      	b.n	80035b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f837 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a6:	e006      	b.n	80035b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f833 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035b4:	e01e      	b.n	80035f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	bf00      	nop
    return;
 80035b8:	e01c      	b.n	80035f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1d6>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8fe 	bl	80037d0 <UART_Transmit_IT>
    return;
 80035d4:	e00f      	b.n	80035f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1f6>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f946 	bl	800387c <UART_EndTransmit_IT>
    return;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80035f4:	bf00      	nop
  }
}
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	080037a9 	.word	0x080037a9

08003600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11e      	bne.n	8003682 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7fc ff84 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ffae 	bl	8003600 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b21      	cmp	r3, #33	; 0x21
 80036de:	d108      	bne.n	80036f2 <UART_DMAError+0x46>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2200      	movs	r2, #0
 80036ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036ec:	68b8      	ldr	r0, [r7, #8]
 80036ee:	f000 f827 	bl	8003740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b22      	cmp	r3, #34	; 0x22
 8003712:	d108      	bne.n	8003726 <UART_DMAError+0x7a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003720:	68b8      	ldr	r0, [r7, #8]
 8003722:	f000 f823 	bl	800376c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003732:	68b8      	ldr	r0, [r7, #8]
 8003734:	f7ff ff6e 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003756:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003782:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff ff26 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b21      	cmp	r3, #33	; 0x21
 80037e2:	d144      	bne.n	800386e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d11a      	bne.n	8003824 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	1c9a      	adds	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]
 8003816:	e00e      	b.n	8003836 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	e008      	b.n	8003836 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6211      	str	r1, [r2, #32]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4619      	mov	r1, r3
 8003844:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003858:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003868:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003892:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fc fe8f 	bl	80005c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b22      	cmp	r3, #34	; 0x22
 80038be:	d171      	bne.n	80039a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d123      	bne.n	8003912 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10e      	bne.n	80038f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
 80038f4:	e029      	b.n	800394a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e01b      	b.n	800394a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6858      	ldr	r0, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6291      	str	r1, [r2, #40]	; 0x28
 800392a:	b2c2      	uxtb	r2, r0
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e00c      	b.n	800394a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	1c58      	adds	r0, r3, #1
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	6288      	str	r0, [r1, #40]	; 0x28
 8003942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4619      	mov	r1, r3
 8003958:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800395a:	2b00      	cmp	r3, #0
 800395c:	d120      	bne.n	80039a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0220 	bic.w	r2, r2, #32
 800396c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fc fdfa 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e002      	b.n	80039a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	f040 818b 	bne.w	8003d38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4ac1      	ldr	r2, [pc, #772]	; (8003d2c <UART_SetConfig+0x37c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d005      	beq.n	8003a38 <UART_SetConfig+0x88>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4abf      	ldr	r2, [pc, #764]	; (8003d30 <UART_SetConfig+0x380>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f040 80bd 	bne.w	8003bb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fe58 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003a3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	461d      	mov	r5, r3
 8003a42:	f04f 0600 	mov.w	r6, #0
 8003a46:	46a8      	mov	r8, r5
 8003a48:	46b1      	mov	r9, r6
 8003a4a:	eb18 0308 	adds.w	r3, r8, r8
 8003a4e:	eb49 0409 	adc.w	r4, r9, r9
 8003a52:	4698      	mov	r8, r3
 8003a54:	46a1      	mov	r9, r4
 8003a56:	eb18 0805 	adds.w	r8, r8, r5
 8003a5a:	eb49 0906 	adc.w	r9, r9, r6
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a72:	4688      	mov	r8, r1
 8003a74:	4691      	mov	r9, r2
 8003a76:	eb18 0005 	adds.w	r0, r8, r5
 8003a7a:	eb49 0106 	adc.w	r1, r9, r6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	461d      	mov	r5, r3
 8003a84:	f04f 0600 	mov.w	r6, #0
 8003a88:	196b      	adds	r3, r5, r5
 8003a8a:	eb46 0406 	adc.w	r4, r6, r6
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f7fc fb99 	bl	80001c8 <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <UART_SetConfig+0x384>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	461d      	mov	r5, r3
 8003aac:	f04f 0600 	mov.w	r6, #0
 8003ab0:	46a9      	mov	r9, r5
 8003ab2:	46b2      	mov	sl, r6
 8003ab4:	eb19 0309 	adds.w	r3, r9, r9
 8003ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	eb19 0905 	adds.w	r9, r9, r5
 8003ac4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003adc:	4689      	mov	r9, r1
 8003ade:	4692      	mov	sl, r2
 8003ae0:	eb19 0005 	adds.w	r0, r9, r5
 8003ae4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	461d      	mov	r5, r3
 8003aee:	f04f 0600 	mov.w	r6, #0
 8003af2:	196b      	adds	r3, r5, r5
 8003af4:	eb46 0406 	adc.w	r4, r6, r6
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fc fb64 	bl	80001c8 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <UART_SetConfig+0x384>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a86      	ldr	r2, [pc, #536]	; (8003d34 <UART_SetConfig+0x384>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b28:	4498      	add	r8, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	46a9      	mov	r9, r5
 8003b34:	46b2      	mov	sl, r6
 8003b36:	eb19 0309 	adds.w	r3, r9, r9
 8003b3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b3e:	4699      	mov	r9, r3
 8003b40:	46a2      	mov	sl, r4
 8003b42:	eb19 0905 	adds.w	r9, r9, r5
 8003b46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b5e:	4689      	mov	r9, r1
 8003b60:	4692      	mov	sl, r2
 8003b62:	eb19 0005 	adds.w	r0, r9, r5
 8003b66:	eb4a 0106 	adc.w	r1, sl, r6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	196b      	adds	r3, r5, r5
 8003b76:	eb46 0406 	adc.w	r4, r6, r6
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	f7fc fb23 	bl	80001c8 <__aeabi_uldivmod>
 8003b82:	4603      	mov	r3, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <UART_SetConfig+0x384>)
 8003b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <UART_SetConfig+0x384>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 0207 	and.w	r2, r3, #7
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4442      	add	r2, r8
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e26f      	b.n	8004092 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7fe fd87 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003bb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	461d      	mov	r5, r3
 8003bbc:	f04f 0600 	mov.w	r6, #0
 8003bc0:	46a8      	mov	r8, r5
 8003bc2:	46b1      	mov	r9, r6
 8003bc4:	eb18 0308 	adds.w	r3, r8, r8
 8003bc8:	eb49 0409 	adc.w	r4, r9, r9
 8003bcc:	4698      	mov	r8, r3
 8003bce:	46a1      	mov	r9, r4
 8003bd0:	eb18 0805 	adds.w	r8, r8, r5
 8003bd4:	eb49 0906 	adc.w	r9, r9, r6
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003be4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003be8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bec:	4688      	mov	r8, r1
 8003bee:	4691      	mov	r9, r2
 8003bf0:	eb18 0005 	adds.w	r0, r8, r5
 8003bf4:	eb49 0106 	adc.w	r1, r9, r6
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	f04f 0600 	mov.w	r6, #0
 8003c02:	196b      	adds	r3, r5, r5
 8003c04:	eb46 0406 	adc.w	r4, r6, r6
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	f7fc fadc 	bl	80001c8 <__aeabi_uldivmod>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <UART_SetConfig+0x384>)
 8003c18:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	461d      	mov	r5, r3
 8003c26:	f04f 0600 	mov.w	r6, #0
 8003c2a:	46a9      	mov	r9, r5
 8003c2c:	46b2      	mov	sl, r6
 8003c2e:	eb19 0309 	adds.w	r3, r9, r9
 8003c32:	eb4a 040a 	adc.w	r4, sl, sl
 8003c36:	4699      	mov	r9, r3
 8003c38:	46a2      	mov	sl, r4
 8003c3a:	eb19 0905 	adds.w	r9, r9, r5
 8003c3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c56:	4689      	mov	r9, r1
 8003c58:	4692      	mov	sl, r2
 8003c5a:	eb19 0005 	adds.w	r0, r9, r5
 8003c5e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0600 	mov.w	r6, #0
 8003c6c:	196b      	adds	r3, r5, r5
 8003c6e:	eb46 0406 	adc.w	r4, r6, r6
 8003c72:	461a      	mov	r2, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7fc faa7 	bl	80001c8 <__aeabi_uldivmod>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <UART_SetConfig+0x384>)
 8003c82:	fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <UART_SetConfig+0x384>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca2:	4498      	add	r8, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	46a9      	mov	r9, r5
 8003cae:	46b2      	mov	sl, r6
 8003cb0:	eb19 0309 	adds.w	r3, r9, r9
 8003cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb8:	4699      	mov	r9, r3
 8003cba:	46a2      	mov	sl, r4
 8003cbc:	eb19 0905 	adds.w	r9, r9, r5
 8003cc0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd8:	4689      	mov	r9, r1
 8003cda:	4692      	mov	sl, r2
 8003cdc:	eb19 0005 	adds.w	r0, r9, r5
 8003ce0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	461d      	mov	r5, r3
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	196b      	adds	r3, r5, r5
 8003cf0:	eb46 0406 	adc.w	r4, r6, r6
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f7fc fa66 	bl	80001c8 <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <UART_SetConfig+0x384>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <UART_SetConfig+0x384>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0207 	and.w	r2, r3, #7
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4442      	add	r2, r8
 8003d28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d2a:	e1b2      	b.n	8004092 <UART_SetConfig+0x6e2>
 8003d2c:	40011000 	.word	0x40011000
 8003d30:	40011400 	.word	0x40011400
 8003d34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4ad7      	ldr	r2, [pc, #860]	; (800409c <UART_SetConfig+0x6ec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d005      	beq.n	8003d4e <UART_SetConfig+0x39e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4ad6      	ldr	r2, [pc, #856]	; (80040a0 <UART_SetConfig+0x6f0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	f040 80d1 	bne.w	8003ef0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4e:	f7fe fccd 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	469a      	mov	sl, r3
 8003d58:	f04f 0b00 	mov.w	fp, #0
 8003d5c:	46d0      	mov	r8, sl
 8003d5e:	46d9      	mov	r9, fp
 8003d60:	eb18 0308 	adds.w	r3, r8, r8
 8003d64:	eb49 0409 	adc.w	r4, r9, r9
 8003d68:	4698      	mov	r8, r3
 8003d6a:	46a1      	mov	r9, r4
 8003d6c:	eb18 080a 	adds.w	r8, r8, sl
 8003d70:	eb49 090b 	adc.w	r9, r9, fp
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d88:	4688      	mov	r8, r1
 8003d8a:	4691      	mov	r9, r2
 8003d8c:	eb1a 0508 	adds.w	r5, sl, r8
 8003d90:	eb4b 0609 	adc.w	r6, fp, r9
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	f04f 0400 	mov.w	r4, #0
 8003da6:	0094      	lsls	r4, r2, #2
 8003da8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dac:	008b      	lsls	r3, r1, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	4623      	mov	r3, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	4631      	mov	r1, r6
 8003db6:	f7fc fa07 	bl	80001c8 <__aeabi_uldivmod>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4bb8      	ldr	r3, [pc, #736]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	469b      	mov	fp, r3
 8003dd0:	f04f 0c00 	mov.w	ip, #0
 8003dd4:	46d9      	mov	r9, fp
 8003dd6:	46e2      	mov	sl, ip
 8003dd8:	eb19 0309 	adds.w	r3, r9, r9
 8003ddc:	eb4a 040a 	adc.w	r4, sl, sl
 8003de0:	4699      	mov	r9, r3
 8003de2:	46a2      	mov	sl, r4
 8003de4:	eb19 090b 	adds.w	r9, r9, fp
 8003de8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e00:	4689      	mov	r9, r1
 8003e02:	4692      	mov	sl, r2
 8003e04:	eb1b 0509 	adds.w	r5, fp, r9
 8003e08:	eb4c 060a 	adc.w	r6, ip, sl
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	0094      	lsls	r4, r2, #2
 8003e20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	f7fc f9cb 	bl	80001c8 <__aeabi_uldivmod>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b9a      	ldr	r3, [pc, #616]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2164      	movs	r1, #100	; 0x64
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a95      	ldr	r2, [pc, #596]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	4498      	add	r8, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	469b      	mov	fp, r3
 8003e5e:	f04f 0c00 	mov.w	ip, #0
 8003e62:	46d9      	mov	r9, fp
 8003e64:	46e2      	mov	sl, ip
 8003e66:	eb19 0309 	adds.w	r3, r9, r9
 8003e6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6e:	4699      	mov	r9, r3
 8003e70:	46a2      	mov	sl, r4
 8003e72:	eb19 090b 	adds.w	r9, r9, fp
 8003e76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8e:	4689      	mov	r9, r1
 8003e90:	4692      	mov	sl, r2
 8003e92:	eb1b 0509 	adds.w	r5, fp, r9
 8003e96:	eb4c 060a 	adc.w	r6, ip, sl
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	0094      	lsls	r4, r2, #2
 8003eae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	4631      	mov	r1, r6
 8003ebc:	f7fc f984 	bl	80001c8 <__aeabi_uldivmod>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4442      	add	r2, r8
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	e0d0      	b.n	8004092 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe fbe8 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	469a      	mov	sl, r3
 8003efa:	f04f 0b00 	mov.w	fp, #0
 8003efe:	46d0      	mov	r8, sl
 8003f00:	46d9      	mov	r9, fp
 8003f02:	eb18 0308 	adds.w	r3, r8, r8
 8003f06:	eb49 0409 	adc.w	r4, r9, r9
 8003f0a:	4698      	mov	r8, r3
 8003f0c:	46a1      	mov	r9, r4
 8003f0e:	eb18 080a 	adds.w	r8, r8, sl
 8003f12:	eb49 090b 	adc.w	r9, r9, fp
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2a:	4688      	mov	r8, r1
 8003f2c:	4691      	mov	r9, r2
 8003f2e:	eb1a 0508 	adds.w	r5, sl, r8
 8003f32:	eb4b 0609 	adc.w	r6, fp, r9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	0094      	lsls	r4, r2, #2
 8003f4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f4e:	008b      	lsls	r3, r1, #2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	4631      	mov	r1, r6
 8003f58:	f7fc f936 	bl	80001c8 <__aeabi_uldivmod>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b50      	ldr	r3, [pc, #320]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003f64:	fba3 2302 	umull	r2, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	469b      	mov	fp, r3
 8003f72:	f04f 0c00 	mov.w	ip, #0
 8003f76:	46d9      	mov	r9, fp
 8003f78:	46e2      	mov	sl, ip
 8003f7a:	eb19 0309 	adds.w	r3, r9, r9
 8003f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f82:	4699      	mov	r9, r3
 8003f84:	46a2      	mov	sl, r4
 8003f86:	eb19 090b 	adds.w	r9, r9, fp
 8003f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa2:	4689      	mov	r9, r1
 8003fa4:	4692      	mov	sl, r2
 8003fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8003faa:	eb4c 060a 	adc.w	r6, ip, sl
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	0094      	lsls	r4, r2, #2
 8003fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc6:	008b      	lsls	r3, r1, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	4631      	mov	r1, r6
 8003fd0:	f7fc f8fa 	bl	80001c8 <__aeabi_uldivmod>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffa:	4498      	add	r8, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	469b      	mov	fp, r3
 8004000:	f04f 0c00 	mov.w	ip, #0
 8004004:	46d9      	mov	r9, fp
 8004006:	46e2      	mov	sl, ip
 8004008:	eb19 0309 	adds.w	r3, r9, r9
 800400c:	eb4a 040a 	adc.w	r4, sl, sl
 8004010:	4699      	mov	r9, r3
 8004012:	46a2      	mov	sl, r4
 8004014:	eb19 090b 	adds.w	r9, r9, fp
 8004018:	eb4a 0a0c 	adc.w	sl, sl, ip
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800402c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004030:	4689      	mov	r9, r1
 8004032:	4692      	mov	sl, r2
 8004034:	eb1b 0509 	adds.w	r5, fp, r9
 8004038:	eb4c 060a 	adc.w	r6, ip, sl
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4619      	mov	r1, r3
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	0094      	lsls	r4, r2, #2
 8004050:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	461a      	mov	r2, r3
 8004058:	4623      	mov	r3, r4
 800405a:	4628      	mov	r0, r5
 800405c:	4631      	mov	r1, r6
 800405e:	f7fc f8b3 	bl	80001c8 <__aeabi_uldivmod>
 8004062:	4603      	mov	r3, r0
 8004064:	460c      	mov	r4, r1
 8004066:	461a      	mov	r2, r3
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <UART_SetConfig+0x6f4>)
 800406a:	fba3 1302 	umull	r1, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2164      	movs	r1, #100	; 0x64
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <UART_SetConfig+0x6f4>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4442      	add	r2, r8
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	e7ff      	b.n	8004092 <UART_SetConfig+0x6e2>
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409c:	40011000 	.word	0x40011000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4e0d      	ldr	r6, [pc, #52]	; (80040e0 <__libc_init_array+0x38>)
 80040ac:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040ae:	1ba4      	subs	r4, r4, r6
 80040b0:	10a4      	asrs	r4, r4, #2
 80040b2:	2500      	movs	r5, #0
 80040b4:	42a5      	cmp	r5, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	4e0b      	ldr	r6, [pc, #44]	; (80040e8 <__libc_init_array+0x40>)
 80040ba:	4c0c      	ldr	r4, [pc, #48]	; (80040ec <__libc_init_array+0x44>)
 80040bc:	f000 f820 	bl	8004100 <_init>
 80040c0:	1ba4      	subs	r4, r4, r6
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	2500      	movs	r5, #0
 80040c6:	42a5      	cmp	r5, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d0:	4798      	blx	r3
 80040d2:	3501      	adds	r5, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040da:	4798      	blx	r3
 80040dc:	3501      	adds	r5, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08004140 	.word	0x08004140
 80040e4:	08004140 	.word	0x08004140
 80040e8:	08004140 	.word	0x08004140
 80040ec:	08004144 	.word	0x08004144

080040f0 <memset>:
 80040f0:	4402      	add	r2, r0
 80040f2:	4603      	mov	r3, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
