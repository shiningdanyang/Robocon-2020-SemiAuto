
spinalCord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800414c  0800414c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08004160  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004160  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b471  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192e  00000000  00000000  0002b4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020979  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085be  00000000  00000000  0004eed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9022  00000000  00000000  0005748f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001204b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  0012052c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800410c 	.word	0x0800410c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800410c 	.word	0x0800410c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <peripheralUART_Init>:
uint8_t brainCheckbyteCount = 0, brainData[5], brainDataIndex;
char* controlData;

#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&brain, brainRxPacket, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	4903      	ldr	r1, [pc, #12]	; (80004dc <peripheralUART_Init+0x14>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <peripheralUART_Init+0x18>)
 80004d2:	f002 ff1b 	bl	800330c <HAL_UART_Receive_DMA>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000230 	.word	0x20000230
 80004e0:	20000194 	.word	0x20000194

080004e4 <brainDMA_ProcessingData>:
}

#ifdef SPINAL_CORD_MODE_ONEWAY
//put in function handles DMA2 stream2 global interrupt of brainDMA Rx in stm32f4xx_it.c
void brainDMA_ProcessingData(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
		if(brainCheckbyteCount == 4 )
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <brainDMA_ProcessingData+0x64>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d114      	bne.n	800051a <brainDMA_ProcessingData+0x36>
		{
		  brainData[brainDataIndex++] = brainRxPacket[0];
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <brainDMA_ProcessingData+0x68>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	b2d1      	uxtb	r1, r2
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <brainDMA_ProcessingData+0x68>)
 80004fa:	7011      	strb	r1, [r2, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <brainDMA_ProcessingData+0x6c>)
 8000500:	7819      	ldrb	r1, [r3, #0]
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <brainDMA_ProcessingData+0x70>)
 8000504:	5499      	strb	r1, [r3, r2]
			if(brainDataIndex > 5)
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <brainDMA_ProcessingData+0x68>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b05      	cmp	r3, #5
 800050c:	d905      	bls.n	800051a <brainDMA_ProcessingData+0x36>
			{
				brainDataIndex = 0;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <brainDMA_ProcessingData+0x68>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
				brainCheckbyteCount = 0;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
			}
		}
		if(brainRxPacket[0] == 0xAA)
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <brainDMA_ProcessingData+0x6c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2baa      	cmp	r3, #170	; 0xaa
 8000520:	d106      	bne.n	8000530 <brainDMA_ProcessingData+0x4c>
			brainCheckbyteCount++;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <brainDMA_ProcessingData+0x64>)
 800052c:	701a      	strb	r2, [r3, #0]
		else
			if(brainCheckbyteCount != 4)
				brainCheckbyteCount = 0;
}
 800052e:	e006      	b.n	800053e <brainDMA_ProcessingData+0x5a>
			if(brainCheckbyteCount != 4)
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <brainDMA_ProcessingData+0x64>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d002      	beq.n	800053e <brainDMA_ProcessingData+0x5a>
				brainCheckbyteCount = 0;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <brainDMA_ProcessingData+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	2000002c 	.word	0x2000002c
 800054c:	200001da 	.word	0x200001da
 8000550:	20000230 	.word	0x20000230
 8000554:	200001d4 	.word	0x200001d4

08000558 <peripheralPWM_Init>:
uint8_t motor2Dir;
uint8_t motor3Dir;
uint8_t motor4Dir;

void peripheralPWM_Init()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 800055c:	2100      	movs	r1, #0
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <peripheralPWM_Init+0x28>)
 8000560:	f002 f93e 	bl	80027e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8000564:	2100      	movs	r1, #0
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <peripheralPWM_Init+0x2c>)
 8000568:	f002 f93a 	bl	80027e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 800056c:	2100      	movs	r1, #0
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <peripheralPWM_Init+0x30>)
 8000570:	f002 f936 	bl	80027e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8000574:	2100      	movs	r1, #0
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <peripheralPWM_Init+0x34>)
 8000578:	f002 f932 	bl	80027e0 <HAL_TIM_PWM_Start>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200001e8 	.word	0x200001e8
 8000584:	200000e0 	.word	0x200000e0
 8000588:	20000044 	.word	0x20000044
 800058c:	2000009c 	.word	0x2000009c

08000590 <HAL_UART_RxCpltCallback>:
//include sau DNL_Slave_Peripheral_UART.h
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(huart->Instance == brain.Instance)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_UART_RxCpltCallback+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d102      	bne.n	80005aa <HAL_UART_RxCpltCallback+0x1a>
	{
		brainRxCplt = 1;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_UART_RxCpltCallback+0x2c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
		// HAL_UART_Receive_IT(&master, dataFromMaster, 4);
	}
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000194 	.word	0x20000194
 80005bc:	20000086 	.word	0x20000086

080005c0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == brain.Instance)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_UART_TxCpltCallback+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d102      	bne.n	80005da <HAL_UART_TxCpltCallback+0x1a>
	{
		brainTxCplt = 1;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_UART_TxCpltCallback+0x2c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
		// HAL_UART_Receive_IT(&master, dataFromMaster, 4);
	}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000194 	.word	0x20000194
 80005ec:	20000088 	.word	0x20000088

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fd6e 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f81e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 faa6 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 fa84 	bl	8000b0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fa58 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000608:	f000 f880 	bl	800070c <MX_TIM2_Init>
  MX_TIM3_Init();
 800060c:	f000 f8f2 	bl	80007f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000610:	f000 f966 	bl	80008e0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000614:	f000 f9da 	bl	80009cc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralPWM_Init();
 8000618:	f7ff ff9e 	bl	8000558 <peripheralPWM_Init>
  peripheralUART_Init();
 800061c:	f7ff ff54 	bl	80004c8 <peripheralUART_Init>
//  startPeripheralUART();
  HAL_Delay(4000);
 8000620:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000624:	f000 fdc8 	bl	80011b8 <HAL_Delay>

//	  controlMotor1(brainRxPacket[0], brainData[4]);
//	  controlMotor2(brainRxPacket[1], brainData[5]);
//	  controlMotor3(brainRxPacket[2], brainData[6]);
//	  controlMotor4(brainRxPacket[3], brainData[7]);
	  tracking++;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <main+0x44>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a01      	ldr	r2, [pc, #4]	; (8000634 <main+0x44>)
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e7f9      	b.n	8000628 <main+0x38>
 8000634:	200001dc 	.word	0x200001dc

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fd58 	bl	80040fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fbf3 	bl	8001ea8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fabc 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fe4c 	bl	8002388 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 faa5 	bl	8000c44 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_TIM2_Init+0xe4>)
 800073e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000746:	2253      	movs	r2, #83	; 0x53
 8000748:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_TIM2_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000752:	22ff      	movs	r2, #255	; 0xff
 8000754:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_TIM2_Init+0xe4>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000762:	4823      	ldr	r0, [pc, #140]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000764:	f001 ffdc 	bl	8002720 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800076e:	f000 fa69 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077c:	4619      	mov	r1, r3
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000780:	f002 f932 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800078a:	f000 fa5b 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <MX_TIM2_Init+0xe4>)
 8000790:	f001 fff1 	bl	8002776 <HAL_TIM_PWM_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800079a:	f000 fa53 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_TIM2_Init+0xe4>)
 80007ae:	f002 fce3 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007b8:	f000 fa44 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <MX_TIM2_Init+0xe4>)
 80007d4:	f002 f842 	bl	800285c <HAL_TIM_PWM_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007de:	f000 fa31 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <MX_TIM2_Init+0xe4>)
 80007e4:	f000 fac0 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80007e8:	bf00      	nop
 80007ea:	3738      	adds	r7, #56	; 0x38
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200001e8 	.word	0x200001e8

080007f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_TIM3_Init+0xe8>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_TIM3_Init+0xe4>)
 800082c:	2253      	movs	r2, #83	; 0x53
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_TIM3_Init+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000848:	4823      	ldr	r0, [pc, #140]	; (80008d8 <MX_TIM3_Init+0xe4>)
 800084a:	f001 ff69 	bl	8002720 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000854:	f000 f9f6 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000866:	f002 f8bf 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000870:	f000 f9e8 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000876:	f001 ff7e 	bl	8002776 <HAL_TIM_PWM_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000880:	f000 f9e0 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_TIM3_Init+0xe4>)
 8000894:	f002 fc70 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800089e:	f000 f9d1 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	; 0x60
 80008a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_TIM3_Init+0xe4>)
 80008ba:	f001 ffcf 	bl	800285c <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80008c4:	f000 f9be 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM3_Init+0xe4>)
 80008ca:	f000 fa4d 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000e0 	.word	0x200000e0
 80008dc:	40000400 	.word	0x40000400

080008e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <MX_TIM4_Init+0xe8>)
 8000914:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000918:	2253      	movs	r2, #83	; 0x53
 800091a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_TIM4_Init+0xe4>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_TIM4_Init+0xe4>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000934:	4823      	ldr	r0, [pc, #140]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000936:	f001 fef3 	bl	8002720 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000940:	f000 f980 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	4619      	mov	r1, r3
 8000950:	481c      	ldr	r0, [pc, #112]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000952:	f002 f849 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800095c:	f000 f972 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000960:	4818      	ldr	r0, [pc, #96]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000962:	f001 ff08 	bl	8002776 <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 f96a 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4619      	mov	r1, r3
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_TIM4_Init+0xe4>)
 8000980:	f002 fbfa 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800098a:	f000 f95b 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000996:	2302      	movs	r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <MX_TIM4_Init+0xe4>)
 80009a6:	f001 ff59 	bl	800285c <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009b0:	f000 f948 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <MX_TIM4_Init+0xe4>)
 80009b6:	f000 f9d7 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000044 	.word	0x20000044
 80009c8:	40000800 	.word	0x40000800

080009cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <MX_TIM5_Init+0xe8>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a04:	2253      	movs	r2, #83	; 0x53
 8000a06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a20:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a22:	f001 fe7d 	bl	8002720 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000a2c:	f000 f90a 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a3e:	f001 ffd3 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000a48:	f000 f8fc 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a4e:	f001 fe92 	bl	8002776 <HAL_TIM_PWM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 f8f4 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a6c:	f002 fb84 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000a76:	f000 f8e5 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2360      	movs	r3, #96	; 0x60
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a82:	2302      	movs	r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000a92:	f001 fee3 	bl	800285c <HAL_TIM_PWM_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000a9c:	f000 f8d2 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM5_Init+0xe4>)
 8000aa2:	f000 f961 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3738      	adds	r7, #56	; 0x38
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000009c 	.word	0x2000009c
 8000ab4:	40000c00 	.word	0x40000c00

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART1_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000af0:	f002 fbbe 	bl	8003270 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f8a3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000194 	.word	0x20000194
 8000b08:	40011000 	.word	0x40011000

08000b0c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_DMA_Init+0x3c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <MX_DMA_Init+0x3c>)
 8000b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_DMA_Init+0x3c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	203a      	movs	r0, #58	; 0x3a
 8000b34:	f000 fc3d 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b38:	203a      	movs	r0, #58	; 0x3a
 8000b3a:	f000 fc56 	bl	80013ea <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a2b      	ldr	r2, [pc, #172]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2102      	movs	r1, #2
 8000bba:	481f      	ldr	r0, [pc, #124]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000bbc:	f001 f95a 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <MX_GPIO_Init+0xf0>)
 8000bc8:	f001 f954 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor1Dir_Pin|motor2Dir_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2128      	movs	r1, #40	; 0x28
 8000bd0:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0xf4>)
 8000bd2:	f001 f94f 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor4Dir_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor4Dir_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000bee:	f000 ffa7 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor3Dir_Pin */
  GPIO_InitStruct.Pin = motor3Dir_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor3Dir_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_GPIO_Init+0xf0>)
 8000c0c:	f000 ff98 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin;
 8000c10:	2328      	movs	r3, #40	; 0x28
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_GPIO_Init+0xf4>)
 8000c28:	f000 ff8a 	bl	8001b40 <HAL_GPIO_Init>

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	40020400 	.word	0x40020400

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000cd2:	e03a      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_TIM_Base_MspInit+0xb8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10e      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
}
 8000cfa:	e026      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_TIM_Base_MspInit+0xbc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
}
 8000d22:	e012      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_TIM_Base_MspInit+0xc0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	40000800 	.word	0x40000800
 8000d64:	40000c00 	.word	0x40000c00

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d11f      	bne.n	8000dca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a46      	ldr	r2, [pc, #280]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b44      	ldr	r3, [pc, #272]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = motor1PWM_Pin;
 8000da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor1PWM_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	483b      	ldr	r0, [pc, #236]	; (8000eb0 <HAL_TIM_MspPostInit+0x148>)
 8000dc4:	f000 febc 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000dc8:	e06b      	b.n	8000ea2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <HAL_TIM_MspPostInit+0x14c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d11e      	bne.n	8000e12 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = motor2PWM_Pin;
 8000df0:	2310      	movs	r3, #16
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor2PWM_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	482b      	ldr	r0, [pc, #172]	; (8000eb8 <HAL_TIM_MspPostInit+0x150>)
 8000e0c:	f000 fe98 	bl	8001b40 <HAL_GPIO_Init>
}
 8000e10:	e047      	b.n	8000ea2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a29      	ldr	r2, [pc, #164]	; (8000ebc <HAL_TIM_MspPostInit+0x154>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d11f      	bne.n	8000e5c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3PWM_Pin;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor3PWM_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <HAL_TIM_MspPostInit+0x158>)
 8000e56:	f000 fe73 	bl	8001b40 <HAL_GPIO_Init>
}
 8000e5a:	e022      	b.n	8000ea2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM5)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_TIM_MspPostInit+0x15c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11d      	bne.n	8000ea2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_TIM_MspPostInit+0x144>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor4PWM_Pin;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor4PWM_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <HAL_TIM_MspPostInit+0x148>)
 8000e9e:	f000 fe4f 	bl	8001b40 <HAL_GPIO_Init>
}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40000400 	.word	0x40000400
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40000c00 	.word	0x40000c00

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d162      	bne.n	8000fb0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a32      	ldr	r2, [pc, #200]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23c0      	movs	r3, #192	; 0xc0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f32:	2307      	movs	r3, #7
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <HAL_UART_MspInit+0xf8>)
 8000f3e:	f000 fdff 	bl	8001b40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f76:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f86:	f000 fa4b 	bl	8001420 <HAL_DMA_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f90:	f7ff fe58 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2025      	movs	r0, #37	; 0x25
 8000fa6:	f000 fa04 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000faa:	2025      	movs	r0, #37	; 0x25
 8000fac:	f000 fa1d 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	20000130 	.word	0x20000130
 8000fc8:	40026440 	.word	0x40026440

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8aa 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART1_IRQHandler+0x10>)
 800102e:	f002 f9ed 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000194 	.word	0x20000194

0800103c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	brainDMA_ProcessingData();
 8001040:	f7ff fa50 	bl	80004e4 <brainDMA_ProcessingData>
//		brainCheckbyteCount++;
//	else
//		if(brainCheckbyteCount != 4)
//			brainCheckbyteCount = 0;
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA2_Stream2_IRQHandler+0x14>)
 8001046:	f000 fb13 	bl	8001670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000130 	.word	0x20000130

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <SystemInit+0x28>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a07      	ldr	r2, [pc, #28]	; (800107c <SystemInit+0x28>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <SystemInit+0x28>)
 800106a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106e:	609a      	str	r2, [r3, #8]
#endif
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
  ldr  r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd3 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f003 f801 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa9d 	bl	80005f0 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010bc:	08004154 	.word	0x08004154
  ldr  r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80010c8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010cc:	20000240 	.word	0x20000240

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f94d 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fda4 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f965 	bl	8001406 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f92d 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	2000023c 	.word	0x2000023c

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000023c 	.word	0x2000023c

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_Delay+0x40>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff feb8 	bl	80011a0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e099      	b.n	8001570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145c:	e00f      	b.n	800147e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145e:	f7ff fe9f 	bl	80011a0 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b05      	cmp	r3, #5
 800146a:	d908      	bls.n	800147e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e078      	b.n	8001570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e8      	bne.n	800145e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_DMA_Init+0x158>)
 8001498:	4013      	ands	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4313      	orrs	r3, r2
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f023 0307 	bic.w	r3, r3, #7
 80014fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2b04      	cmp	r3, #4
 8001510:	d117      	bne.n	8001542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fa91 	bl	8001a4c <DMA_CheckFifoParam>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153e:	2301      	movs	r3, #1
 8001540:	e016      	b.n	8001570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fa48 	bl	80019e0 <DMA_CalcBaseAndBitshift>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	f010803f 	.word	0xf010803f

0800157c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Start_IT+0x26>
 800159e:	2302      	movs	r3, #2
 80015a0:	e040      	b.n	8001624 <HAL_DMA_Start_IT+0xa8>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d12f      	bne.n	8001616 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9da 	bl	8001984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0216 	orr.w	r2, r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0208 	orr.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e005      	b.n	8001622 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161e:	2302      	movs	r3, #2
 8001620:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d004      	beq.n	800164a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00c      	b.n	8001664 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2205      	movs	r2, #5
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_DMA_IRQHandler+0x258>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_DMA_IRQHandler+0x25c>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2208      	movs	r2, #8
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01a      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2208      	movs	r2, #8
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2201      	movs	r2, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2204      	movs	r2, #4
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d012      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2204      	movs	r2, #4
 8001736:	409a      	lsls	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2210      	movs	r2, #16
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d043      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03c      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2210      	movs	r2, #16
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d018      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
 800179e:	e01f      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01b      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
 80017b0:	e016      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0208 	bic.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2220      	movs	r2, #32
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 808e 	beq.w	800190e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8086 	beq.w	800190e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2220      	movs	r2, #32
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b05      	cmp	r3, #5
 8001818:	d136      	bne.n	8001888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_DMA_IRQHandler+0x1da>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	223f      	movs	r2, #63	; 0x3f
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d07d      	beq.n	800197a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
        }
        return;
 8001886:	e078      	b.n	800197a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01c      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d030      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e02b      	b.n	800190e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d027      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
 80018c6:	e022      	b.n	800190e <HAL_DMA_IRQHandler+0x29e>
 80018c8:	20000000 	.word	0x20000000
 80018cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0210 	bic.w	r2, r2, #16
 80018ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	2b00      	cmp	r3, #0
 8001914:	d032      	beq.n	800197c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d022      	beq.n	8001968 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d307      	bcc.n	8001956 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f2      	bne.n	800193a <HAL_DMA_IRQHandler+0x2ca>
 8001954:	e000      	b.n	8001958 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001956:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x30c>
        return;
 800197a:	bf00      	nop
    }
  }
}
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop

08001984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d108      	bne.n	80019c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019c2:	e007      	b.n	80019d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3b10      	subs	r3, #16
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <DMA_CalcBaseAndBitshift+0x64>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <DMA_CalcBaseAndBitshift+0x68>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d909      	bls.n	8001a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a20:	e007      	b.n	8001a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	aaaaaaab 	.word	0xaaaaaaab
 8001a48:	0800413c 	.word	0x0800413c

08001a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11f      	bne.n	8001aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d855      	bhi.n	8001b18 <DMA_CheckFifoParam+0xcc>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x28>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a97 	.word	0x08001a97
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001b19 	.word	0x08001b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d045      	beq.n	8001b1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a94:	e042      	b.n	8001b1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a9e:	d13f      	bne.n	8001b20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e03c      	b.n	8001b20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aae:	d121      	bne.n	8001af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d836      	bhi.n	8001b24 <DMA_CheckFifoParam+0xd8>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <DMA_CheckFifoParam+0x70>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ad3 	.word	0x08001ad3
 8001ac4:	08001acd 	.word	0x08001acd
 8001ac8:	08001ae5 	.word	0x08001ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e02f      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae2:	e021      	b.n	8001b28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aec:	d11e      	bne.n	8001b2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001af2:	e01b      	b.n	8001b2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d902      	bls.n	8001b00 <DMA_CheckFifoParam+0xb4>
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d003      	beq.n	8001b06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001afe:	e018      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      break;
 8001b04:	e015      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00e      	beq.n	8001b30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      break;
 8001b16:	e00b      	b.n	8001b30 <DMA_CheckFifoParam+0xe4>
      break;
 8001b18:	bf00      	nop
 8001b1a:	e00a      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1c:	bf00      	nop
 8001b1e:	e008      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b20:	bf00      	nop
 8001b22:	e006      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b24:	bf00      	nop
 8001b26:	e004      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b28:	bf00      	nop
 8001b2a:	e002      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b2c:	bf00      	nop
 8001b2e:	e000      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b30:	bf00      	nop
    }
  } 
  
  return status; 
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e16b      	b.n	8001e34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 815a 	bne.w	8001e2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d00b      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8e:	2b11      	cmp	r3, #17
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0xfc>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80b4 	beq.w	8001e2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a5e      	ldr	r2, [pc, #376]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x310>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <HAL_GPIO_Init+0x226>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_GPIO_Init+0x314>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d025      	beq.n	8001d62 <HAL_GPIO_Init+0x222>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_GPIO_Init+0x318>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01f      	beq.n	8001d5e <HAL_GPIO_Init+0x21e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_GPIO_Init+0x320>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_GPIO_Init+0x328>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x32c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x20a>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00e      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x228>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4934      	ldr	r1, [pc, #208]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001daa:	4a31      	ldr	r2, [pc, #196]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae90 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40021400 	.word	0x40021400
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40021c00 	.word	0x40021c00
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e25b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4ba0      	ldr	r3, [pc, #640]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b9d      	ldr	r3, [pc, #628]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e236      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a90      	ldr	r2, [pc, #576]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a87      	ldr	r2, [pc, #540]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a83      	ldr	r2, [pc, #524]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f91e 	bl	80011a0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f91a 	bl	80011a0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1fb      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f90a 	bl	80011a0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f906 	bl	80011a0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1e7      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1bb      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4952      	ldr	r1, [pc, #328]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f8bf 	bl	80011a0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f8bb 	bl	80011a0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e19c      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4940      	ldr	r1, [pc, #256]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f89e 	bl	80011a0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f89a 	bl	80011a0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e17b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f87e 	bl	80011a0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f87a 	bl	80011a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e15b      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f867 	bl	80011a0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f863 	bl	80011a0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e144      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a0 	beq.w	8002242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d121      	bne.n	8002182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff f829 	bl	80011a0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e011      	b.n	8002176 <HAL_RCC_OscConfig+0x2ce>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
 8002160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7ff f81c 	bl	80011a0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0fd      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b81      	ldr	r3, [pc, #516]	; (800237c <HAL_RCC_OscConfig+0x4d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a7c      	ldr	r2, [pc, #496]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021a0:	4b77      	ldr	r3, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a76      	ldr	r2, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a73      	ldr	r2, [pc, #460]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 80021ba:	4b71      	ldr	r3, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a70      	ldr	r2, [pc, #448]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a6d      	ldr	r2, [pc, #436]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe ffe1 	bl	80011a0 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe ffdd 	bl	80011a0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0bc      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x33a>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe ffcb 	bl	80011a0 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe ffc7 	bl	80011a0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0a6      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a51      	ldr	r2, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8092 	beq.w	8002370 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d05c      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d141      	bne.n	80022e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff9b 	bl	80011a0 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe ff97 	bl	80011a0 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e078      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	4933      	ldr	r1, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff70 	bl	80011a0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff6c 	bl	80011a0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04d      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x41c>
 80022e2:	e045      	b.n	8002370 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x4dc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff59 	bl	80011a0 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff55 	bl	80011a0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e036      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x44a>
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e029      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x4d8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	429a      	cmp	r2, r3
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d115      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000
 8002380:	40023800 	.word	0x40023800
 8002384:	42470060 	.word	0x42470060

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe92 	bl	80011a0 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fe8e 	bl	80011a0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4601      	mov	r1, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	fa21 f303 	lsr.w	r3, r1, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fdf2 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08004124 	.word	0x08004124
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d007      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x32>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d008      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x38>
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 808d 	bne.w	800269a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002582:	60bb      	str	r3, [r7, #8]
       break;
 8002584:	e08c      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002588:	60bb      	str	r3, [r7, #8]
      break;
 800258a:	e089      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002594:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d023      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	ea03 0501 	and.w	r5, r3, r1
 80025b8:	ea04 0602 	and.w	r6, r4, r2
 80025bc:	4a3d      	ldr	r2, [pc, #244]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025be:	fb02 f106 	mul.w	r1, r2, r6
 80025c2:	2200      	movs	r2, #0
 80025c4:	fb02 f205 	mul.w	r2, r2, r5
 80025c8:	440a      	add	r2, r1
 80025ca:	493a      	ldr	r1, [pc, #232]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025cc:	fba5 0101 	umull	r0, r1, r5, r1
 80025d0:	1853      	adds	r3, r2, r1
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	f7fd fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e049      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	ea03 0501 	and.w	r5, r3, r1
 8002600:	ea04 0602 	and.w	r6, r4, r2
 8002604:	4629      	mov	r1, r5
 8002606:	4632      	mov	r2, r6
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	0154      	lsls	r4, r2, #5
 8002612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002616:	014b      	lsls	r3, r1, #5
 8002618:	4619      	mov	r1, r3
 800261a:	4622      	mov	r2, r4
 800261c:	1b49      	subs	r1, r1, r5
 800261e:	eb62 0206 	sbc.w	r2, r2, r6
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	f04f 0400 	mov.w	r4, #0
 800262a:	0194      	lsls	r4, r2, #6
 800262c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002630:	018b      	lsls	r3, r1, #6
 8002632:	1a5b      	subs	r3, r3, r1
 8002634:	eb64 0402 	sbc.w	r4, r4, r2
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	00e2      	lsls	r2, r4, #3
 8002642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	195b      	adds	r3, r3, r5
 800264e:	eb44 0406 	adc.w	r4, r4, r6
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	02a2      	lsls	r2, r4, #10
 800265c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002660:	0299      	lsls	r1, r3, #10
 8002662:	460b      	mov	r3, r1
 8002664:	4614      	mov	r4, r2
 8002666:	4618      	mov	r0, r3
 8002668:	4621      	mov	r1, r4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f7fd fda8 	bl	80001c8 <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x158>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	3301      	adds	r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	60bb      	str	r3, [r7, #8]
      break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a0:	68bb      	ldr	r3, [r7, #8]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4601      	mov	r1, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4a03      	ldr	r2, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08004134 	.word	0x08004134

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4601      	mov	r1, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08004134 	.word	0x08004134

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01d      	b.n	800276e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe faac 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 f9fa 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e01d      	b.n	80027c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f815 	bl	80027cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f000 f9cf 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fc9a 	bl	800312c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <HAL_TIM_PWM_Start+0x74>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_PWM_Start+0x2c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_TIM_PWM_Start+0x78>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_TIM_PWM_Start+0x30>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_TIM_PWM_Start+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d007      	beq.n	8002848 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40010000 	.word	0x40010000
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002872:	2302      	movs	r3, #2
 8002874:	e0b4      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	f200 809f 	bhi.w	80029cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800288e:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002894:	080028c9 	.word	0x080028c9
 8002898:	080029cd 	.word	0x080029cd
 800289c:	080029cd 	.word	0x080029cd
 80028a0:	080029cd 	.word	0x080029cd
 80028a4:	08002909 	.word	0x08002909
 80028a8:	080029cd 	.word	0x080029cd
 80028ac:	080029cd 	.word	0x080029cd
 80028b0:	080029cd 	.word	0x080029cd
 80028b4:	0800294b 	.word	0x0800294b
 80028b8:	080029cd 	.word	0x080029cd
 80028bc:	080029cd 	.word	0x080029cd
 80028c0:	080029cd 	.word	0x080029cd
 80028c4:	0800298b 	.word	0x0800298b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f9e2 	bl	8002c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0208 	orr.w	r2, r2, #8
 80028e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0204 	bic.w	r2, r2, #4
 80028f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6999      	ldr	r1, [r3, #24]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
      break;
 8002906:	e062      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa32 	bl	8002d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      break;
 8002948:	e041      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa87 	bl	8002e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0204 	bic.w	r2, r2, #4
 8002974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69d9      	ldr	r1, [r3, #28]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      break;
 8002988:	e021      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fadb 	bl	8002f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69d9      	ldr	r1, [r3, #28]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	61da      	str	r2, [r3, #28]
      break;
 80029ca:	e000      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80029cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_ConfigClockSource+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0a6      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d067      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x120>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d80b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x6c>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d073      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d802      	bhi.n	8002a4a <HAL_TIM_ConfigClockSource+0x62>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d06f      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a48:	e078      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d06c      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
 8002a4e:	2b30      	cmp	r3, #48	; 0x30
 8002a50:	d06a      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a52:	e073      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d00d      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0x8c>
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d804      	bhi.n	8002a66 <HAL_TIM_ConfigClockSource+0x7e>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d033      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0xe0>
 8002a60:	2b60      	cmp	r3, #96	; 0x60
 8002a62:	d041      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a64:	e06a      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d066      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x152>
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d017      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a72:	e063      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 fb32 	bl	80030ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e04c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 fb1b 	bl	80030ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	609a      	str	r2, [r3, #8]
      break;
 8002ac6:	e039      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 fa8f 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2150      	movs	r1, #80	; 0x50
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fae8 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e029      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 faae 	bl	8003056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2160      	movs	r1, #96	; 0x60
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fad8 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002b06:	e019      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	461a      	mov	r2, r3
 8002b16:	f000 fa6f 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fac8 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002b26:	e009      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fabf 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <TIM_Base_SetConfig+0x118>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3c      	ldr	r2, [pc, #240]	; (8002c74 <TIM_Base_SetConfig+0x11c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d108      	bne.n	8002baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d027      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <TIM_Base_SetConfig+0x118>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d023      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <TIM_Base_SetConfig+0x11c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <TIM_Base_SetConfig+0x128>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <TIM_Base_SetConfig+0x12c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00f      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <TIM_Base_SetConfig+0x134>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <TIM_Base_SetConfig+0x138>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <TIM_Base_SetConfig+0x13c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0xf8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800
 8002c8c:	40001800 	.word	0x40001800
 8002c90:	40001c00 	.word	0x40001c00
 8002c94:	40002000 	.word	0x40002000

08002c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <TIM_OC1_SetConfig+0xd8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_OC1_SetConfig+0x64>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <TIM_OC1_SetConfig+0xdc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0308 	bic.w	r3, r3, #8
 8002d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <TIM_OC1_SetConfig+0xd8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_OC1_SetConfig+0x8e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <TIM_OC1_SetConfig+0xdc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40010400 	.word	0x40010400

08002d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0210 	bic.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0320 	bic.w	r3, r3, #32
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <TIM_OC2_SetConfig+0xe4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_OC2_SetConfig+0x68>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <TIM_OC2_SetConfig+0xe8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10d      	bne.n	8002dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <TIM_OC2_SetConfig+0xe4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_OC2_SetConfig+0x94>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <TIM_OC2_SetConfig+0xe8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d113      	bne.n	8002e34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40010400 	.word	0x40010400

08002e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <TIM_OC3_SetConfig+0xe0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC3_SetConfig+0x66>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <TIM_OC3_SetConfig+0xe4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <TIM_OC3_SetConfig+0xe0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_OC3_SetConfig+0x92>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <TIM_OC3_SetConfig+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d113      	bne.n	8002f1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010400 	.word	0x40010400

08002f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	031b      	lsls	r3, r3, #12
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <TIM_OC4_SetConfig+0xa4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_OC4_SetConfig+0x68>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <TIM_OC4_SetConfig+0xa8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d109      	bne.n	8002fc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0210 	bic.w	r2, r3, #16
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	031b      	lsls	r3, r3, #12
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 0307 	orr.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	021a      	lsls	r2, r3, #8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	431a      	orrs	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2201      	movs	r2, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800318c:	2302      	movs	r3, #2
 800318e:	e05a      	b.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d01d      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10c      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4313      	orrs	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40010400 	.word	0x40010400
 8003268:	40014000 	.word	0x40014000
 800326c:	40001800 	.word	0x40001800

08003270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e03f      	b.n	8003302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fe16 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fb81 	bl	80039bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d166      	bne.n	80033f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_Receive_DMA+0x26>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e05f      	b.n	80033f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Receive_DMA+0x38>
 8003340:	2302      	movs	r3, #2
 8003342:	e058      	b.n	80033f6 <HAL_UART_Receive_DMA+0xea>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2222      	movs	r2, #34	; 0x22
 8003362:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_UART_Receive_DMA+0xf4>)
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <HAL_UART_Receive_DMA+0xf8>)
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_UART_Receive_DMA+0xfc>)
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2200      	movs	r2, #0
 8003384:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3304      	adds	r3, #4
 8003396:	4619      	mov	r1, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	f7fe f8ed 	bl	800157c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	08003635 	.word	0x08003635
 8003404:	0800369d 	.word	0x0800369d
 8003408:	080036b9 	.word	0x080036b9

0800340c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_UART_IRQHandler+0x52>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa2e 	bl	80038b8 <UART_Receive_IT>
      return;
 800345c:	e0d1      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80b0 	beq.w	80035c6 <HAL_UART_IRQHandler+0x1ba>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_IRQHandler+0x70>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a5 	beq.w	80035c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_UART_IRQHandler+0x90>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_UART_IRQHandler+0xb0>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	f043 0202 	orr.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0xd0>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_UART_IRQHandler+0xee>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f043 0208 	orr.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d078      	beq.n	8003600 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_UART_IRQHandler+0x11c>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9c8 	bl	80038b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_UART_IRQHandler+0x144>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d031      	beq.n	80035b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f911 	bl	8003778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d123      	bne.n	80035ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003572:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_UART_IRQHandler+0x1fc>)
 8003582:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe f84f 	bl	800162c <HAL_DMA_Abort_IT>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359e:	4610      	mov	r0, r2
 80035a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a2:	e00e      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f83b 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035aa:	e00a      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f837 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b2:	e006      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f833 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035c0:	e01e      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	bf00      	nop
    return;
 80035c4:	e01c      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1d6>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8fe 	bl	80037dc <UART_Transmit_IT>
    return;
 80035e0:	e00f      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_UART_IRQHandler+0x1f6>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f946 	bl	8003888 <UART_EndTransmit_IT>
    return;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003600:	bf00      	nop
  }
}
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	080037b5 	.word	0x080037b5

0800360c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11e      	bne.n	800368e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003664:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003684:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7fc ff7e 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ffae 	bl	800360c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b21      	cmp	r3, #33	; 0x21
 80036ea:	d108      	bne.n	80036fe <UART_DMAError+0x46>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036f8:	68b8      	ldr	r0, [r7, #8]
 80036fa:	f000 f827 	bl	800374c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b22      	cmp	r3, #34	; 0x22
 800371e:	d108      	bne.n	8003732 <UART_DMAError+0x7a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2200      	movs	r2, #0
 800372a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f000 f823 	bl	8003778 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f7ff ff6e 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003762:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800378e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff26 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b21      	cmp	r3, #33	; 0x21
 80037ee:	d144      	bne.n	800387a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d11a      	bne.n	8003830 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	e00e      	b.n	8003842 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]
 800382e:	e008      	b.n	8003842 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6211      	str	r1, [r2, #32]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4619      	mov	r1, r3
 8003850:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003864:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003874:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fc fe89 	bl	80005c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b22      	cmp	r3, #34	; 0x22
 80038ca:	d171      	bne.n	80039b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d123      	bne.n	800391e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10e      	bne.n	8003902 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	1c9a      	adds	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003900:	e029      	b.n	8003956 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	b29b      	uxth	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
 800391c:	e01b      	b.n	8003956 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6858      	ldr	r0, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	1c59      	adds	r1, r3, #1
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6291      	str	r1, [r2, #40]	; 0x28
 8003936:	b2c2      	uxtb	r2, r0
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e00c      	b.n	8003956 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	1c58      	adds	r0, r3, #1
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	6288      	str	r0, [r1, #40]	; 0x28
 800394e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29b      	uxth	r3, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003966:	2b00      	cmp	r3, #0
 8003968:	d120      	bne.n	80039ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0220 	bic.w	r2, r2, #32
 8003978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc fdf4 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e002      	b.n	80039b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039fe:	f023 030c 	bic.w	r3, r3, #12
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2a:	f040 818b 	bne.w	8003d44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4ac1      	ldr	r2, [pc, #772]	; (8003d38 <UART_SetConfig+0x37c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d005      	beq.n	8003a44 <UART_SetConfig+0x88>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4abf      	ldr	r2, [pc, #764]	; (8003d3c <UART_SetConfig+0x380>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f040 80bd 	bne.w	8003bbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe fe58 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003a48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	461d      	mov	r5, r3
 8003a4e:	f04f 0600 	mov.w	r6, #0
 8003a52:	46a8      	mov	r8, r5
 8003a54:	46b1      	mov	r9, r6
 8003a56:	eb18 0308 	adds.w	r3, r8, r8
 8003a5a:	eb49 0409 	adc.w	r4, r9, r9
 8003a5e:	4698      	mov	r8, r3
 8003a60:	46a1      	mov	r9, r4
 8003a62:	eb18 0805 	adds.w	r8, r8, r5
 8003a66:	eb49 0906 	adc.w	r9, r9, r6
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a7e:	4688      	mov	r8, r1
 8003a80:	4691      	mov	r9, r2
 8003a82:	eb18 0005 	adds.w	r0, r8, r5
 8003a86:	eb49 0106 	adc.w	r1, r9, r6
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	461d      	mov	r5, r3
 8003a90:	f04f 0600 	mov.w	r6, #0
 8003a94:	196b      	adds	r3, r5, r5
 8003a96:	eb46 0406 	adc.w	r4, r6, r6
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	f7fc fb93 	bl	80001c8 <__aeabi_uldivmod>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4ba5      	ldr	r3, [pc, #660]	; (8003d40 <UART_SetConfig+0x384>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	f04f 0600 	mov.w	r6, #0
 8003abc:	46a9      	mov	r9, r5
 8003abe:	46b2      	mov	sl, r6
 8003ac0:	eb19 0309 	adds.w	r3, r9, r9
 8003ac4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac8:	4699      	mov	r9, r3
 8003aca:	46a2      	mov	sl, r4
 8003acc:	eb19 0905 	adds.w	r9, r9, r5
 8003ad0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae8:	4689      	mov	r9, r1
 8003aea:	4692      	mov	sl, r2
 8003aec:	eb19 0005 	adds.w	r0, r9, r5
 8003af0:	eb4a 0106 	adc.w	r1, sl, r6
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	461d      	mov	r5, r3
 8003afa:	f04f 0600 	mov.w	r6, #0
 8003afe:	196b      	adds	r3, r5, r5
 8003b00:	eb46 0406 	adc.w	r4, r6, r6
 8003b04:	461a      	mov	r2, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	f7fc fb5e 	bl	80001c8 <__aeabi_uldivmod>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <UART_SetConfig+0x384>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	; 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a86      	ldr	r2, [pc, #536]	; (8003d40 <UART_SetConfig+0x384>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b34:	4498      	add	r8, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	461d      	mov	r5, r3
 8003b3a:	f04f 0600 	mov.w	r6, #0
 8003b3e:	46a9      	mov	r9, r5
 8003b40:	46b2      	mov	sl, r6
 8003b42:	eb19 0309 	adds.w	r3, r9, r9
 8003b46:	eb4a 040a 	adc.w	r4, sl, sl
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	46a2      	mov	sl, r4
 8003b4e:	eb19 0905 	adds.w	r9, r9, r5
 8003b52:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	4692      	mov	sl, r2
 8003b6e:	eb19 0005 	adds.w	r0, r9, r5
 8003b72:	eb4a 0106 	adc.w	r1, sl, r6
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	f04f 0600 	mov.w	r6, #0
 8003b80:	196b      	adds	r3, r5, r5
 8003b82:	eb46 0406 	adc.w	r4, r6, r6
 8003b86:	461a      	mov	r2, r3
 8003b88:	4623      	mov	r3, r4
 8003b8a:	f7fc fb1d 	bl	80001c8 <__aeabi_uldivmod>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <UART_SetConfig+0x384>)
 8003b96:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2164      	movs	r1, #100	; 0x64
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	3332      	adds	r3, #50	; 0x32
 8003ba8:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <UART_SetConfig+0x384>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 0207 	and.w	r2, r3, #7
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4442      	add	r2, r8
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	e26f      	b.n	800409e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bbe:	f7fe fd87 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003bc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	f04f 0600 	mov.w	r6, #0
 8003bcc:	46a8      	mov	r8, r5
 8003bce:	46b1      	mov	r9, r6
 8003bd0:	eb18 0308 	adds.w	r3, r8, r8
 8003bd4:	eb49 0409 	adc.w	r4, r9, r9
 8003bd8:	4698      	mov	r8, r3
 8003bda:	46a1      	mov	r9, r4
 8003bdc:	eb18 0805 	adds.w	r8, r8, r5
 8003be0:	eb49 0906 	adc.w	r9, r9, r6
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf8:	4688      	mov	r8, r1
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	eb18 0005 	adds.w	r0, r8, r5
 8003c00:	eb49 0106 	adc.w	r1, r9, r6
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	461d      	mov	r5, r3
 8003c0a:	f04f 0600 	mov.w	r6, #0
 8003c0e:	196b      	adds	r3, r5, r5
 8003c10:	eb46 0406 	adc.w	r4, r6, r6
 8003c14:	461a      	mov	r2, r3
 8003c16:	4623      	mov	r3, r4
 8003c18:	f7fc fad6 	bl	80001c8 <__aeabi_uldivmod>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	460c      	mov	r4, r1
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <UART_SetConfig+0x384>)
 8003c24:	fba3 2302 	umull	r2, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	461d      	mov	r5, r3
 8003c32:	f04f 0600 	mov.w	r6, #0
 8003c36:	46a9      	mov	r9, r5
 8003c38:	46b2      	mov	sl, r6
 8003c3a:	eb19 0309 	adds.w	r3, r9, r9
 8003c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c42:	4699      	mov	r9, r3
 8003c44:	46a2      	mov	sl, r4
 8003c46:	eb19 0905 	adds.w	r9, r9, r5
 8003c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c62:	4689      	mov	r9, r1
 8003c64:	4692      	mov	sl, r2
 8003c66:	eb19 0005 	adds.w	r0, r9, r5
 8003c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	461d      	mov	r5, r3
 8003c74:	f04f 0600 	mov.w	r6, #0
 8003c78:	196b      	adds	r3, r5, r5
 8003c7a:	eb46 0406 	adc.w	r4, r6, r6
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4623      	mov	r3, r4
 8003c82:	f7fc faa1 	bl	80001c8 <__aeabi_uldivmod>
 8003c86:	4603      	mov	r3, r0
 8003c88:	460c      	mov	r4, r1
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <UART_SetConfig+0x384>)
 8003c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2164      	movs	r1, #100	; 0x64
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	3332      	adds	r3, #50	; 0x32
 8003ca0:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <UART_SetConfig+0x384>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cae:	4498      	add	r8, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	f04f 0600 	mov.w	r6, #0
 8003cb8:	46a9      	mov	r9, r5
 8003cba:	46b2      	mov	sl, r6
 8003cbc:	eb19 0309 	adds.w	r3, r9, r9
 8003cc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003cc4:	4699      	mov	r9, r3
 8003cc6:	46a2      	mov	sl, r4
 8003cc8:	eb19 0905 	adds.w	r9, r9, r5
 8003ccc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ce0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ce4:	4689      	mov	r9, r1
 8003ce6:	4692      	mov	sl, r2
 8003ce8:	eb19 0005 	adds.w	r0, r9, r5
 8003cec:	eb4a 0106 	adc.w	r1, sl, r6
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	f04f 0600 	mov.w	r6, #0
 8003cfa:	196b      	adds	r3, r5, r5
 8003cfc:	eb46 0406 	adc.w	r4, r6, r6
 8003d00:	461a      	mov	r2, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	f7fc fa60 	bl	80001c8 <__aeabi_uldivmod>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <UART_SetConfig+0x384>)
 8003d10:	fba3 1302 	umull	r1, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	2164      	movs	r1, #100	; 0x64
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	3332      	adds	r3, #50	; 0x32
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <UART_SetConfig+0x384>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	f003 0207 	and.w	r2, r3, #7
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4442      	add	r2, r8
 8003d34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d36:	e1b2      	b.n	800409e <UART_SetConfig+0x6e2>
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4ad7      	ldr	r2, [pc, #860]	; (80040a8 <UART_SetConfig+0x6ec>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d005      	beq.n	8003d5a <UART_SetConfig+0x39e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4ad6      	ldr	r2, [pc, #856]	; (80040ac <UART_SetConfig+0x6f0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f040 80d1 	bne.w	8003efc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d5a:	f7fe fccd 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003d5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	469a      	mov	sl, r3
 8003d64:	f04f 0b00 	mov.w	fp, #0
 8003d68:	46d0      	mov	r8, sl
 8003d6a:	46d9      	mov	r9, fp
 8003d6c:	eb18 0308 	adds.w	r3, r8, r8
 8003d70:	eb49 0409 	adc.w	r4, r9, r9
 8003d74:	4698      	mov	r8, r3
 8003d76:	46a1      	mov	r9, r4
 8003d78:	eb18 080a 	adds.w	r8, r8, sl
 8003d7c:	eb49 090b 	adc.w	r9, r9, fp
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d94:	4688      	mov	r8, r1
 8003d96:	4691      	mov	r9, r2
 8003d98:	eb1a 0508 	adds.w	r5, sl, r8
 8003d9c:	eb4b 0609 	adc.w	r6, fp, r9
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	f04f 0400 	mov.w	r4, #0
 8003db2:	0094      	lsls	r4, r2, #2
 8003db4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003db8:	008b      	lsls	r3, r1, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	f7fc fa01 	bl	80001c8 <__aeabi_uldivmod>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4bb8      	ldr	r3, [pc, #736]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003dce:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	469b      	mov	fp, r3
 8003ddc:	f04f 0c00 	mov.w	ip, #0
 8003de0:	46d9      	mov	r9, fp
 8003de2:	46e2      	mov	sl, ip
 8003de4:	eb19 0309 	adds.w	r3, r9, r9
 8003de8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dec:	4699      	mov	r9, r3
 8003dee:	46a2      	mov	sl, r4
 8003df0:	eb19 090b 	adds.w	r9, r9, fp
 8003df4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e0c:	4689      	mov	r9, r1
 8003e0e:	4692      	mov	sl, r2
 8003e10:	eb1b 0509 	adds.w	r5, fp, r9
 8003e14:	eb4c 060a 	adc.w	r6, ip, sl
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	0094      	lsls	r4, r2, #2
 8003e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e30:	008b      	lsls	r3, r1, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	4623      	mov	r3, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	4631      	mov	r1, r6
 8003e3a:	f7fc f9c5 	bl	80001c8 <__aeabi_uldivmod>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b9a      	ldr	r3, [pc, #616]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003e46:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2164      	movs	r1, #100	; 0x64
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	3332      	adds	r3, #50	; 0x32
 8003e58:	4a95      	ldr	r2, [pc, #596]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	4498      	add	r8, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	469b      	mov	fp, r3
 8003e6a:	f04f 0c00 	mov.w	ip, #0
 8003e6e:	46d9      	mov	r9, fp
 8003e70:	46e2      	mov	sl, ip
 8003e72:	eb19 0309 	adds.w	r3, r9, r9
 8003e76:	eb4a 040a 	adc.w	r4, sl, sl
 8003e7a:	4699      	mov	r9, r3
 8003e7c:	46a2      	mov	sl, r4
 8003e7e:	eb19 090b 	adds.w	r9, r9, fp
 8003e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e9a:	4689      	mov	r9, r1
 8003e9c:	4692      	mov	sl, r2
 8003e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8003ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	0094      	lsls	r4, r2, #2
 8003eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	f7fc f97e 	bl	80001c8 <__aeabi_uldivmod>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b77      	ldr	r3, [pc, #476]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a72      	ldr	r2, [pc, #456]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4442      	add	r2, r8
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	e0d0      	b.n	800409e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fbe8 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	469a      	mov	sl, r3
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	46d0      	mov	r8, sl
 8003f0c:	46d9      	mov	r9, fp
 8003f0e:	eb18 0308 	adds.w	r3, r8, r8
 8003f12:	eb49 0409 	adc.w	r4, r9, r9
 8003f16:	4698      	mov	r8, r3
 8003f18:	46a1      	mov	r9, r4
 8003f1a:	eb18 080a 	adds.w	r8, r8, sl
 8003f1e:	eb49 090b 	adc.w	r9, r9, fp
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f36:	4688      	mov	r8, r1
 8003f38:	4691      	mov	r9, r2
 8003f3a:	eb1a 0508 	adds.w	r5, sl, r8
 8003f3e:	eb4b 0609 	adc.w	r6, fp, r9
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4619      	mov	r1, r3
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	f04f 0400 	mov.w	r4, #0
 8003f54:	0094      	lsls	r4, r2, #2
 8003f56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f5a:	008b      	lsls	r3, r1, #2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	4631      	mov	r1, r6
 8003f64:	f7fc f930 	bl	80001c8 <__aeabi_uldivmod>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003f70:	fba3 2302 	umull	r2, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	469b      	mov	fp, r3
 8003f7e:	f04f 0c00 	mov.w	ip, #0
 8003f82:	46d9      	mov	r9, fp
 8003f84:	46e2      	mov	sl, ip
 8003f86:	eb19 0309 	adds.w	r3, r9, r9
 8003f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f8e:	4699      	mov	r9, r3
 8003f90:	46a2      	mov	sl, r4
 8003f92:	eb19 090b 	adds.w	r9, r9, fp
 8003f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fae:	4689      	mov	r9, r1
 8003fb0:	4692      	mov	sl, r2
 8003fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8003fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	f04f 0400 	mov.w	r4, #0
 8003fcc:	0094      	lsls	r4, r2, #2
 8003fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd2:	008b      	lsls	r3, r1, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	4631      	mov	r1, r6
 8003fdc:	f7fc f8f4 	bl	80001c8 <__aeabi_uldivmod>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	; 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	3332      	adds	r3, #50	; 0x32
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <UART_SetConfig+0x6f4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004006:	4498      	add	r8, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	469b      	mov	fp, r3
 800400c:	f04f 0c00 	mov.w	ip, #0
 8004010:	46d9      	mov	r9, fp
 8004012:	46e2      	mov	sl, ip
 8004014:	eb19 0309 	adds.w	r3, r9, r9
 8004018:	eb4a 040a 	adc.w	r4, sl, sl
 800401c:	4699      	mov	r9, r3
 800401e:	46a2      	mov	sl, r4
 8004020:	eb19 090b 	adds.w	r9, r9, fp
 8004024:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800403c:	4689      	mov	r9, r1
 800403e:	4692      	mov	sl, r2
 8004040:	eb1b 0509 	adds.w	r5, fp, r9
 8004044:	eb4c 060a 	adc.w	r6, ip, sl
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	f04f 0400 	mov.w	r4, #0
 800405a:	0094      	lsls	r4, r2, #2
 800405c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	461a      	mov	r2, r3
 8004064:	4623      	mov	r3, r4
 8004066:	4628      	mov	r0, r5
 8004068:	4631      	mov	r1, r6
 800406a:	f7fc f8ad 	bl	80001c8 <__aeabi_uldivmod>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	461a      	mov	r2, r3
 8004074:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <UART_SetConfig+0x6f4>)
 8004076:	fba3 1302 	umull	r1, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2164      	movs	r1, #100	; 0x64
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	3332      	adds	r3, #50	; 0x32
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <UART_SetConfig+0x6f4>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	f003 020f 	and.w	r2, r3, #15
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4442      	add	r2, r8
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	e7ff      	b.n	800409e <UART_SetConfig+0x6e2>
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a8:	40011000 	.word	0x40011000
 80040ac:	40011400 	.word	0x40011400
 80040b0:	51eb851f 	.word	0x51eb851f

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4e0d      	ldr	r6, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1ba4      	subs	r4, r4, r6
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2500      	movs	r5, #0
 80040c0:	42a5      	cmp	r5, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4e0b      	ldr	r6, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 f820 	bl	800410c <_init>
 80040cc:	1ba4      	subs	r4, r4, r6
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2500      	movs	r5, #0
 80040d2:	42a5      	cmp	r5, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040dc:	4798      	blx	r3
 80040de:	3501      	adds	r5, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e6:	4798      	blx	r3
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	0800414c 	.word	0x0800414c
 80040f0:	0800414c 	.word	0x0800414c
 80040f4:	0800414c 	.word	0x0800414c
 80040f8:	08004150 	.word	0x08004150

080040fc <memset>:
 80040fc:	4402      	add	r2, r0
 80040fe:	4603      	mov	r3, r0
 8004100:	4293      	cmp	r3, r2
 8004102:	d100      	bne.n	8004106 <memset+0xa>
 8004104:	4770      	bx	lr
 8004106:	f803 1b01 	strb.w	r1, [r3], #1
 800410a:	e7f9      	b.n	8004100 <memset+0x4>

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
